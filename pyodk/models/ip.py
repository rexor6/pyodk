# coding: utf-8

"""
    Oktawave API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pyodk.configuration import Configuration


class Ip(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'address': 'str',
        'address_v6': 'str',
        'gateway': 'str',
        'net_mask': 'str',
        'instance': 'BaseResource',
        'mac_address': 'str',
        'interface_id': 'int',
        'dns_prefix': 'str',
        'dhcp_branch': 'str',
        'subregion': 'BaseResource',
        'type': 'DictionaryItem',
        'owner_account': 'BaseResource',
        'comment': 'str',
        'rev_dns': 'str',
        'rev_dns_v6': 'str',
        'creation_user': 'UserResource'
    }

    attribute_map = {
        'id': 'Id',
        'address': 'Address',
        'address_v6': 'AddressV6',
        'gateway': 'Gateway',
        'net_mask': 'NetMask',
        'instance': 'Instance',
        'mac_address': 'MacAddress',
        'interface_id': 'InterfaceId',
        'dns_prefix': 'DnsPrefix',
        'dhcp_branch': 'DhcpBranch',
        'subregion': 'Subregion',
        'type': 'Type',
        'owner_account': 'OwnerAccount',
        'comment': 'Comment',
        'rev_dns': 'RevDns',
        'rev_dns_v6': 'RevDnsV6',
        'creation_user': 'CreationUser'
    }

    def __init__(self, id=None, address=None, address_v6=None, gateway=None, net_mask=None, instance=None, mac_address=None, interface_id=None, dns_prefix=None, dhcp_branch=None, subregion=None, type=None, owner_account=None, comment=None, rev_dns=None, rev_dns_v6=None, creation_user=None, _configuration=None):  # noqa: E501
        """Ip - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._address = None
        self._address_v6 = None
        self._gateway = None
        self._net_mask = None
        self._instance = None
        self._mac_address = None
        self._interface_id = None
        self._dns_prefix = None
        self._dhcp_branch = None
        self._subregion = None
        self._type = None
        self._owner_account = None
        self._comment = None
        self._rev_dns = None
        self._rev_dns_v6 = None
        self._creation_user = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if address is not None:
            self.address = address
        if address_v6 is not None:
            self.address_v6 = address_v6
        if gateway is not None:
            self.gateway = gateway
        if net_mask is not None:
            self.net_mask = net_mask
        if instance is not None:
            self.instance = instance
        if mac_address is not None:
            self.mac_address = mac_address
        if interface_id is not None:
            self.interface_id = interface_id
        if dns_prefix is not None:
            self.dns_prefix = dns_prefix
        if dhcp_branch is not None:
            self.dhcp_branch = dhcp_branch
        if subregion is not None:
            self.subregion = subregion
        if type is not None:
            self.type = type
        if owner_account is not None:
            self.owner_account = owner_account
        if comment is not None:
            self.comment = comment
        if rev_dns is not None:
            self.rev_dns = rev_dns
        if rev_dns_v6 is not None:
            self.rev_dns_v6 = rev_dns_v6
        if creation_user is not None:
            self.creation_user = creation_user

    @property
    def id(self):
        """Gets the id of this Ip.  # noqa: E501

        ID  # noqa: E501

        :return: The id of this Ip.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Ip.

        ID  # noqa: E501

        :param id: The id of this Ip.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def address(self):
        """Gets the address of this Ip.  # noqa: E501

        IP address version 4  # noqa: E501

        :return: The address of this Ip.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Ip.

        IP address version 4  # noqa: E501

        :param address: The address of this Ip.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def address_v6(self):
        """Gets the address_v6 of this Ip.  # noqa: E501

        IP address version 6  # noqa: E501

        :return: The address_v6 of this Ip.  # noqa: E501
        :rtype: str
        """
        return self._address_v6

    @address_v6.setter
    def address_v6(self, address_v6):
        """Sets the address_v6 of this Ip.

        IP address version 6  # noqa: E501

        :param address_v6: The address_v6 of this Ip.  # noqa: E501
        :type: str
        """

        self._address_v6 = address_v6

    @property
    def gateway(self):
        """Gets the gateway of this Ip.  # noqa: E501

        Gateway address  # noqa: E501

        :return: The gateway of this Ip.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this Ip.

        Gateway address  # noqa: E501

        :param gateway: The gateway of this Ip.  # noqa: E501
        :type: str
        """

        self._gateway = gateway

    @property
    def net_mask(self):
        """Gets the net_mask of this Ip.  # noqa: E501

        Netmask  # noqa: E501

        :return: The net_mask of this Ip.  # noqa: E501
        :rtype: str
        """
        return self._net_mask

    @net_mask.setter
    def net_mask(self, net_mask):
        """Sets the net_mask of this Ip.

        Netmask  # noqa: E501

        :param net_mask: The net_mask of this Ip.  # noqa: E501
        :type: str
        """

        self._net_mask = net_mask

    @property
    def instance(self):
        """Gets the instance of this Ip.  # noqa: E501

        Instance  # noqa: E501

        :return: The instance of this Ip.  # noqa: E501
        :rtype: BaseResource
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this Ip.

        Instance  # noqa: E501

        :param instance: The instance of this Ip.  # noqa: E501
        :type: BaseResource
        """

        self._instance = instance

    @property
    def mac_address(self):
        """Gets the mac_address of this Ip.  # noqa: E501

        The MAC address of the network card associated with that IP address  # noqa: E501

        :return: The mac_address of this Ip.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this Ip.

        The MAC address of the network card associated with that IP address  # noqa: E501

        :param mac_address: The mac_address of this Ip.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def interface_id(self):
        """Gets the interface_id of this Ip.  # noqa: E501

        Network card number  # noqa: E501

        :return: The interface_id of this Ip.  # noqa: E501
        :rtype: int
        """
        return self._interface_id

    @interface_id.setter
    def interface_id(self, interface_id):
        """Sets the interface_id of this Ip.

        Network card number  # noqa: E501

        :param interface_id: The interface_id of this Ip.  # noqa: E501
        :type: int
        """

        self._interface_id = interface_id

    @property
    def dns_prefix(self):
        """Gets the dns_prefix of this Ip.  # noqa: E501

        DNS prefix  # noqa: E501

        :return: The dns_prefix of this Ip.  # noqa: E501
        :rtype: str
        """
        return self._dns_prefix

    @dns_prefix.setter
    def dns_prefix(self, dns_prefix):
        """Sets the dns_prefix of this Ip.

        DNS prefix  # noqa: E501

        :param dns_prefix: The dns_prefix of this Ip.  # noqa: E501
        :type: str
        """

        self._dns_prefix = dns_prefix

    @property
    def dhcp_branch(self):
        """Gets the dhcp_branch of this Ip.  # noqa: E501

        Dhcp branch address  # noqa: E501

        :return: The dhcp_branch of this Ip.  # noqa: E501
        :rtype: str
        """
        return self._dhcp_branch

    @dhcp_branch.setter
    def dhcp_branch(self, dhcp_branch):
        """Sets the dhcp_branch of this Ip.

        Dhcp branch address  # noqa: E501

        :param dhcp_branch: The dhcp_branch of this Ip.  # noqa: E501
        :type: str
        """

        self._dhcp_branch = dhcp_branch

    @property
    def subregion(self):
        """Gets the subregion of this Ip.  # noqa: E501

        Subregion  # noqa: E501

        :return: The subregion of this Ip.  # noqa: E501
        :rtype: BaseResource
        """
        return self._subregion

    @subregion.setter
    def subregion(self, subregion):
        """Sets the subregion of this Ip.

        Subregion  # noqa: E501

        :param subregion: The subregion of this Ip.  # noqa: E501
        :type: BaseResource
        """

        self._subregion = subregion

    @property
    def type(self):
        """Gets the type of this Ip.  # noqa: E501

        Type  # noqa: E501

        :return: The type of this Ip.  # noqa: E501
        :rtype: DictionaryItem
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Ip.

        Type  # noqa: E501

        :param type: The type of this Ip.  # noqa: E501
        :type: DictionaryItem
        """

        self._type = type

    @property
    def owner_account(self):
        """Gets the owner_account of this Ip.  # noqa: E501

        Account that is owner IP address  # noqa: E501

        :return: The owner_account of this Ip.  # noqa: E501
        :rtype: BaseResource
        """
        return self._owner_account

    @owner_account.setter
    def owner_account(self, owner_account):
        """Sets the owner_account of this Ip.

        Account that is owner IP address  # noqa: E501

        :param owner_account: The owner_account of this Ip.  # noqa: E501
        :type: BaseResource
        """

        self._owner_account = owner_account

    @property
    def comment(self):
        """Gets the comment of this Ip.  # noqa: E501

        Owner comment  # noqa: E501

        :return: The comment of this Ip.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Ip.

        Owner comment  # noqa: E501

        :param comment: The comment of this Ip.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def rev_dns(self):
        """Gets the rev_dns of this Ip.  # noqa: E501

        Reverse DNS IP version 4  # noqa: E501

        :return: The rev_dns of this Ip.  # noqa: E501
        :rtype: str
        """
        return self._rev_dns

    @rev_dns.setter
    def rev_dns(self, rev_dns):
        """Sets the rev_dns of this Ip.

        Reverse DNS IP version 4  # noqa: E501

        :param rev_dns: The rev_dns of this Ip.  # noqa: E501
        :type: str
        """

        self._rev_dns = rev_dns

    @property
    def rev_dns_v6(self):
        """Gets the rev_dns_v6 of this Ip.  # noqa: E501

        Reverse DNS IP version 6  # noqa: E501

        :return: The rev_dns_v6 of this Ip.  # noqa: E501
        :rtype: str
        """
        return self._rev_dns_v6

    @rev_dns_v6.setter
    def rev_dns_v6(self, rev_dns_v6):
        """Sets the rev_dns_v6 of this Ip.

        Reverse DNS IP version 6  # noqa: E501

        :param rev_dns_v6: The rev_dns_v6 of this Ip.  # noqa: E501
        :type: str
        """

        self._rev_dns_v6 = rev_dns_v6

    @property
    def creation_user(self):
        """Gets the creation_user of this Ip.  # noqa: E501

        User who created the IP  # noqa: E501

        :return: The creation_user of this Ip.  # noqa: E501
        :rtype: UserResource
        """
        return self._creation_user

    @creation_user.setter
    def creation_user(self, creation_user):
        """Sets the creation_user of this Ip.

        User who created the IP  # noqa: E501

        :param creation_user: The creation_user of this Ip.  # noqa: E501
        :type: UserResource
        """

        self._creation_user = creation_user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Ip, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Ip):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Ip):
            return True

        return self.to_dict() != other.to_dict()
