# coding: utf-8

"""
    Oktawave API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pyodk.configuration import Configuration


class Snapshot(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'instance': 'BaseResource',
        'creation_date': 'datetime',
        'last_change_date': 'datetime',
        'creation_user': 'UserResource',
        'is_system': 'bool',
        'is_current': 'bool',
        'snapshot_parent': 'BaseResource'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'description': 'Description',
        'instance': 'Instance',
        'creation_date': 'CreationDate',
        'last_change_date': 'LastChangeDate',
        'creation_user': 'CreationUser',
        'is_system': 'IsSystem',
        'is_current': 'IsCurrent',
        'snapshot_parent': 'SnapshotParent'
    }

    def __init__(self, id=None, name=None, description=None, instance=None, creation_date=None, last_change_date=None, creation_user=None, is_system=None, is_current=None, snapshot_parent=None, _configuration=None):  # noqa: E501
        """Snapshot - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._description = None
        self._instance = None
        self._creation_date = None
        self._last_change_date = None
        self._creation_user = None
        self._is_system = None
        self._is_current = None
        self._snapshot_parent = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if instance is not None:
            self.instance = instance
        if creation_date is not None:
            self.creation_date = creation_date
        if last_change_date is not None:
            self.last_change_date = last_change_date
        if creation_user is not None:
            self.creation_user = creation_user
        if is_system is not None:
            self.is_system = is_system
        if is_current is not None:
            self.is_current = is_current
        if snapshot_parent is not None:
            self.snapshot_parent = snapshot_parent

    @property
    def id(self):
        """Gets the id of this Snapshot.  # noqa: E501

        ID  # noqa: E501

        :return: The id of this Snapshot.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Snapshot.

        ID  # noqa: E501

        :param id: The id of this Snapshot.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Snapshot.  # noqa: E501

        Name  # noqa: E501

        :return: The name of this Snapshot.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Snapshot.

        Name  # noqa: E501

        :param name: The name of this Snapshot.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Snapshot.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this Snapshot.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Snapshot.

        Description  # noqa: E501

        :param description: The description of this Snapshot.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def instance(self):
        """Gets the instance of this Snapshot.  # noqa: E501

        Instance  # noqa: E501

        :return: The instance of this Snapshot.  # noqa: E501
        :rtype: BaseResource
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this Snapshot.

        Instance  # noqa: E501

        :param instance: The instance of this Snapshot.  # noqa: E501
        :type: BaseResource
        """

        self._instance = instance

    @property
    def creation_date(self):
        """Gets the creation_date of this Snapshot.  # noqa: E501

        Creation date  # noqa: E501

        :return: The creation_date of this Snapshot.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Snapshot.

        Creation date  # noqa: E501

        :param creation_date: The creation_date of this Snapshot.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def last_change_date(self):
        """Gets the last_change_date of this Snapshot.  # noqa: E501

        Last change date  # noqa: E501

        :return: The last_change_date of this Snapshot.  # noqa: E501
        :rtype: datetime
        """
        return self._last_change_date

    @last_change_date.setter
    def last_change_date(self, last_change_date):
        """Sets the last_change_date of this Snapshot.

        Last change date  # noqa: E501

        :param last_change_date: The last_change_date of this Snapshot.  # noqa: E501
        :type: datetime
        """

        self._last_change_date = last_change_date

    @property
    def creation_user(self):
        """Gets the creation_user of this Snapshot.  # noqa: E501

        User who created the snapshot  # noqa: E501

        :return: The creation_user of this Snapshot.  # noqa: E501
        :rtype: UserResource
        """
        return self._creation_user

    @creation_user.setter
    def creation_user(self, creation_user):
        """Sets the creation_user of this Snapshot.

        User who created the snapshot  # noqa: E501

        :param creation_user: The creation_user of this Snapshot.  # noqa: E501
        :type: UserResource
        """

        self._creation_user = creation_user

    @property
    def is_system(self):
        """Gets the is_system of this Snapshot.  # noqa: E501

        Is system snapshot. Not created by the user.  # noqa: E501

        :return: The is_system of this Snapshot.  # noqa: E501
        :rtype: bool
        """
        return self._is_system

    @is_system.setter
    def is_system(self, is_system):
        """Sets the is_system of this Snapshot.

        Is system snapshot. Not created by the user.  # noqa: E501

        :param is_system: The is_system of this Snapshot.  # noqa: E501
        :type: bool
        """

        self._is_system = is_system

    @property
    def is_current(self):
        """Gets the is_current of this Snapshot.  # noqa: E501

        Is current  # noqa: E501

        :return: The is_current of this Snapshot.  # noqa: E501
        :rtype: bool
        """
        return self._is_current

    @is_current.setter
    def is_current(self, is_current):
        """Sets the is_current of this Snapshot.

        Is current  # noqa: E501

        :param is_current: The is_current of this Snapshot.  # noqa: E501
        :type: bool
        """

        self._is_current = is_current

    @property
    def snapshot_parent(self):
        """Gets the snapshot_parent of this Snapshot.  # noqa: E501

        Snapshot parent  # noqa: E501

        :return: The snapshot_parent of this Snapshot.  # noqa: E501
        :rtype: BaseResource
        """
        return self._snapshot_parent

    @snapshot_parent.setter
    def snapshot_parent(self, snapshot_parent):
        """Sets the snapshot_parent of this Snapshot.

        Snapshot parent  # noqa: E501

        :param snapshot_parent: The snapshot_parent of this Snapshot.  # noqa: E501
        :type: BaseResource
        """

        self._snapshot_parent = snapshot_parent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Snapshot, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Snapshot):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Snapshot):
            return True

        return self.to_dict() != other.to_dict()
