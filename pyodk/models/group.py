# coding: utf-8

"""
    Oktawave API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pyodk.configuration import Configuration


class Group(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'is_load_balancer': 'bool',
        'instances_count': 'int',
        'schedulers_count': 'int',
        'affinity_rule_type': 'DictionaryItem',
        'autoscaling_type': 'DictionaryItem',
        'last_change_date': 'datetime',
        'creation_user': 'UserResource'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'is_load_balancer': 'IsLoadBalancer',
        'instances_count': 'InstancesCount',
        'schedulers_count': 'SchedulersCount',
        'affinity_rule_type': 'AffinityRuleType',
        'autoscaling_type': 'AutoscalingType',
        'last_change_date': 'LastChangeDate',
        'creation_user': 'CreationUser'
    }

    def __init__(self, id=None, name=None, is_load_balancer=None, instances_count=None, schedulers_count=None, affinity_rule_type=None, autoscaling_type=None, last_change_date=None, creation_user=None, _configuration=None):  # noqa: E501
        """Group - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._is_load_balancer = None
        self._instances_count = None
        self._schedulers_count = None
        self._affinity_rule_type = None
        self._autoscaling_type = None
        self._last_change_date = None
        self._creation_user = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if is_load_balancer is not None:
            self.is_load_balancer = is_load_balancer
        if instances_count is not None:
            self.instances_count = instances_count
        if schedulers_count is not None:
            self.schedulers_count = schedulers_count
        if affinity_rule_type is not None:
            self.affinity_rule_type = affinity_rule_type
        if autoscaling_type is not None:
            self.autoscaling_type = autoscaling_type
        if last_change_date is not None:
            self.last_change_date = last_change_date
        if creation_user is not None:
            self.creation_user = creation_user

    @property
    def id(self):
        """Gets the id of this Group.  # noqa: E501

        Id  # noqa: E501

        :return: The id of this Group.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Group.

        Id  # noqa: E501

        :param id: The id of this Group.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Group.  # noqa: E501

        Name  # noqa: E501

        :return: The name of this Group.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Group.

        Name  # noqa: E501

        :param name: The name of this Group.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def is_load_balancer(self):
        """Gets the is_load_balancer of this Group.  # noqa: E501

        Is load balancing enabled  # noqa: E501

        :return: The is_load_balancer of this Group.  # noqa: E501
        :rtype: bool
        """
        return self._is_load_balancer

    @is_load_balancer.setter
    def is_load_balancer(self, is_load_balancer):
        """Sets the is_load_balancer of this Group.

        Is load balancing enabled  # noqa: E501

        :param is_load_balancer: The is_load_balancer of this Group.  # noqa: E501
        :type: bool
        """

        self._is_load_balancer = is_load_balancer

    @property
    def instances_count(self):
        """Gets the instances_count of this Group.  # noqa: E501

        Instances count in container  # noqa: E501

        :return: The instances_count of this Group.  # noqa: E501
        :rtype: int
        """
        return self._instances_count

    @instances_count.setter
    def instances_count(self, instances_count):
        """Sets the instances_count of this Group.

        Instances count in container  # noqa: E501

        :param instances_count: The instances_count of this Group.  # noqa: E501
        :type: int
        """

        self._instances_count = instances_count

    @property
    def schedulers_count(self):
        """Gets the schedulers_count of this Group.  # noqa: E501

        Schedulers count assigned to container  # noqa: E501

        :return: The schedulers_count of this Group.  # noqa: E501
        :rtype: int
        """
        return self._schedulers_count

    @schedulers_count.setter
    def schedulers_count(self, schedulers_count):
        """Sets the schedulers_count of this Group.

        Schedulers count assigned to container  # noqa: E501

        :param schedulers_count: The schedulers_count of this Group.  # noqa: E501
        :type: int
        """

        self._schedulers_count = schedulers_count

    @property
    def affinity_rule_type(self):
        """Gets the affinity_rule_type of this Group.  # noqa: E501

        Instances affinity rule type  # noqa: E501

        :return: The affinity_rule_type of this Group.  # noqa: E501
        :rtype: DictionaryItem
        """
        return self._affinity_rule_type

    @affinity_rule_type.setter
    def affinity_rule_type(self, affinity_rule_type):
        """Sets the affinity_rule_type of this Group.

        Instances affinity rule type  # noqa: E501

        :param affinity_rule_type: The affinity_rule_type of this Group.  # noqa: E501
        :type: DictionaryItem
        """

        self._affinity_rule_type = affinity_rule_type

    @property
    def autoscaling_type(self):
        """Gets the autoscaling_type of this Group.  # noqa: E501

        Autoscaling type  # noqa: E501

        :return: The autoscaling_type of this Group.  # noqa: E501
        :rtype: DictionaryItem
        """
        return self._autoscaling_type

    @autoscaling_type.setter
    def autoscaling_type(self, autoscaling_type):
        """Sets the autoscaling_type of this Group.

        Autoscaling type  # noqa: E501

        :param autoscaling_type: The autoscaling_type of this Group.  # noqa: E501
        :type: DictionaryItem
        """

        self._autoscaling_type = autoscaling_type

    @property
    def last_change_date(self):
        """Gets the last_change_date of this Group.  # noqa: E501

        Last modified date  # noqa: E501

        :return: The last_change_date of this Group.  # noqa: E501
        :rtype: datetime
        """
        return self._last_change_date

    @last_change_date.setter
    def last_change_date(self, last_change_date):
        """Sets the last_change_date of this Group.

        Last modified date  # noqa: E501

        :param last_change_date: The last_change_date of this Group.  # noqa: E501
        :type: datetime
        """

        self._last_change_date = last_change_date

    @property
    def creation_user(self):
        """Gets the creation_user of this Group.  # noqa: E501

        User who created the group  # noqa: E501

        :return: The creation_user of this Group.  # noqa: E501
        :rtype: UserResource
        """
        return self._creation_user

    @creation_user.setter
    def creation_user(self, creation_user):
        """Sets the creation_user of this Group.

        User who created the group  # noqa: E501

        :param creation_user: The creation_user of this Group.  # noqa: E501
        :type: UserResource
        """

        self._creation_user = creation_user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Group, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Group):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Group):
            return True

        return self.to_dict() != other.to_dict()
