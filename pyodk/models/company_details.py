# coding: utf-8

"""
    Oktawave API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pyodk.configuration import Configuration


class CompanyDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'nip': 'str',
        'regon': 'str',
        'krs': 'str',
        'email': 'str',
        'phone': 'str'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'nip': 'Nip',
        'regon': 'Regon',
        'krs': 'Krs',
        'email': 'Email',
        'phone': 'Phone'
    }

    def __init__(self, id=None, name=None, nip=None, regon=None, krs=None, email=None, phone=None, _configuration=None):  # noqa: E501
        """CompanyDetails - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._nip = None
        self._regon = None
        self._krs = None
        self._email = None
        self._phone = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if nip is not None:
            self.nip = nip
        if regon is not None:
            self.regon = regon
        if krs is not None:
            self.krs = krs
        if email is not None:
            self.email = email
        if phone is not None:
            self.phone = phone

    @property
    def id(self):
        """Gets the id of this CompanyDetails.  # noqa: E501

        Company id  # noqa: E501

        :return: The id of this CompanyDetails.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CompanyDetails.

        Company id  # noqa: E501

        :param id: The id of this CompanyDetails.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CompanyDetails.  # noqa: E501

        Name  # noqa: E501

        :return: The name of this CompanyDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CompanyDetails.

        Name  # noqa: E501

        :param name: The name of this CompanyDetails.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def nip(self):
        """Gets the nip of this CompanyDetails.  # noqa: E501

        Nip  # noqa: E501

        :return: The nip of this CompanyDetails.  # noqa: E501
        :rtype: str
        """
        return self._nip

    @nip.setter
    def nip(self, nip):
        """Sets the nip of this CompanyDetails.

        Nip  # noqa: E501

        :param nip: The nip of this CompanyDetails.  # noqa: E501
        :type: str
        """

        self._nip = nip

    @property
    def regon(self):
        """Gets the regon of this CompanyDetails.  # noqa: E501

        Regon  # noqa: E501

        :return: The regon of this CompanyDetails.  # noqa: E501
        :rtype: str
        """
        return self._regon

    @regon.setter
    def regon(self, regon):
        """Sets the regon of this CompanyDetails.

        Regon  # noqa: E501

        :param regon: The regon of this CompanyDetails.  # noqa: E501
        :type: str
        """

        self._regon = regon

    @property
    def krs(self):
        """Gets the krs of this CompanyDetails.  # noqa: E501

        Krs  # noqa: E501

        :return: The krs of this CompanyDetails.  # noqa: E501
        :rtype: str
        """
        return self._krs

    @krs.setter
    def krs(self, krs):
        """Sets the krs of this CompanyDetails.

        Krs  # noqa: E501

        :param krs: The krs of this CompanyDetails.  # noqa: E501
        :type: str
        """

        self._krs = krs

    @property
    def email(self):
        """Gets the email of this CompanyDetails.  # noqa: E501

        Email  # noqa: E501

        :return: The email of this CompanyDetails.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CompanyDetails.

        Email  # noqa: E501

        :param email: The email of this CompanyDetails.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def phone(self):
        """Gets the phone of this CompanyDetails.  # noqa: E501

        Phone  # noqa: E501

        :return: The phone of this CompanyDetails.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this CompanyDetails.

        Phone  # noqa: E501

        :param phone: The phone of this CompanyDetails.  # noqa: E501
        :type: str
        """

        self._phone = phone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompanyDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompanyDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CompanyDetails):
            return True

        return self.to_dict() != other.to_dict()
