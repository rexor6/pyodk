# coding: utf-8

"""
    Oktawave API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pyodk.configuration import Configuration


class CreateUpdateInstanceSchedulerCommand(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type_id': 'int',
        'start_date': 'datetime',
        'time_zone_name': 'str',
        'cycle_type_id': 'int',
        'cycle_number': 'int',
        'action_type_id': 'int',
        'new_instance_type_id': 'int',
        'snapshot_name': 'str',
        'snapshot_description': 'str',
        'snapshot_id': 'int',
        'clone_name': 'str',
        'storage_path': 'str',
        'storage_project_id': 'str',
        'is_backups_days_limit': 'bool',
        'backups_days_limit': 'int'
    }

    attribute_map = {
        'name': 'Name',
        'type_id': 'TypeId',
        'start_date': 'StartDate',
        'time_zone_name': 'TimeZoneName',
        'cycle_type_id': 'CycleTypeId',
        'cycle_number': 'CycleNumber',
        'action_type_id': 'ActionTypeId',
        'new_instance_type_id': 'NewInstanceTypeId',
        'snapshot_name': 'SnapshotName',
        'snapshot_description': 'SnapshotDescription',
        'snapshot_id': 'SnapshotId',
        'clone_name': 'CloneName',
        'storage_path': 'StoragePath',
        'storage_project_id': 'StorageProjectId',
        'is_backups_days_limit': 'IsBackupsDaysLimit',
        'backups_days_limit': 'BackupsDaysLimit'
    }

    def __init__(self, name=None, type_id=None, start_date=None, time_zone_name=None, cycle_type_id=None, cycle_number=None, action_type_id=None, new_instance_type_id=None, snapshot_name=None, snapshot_description=None, snapshot_id=None, clone_name=None, storage_path=None, storage_project_id=None, is_backups_days_limit=None, backups_days_limit=None, _configuration=None):  # noqa: E501
        """CreateUpdateInstanceSchedulerCommand - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._type_id = None
        self._start_date = None
        self._time_zone_name = None
        self._cycle_type_id = None
        self._cycle_number = None
        self._action_type_id = None
        self._new_instance_type_id = None
        self._snapshot_name = None
        self._snapshot_description = None
        self._snapshot_id = None
        self._clone_name = None
        self._storage_path = None
        self._storage_project_id = None
        self._is_backups_days_limit = None
        self._backups_days_limit = None
        self.discriminator = None

        self.name = name
        self.type_id = type_id
        self.start_date = start_date
        self.time_zone_name = time_zone_name
        if cycle_type_id is not None:
            self.cycle_type_id = cycle_type_id
        if cycle_number is not None:
            self.cycle_number = cycle_number
        self.action_type_id = action_type_id
        if new_instance_type_id is not None:
            self.new_instance_type_id = new_instance_type_id
        if snapshot_name is not None:
            self.snapshot_name = snapshot_name
        if snapshot_description is not None:
            self.snapshot_description = snapshot_description
        if snapshot_id is not None:
            self.snapshot_id = snapshot_id
        if clone_name is not None:
            self.clone_name = clone_name
        if storage_path is not None:
            self.storage_path = storage_path
        if storage_project_id is not None:
            self.storage_project_id = storage_project_id
        if is_backups_days_limit is not None:
            self.is_backups_days_limit = is_backups_days_limit
        if backups_days_limit is not None:
            self.backups_days_limit = backups_days_limit

    @property
    def name(self):
        """Gets the name of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501

        Name  # noqa: E501

        :return: The name of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateUpdateInstanceSchedulerCommand.

        Name  # noqa: E501

        :param name: The name of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 400):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `400`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and not re.search(r'^[^\/\\\\|<>%]*$', name)):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^[^\/\\\\|<>%]*$/`")  # noqa: E501

        self._name = name

    @property
    def type_id(self):
        """Gets the type_id of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501

        Type id  # noqa: E501

        :return: The type_id of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this CreateUpdateInstanceSchedulerCommand.

        Type id  # noqa: E501

        :param type_id: The type_id of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")  # noqa: E501

        self._type_id = type_id

    @property
    def start_date(self):
        """Gets the start_date of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501

        Start date  # noqa: E501

        :return: The start_date of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this CreateUpdateInstanceSchedulerCommand.

        Start date  # noqa: E501

        :param start_date: The start_date of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def time_zone_name(self):
        """Gets the time_zone_name of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501

        IANA Time zone. To get a list of available timezones, visit (https://momentjs.com/timezone)  # noqa: E501

        :return: The time_zone_name of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501
        :rtype: str
        """
        return self._time_zone_name

    @time_zone_name.setter
    def time_zone_name(self, time_zone_name):
        """Sets the time_zone_name of this CreateUpdateInstanceSchedulerCommand.

        IANA Time zone. To get a list of available timezones, visit (https://momentjs.com/timezone)  # noqa: E501

        :param time_zone_name: The time_zone_name of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and time_zone_name is None:
            raise ValueError("Invalid value for `time_zone_name`, must not be `None`")  # noqa: E501

        self._time_zone_name = time_zone_name

    @property
    def cycle_type_id(self):
        """Gets the cycle_type_id of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501

        Cycle type id  # noqa: E501

        :return: The cycle_type_id of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501
        :rtype: int
        """
        return self._cycle_type_id

    @cycle_type_id.setter
    def cycle_type_id(self, cycle_type_id):
        """Sets the cycle_type_id of this CreateUpdateInstanceSchedulerCommand.

        Cycle type id  # noqa: E501

        :param cycle_type_id: The cycle_type_id of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501
        :type: int
        """

        self._cycle_type_id = cycle_type_id

    @property
    def cycle_number(self):
        """Gets the cycle_number of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501

        Cycle number beetwen scheduler launch  # noqa: E501

        :return: The cycle_number of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501
        :rtype: int
        """
        return self._cycle_number

    @cycle_number.setter
    def cycle_number(self, cycle_number):
        """Sets the cycle_number of this CreateUpdateInstanceSchedulerCommand.

        Cycle number beetwen scheduler launch  # noqa: E501

        :param cycle_number: The cycle_number of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                cycle_number is not None and cycle_number > 32767):  # noqa: E501
            raise ValueError("Invalid value for `cycle_number`, must be a value less than or equal to `32767`")  # noqa: E501
        if (self._configuration.client_side_validation and
                cycle_number is not None and cycle_number < 1):  # noqa: E501
            raise ValueError("Invalid value for `cycle_number`, must be a value greater than or equal to `1`")  # noqa: E501

        self._cycle_number = cycle_number

    @property
    def action_type_id(self):
        """Gets the action_type_id of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501

        Action type  # noqa: E501

        :return: The action_type_id of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501
        :rtype: int
        """
        return self._action_type_id

    @action_type_id.setter
    def action_type_id(self, action_type_id):
        """Sets the action_type_id of this CreateUpdateInstanceSchedulerCommand.

        Action type  # noqa: E501

        :param action_type_id: The action_type_id of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and action_type_id is None:
            raise ValueError("Invalid value for `action_type_id`, must not be `None`")  # noqa: E501

        self._action_type_id = action_type_id

    @property
    def new_instance_type_id(self):
        """Gets the new_instance_type_id of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501

        New instance type. In case of \"Instance type change\" action type.  # noqa: E501

        :return: The new_instance_type_id of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501
        :rtype: int
        """
        return self._new_instance_type_id

    @new_instance_type_id.setter
    def new_instance_type_id(self, new_instance_type_id):
        """Sets the new_instance_type_id of this CreateUpdateInstanceSchedulerCommand.

        New instance type. In case of \"Instance type change\" action type.  # noqa: E501

        :param new_instance_type_id: The new_instance_type_id of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501
        :type: int
        """

        self._new_instance_type_id = new_instance_type_id

    @property
    def snapshot_name(self):
        """Gets the snapshot_name of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501

        Snapshot name. In case of \"Create snapshot\" action type.  # noqa: E501

        :return: The snapshot_name of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_name

    @snapshot_name.setter
    def snapshot_name(self, snapshot_name):
        """Sets the snapshot_name of this CreateUpdateInstanceSchedulerCommand.

        Snapshot name. In case of \"Create snapshot\" action type.  # noqa: E501

        :param snapshot_name: The snapshot_name of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                snapshot_name is not None and len(snapshot_name) > 400):
            raise ValueError("Invalid value for `snapshot_name`, length must be less than or equal to `400`")  # noqa: E501
        if (self._configuration.client_side_validation and
                snapshot_name is not None and len(snapshot_name) < 0):
            raise ValueError("Invalid value for `snapshot_name`, length must be greater than or equal to `0`")  # noqa: E501

        self._snapshot_name = snapshot_name

    @property
    def snapshot_description(self):
        """Gets the snapshot_description of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501

        Snapshot description. In case of \"Create snapshot\" action type.  # noqa: E501

        :return: The snapshot_description of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_description

    @snapshot_description.setter
    def snapshot_description(self, snapshot_description):
        """Sets the snapshot_description of this CreateUpdateInstanceSchedulerCommand.

        Snapshot description. In case of \"Create snapshot\" action type.  # noqa: E501

        :param snapshot_description: The snapshot_description of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                snapshot_description is not None and len(snapshot_description) > 2000):
            raise ValueError("Invalid value for `snapshot_description`, length must be less than or equal to `2000`")  # noqa: E501
        if (self._configuration.client_side_validation and
                snapshot_description is not None and len(snapshot_description) < 0):
            raise ValueError("Invalid value for `snapshot_description`, length must be greater than or equal to `0`")  # noqa: E501

        self._snapshot_description = snapshot_description

    @property
    def snapshot_id(self):
        """Gets the snapshot_id of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501

        Snashot. In case of \"Delete snapshot\" action type.  # noqa: E501

        :return: The snapshot_id of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501
        :rtype: int
        """
        return self._snapshot_id

    @snapshot_id.setter
    def snapshot_id(self, snapshot_id):
        """Sets the snapshot_id of this CreateUpdateInstanceSchedulerCommand.

        Snashot. In case of \"Delete snapshot\" action type.  # noqa: E501

        :param snapshot_id: The snapshot_id of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501
        :type: int
        """

        self._snapshot_id = snapshot_id

    @property
    def clone_name(self):
        """Gets the clone_name of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501

        Clone name. In case of \"Clone machine\" action type.  # noqa: E501

        :return: The clone_name of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501
        :rtype: str
        """
        return self._clone_name

    @clone_name.setter
    def clone_name(self, clone_name):
        """Sets the clone_name of this CreateUpdateInstanceSchedulerCommand.

        Clone name. In case of \"Clone machine\" action type.  # noqa: E501

        :param clone_name: The clone_name of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                clone_name is not None and not re.search(r'^[^\/]*$', clone_name)):  # noqa: E501
            raise ValueError(r"Invalid value for `clone_name`, must be a follow pattern or equal to `/^[^\/]*$/`")  # noqa: E501

        self._clone_name = clone_name

    @property
    def storage_path(self):
        """Gets the storage_path of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501

        Storage path. In case of \"Create backup\" action type.  # noqa: E501

        :return: The storage_path of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501
        :rtype: str
        """
        return self._storage_path

    @storage_path.setter
    def storage_path(self, storage_path):
        """Sets the storage_path of this CreateUpdateInstanceSchedulerCommand.

        Storage path. In case of \"Create backup\" action type.  # noqa: E501

        :param storage_path: The storage_path of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                storage_path is not None and len(storage_path) > 400):
            raise ValueError("Invalid value for `storage_path`, length must be less than or equal to `400`")  # noqa: E501
        if (self._configuration.client_side_validation and
                storage_path is not None and len(storage_path) < 0):
            raise ValueError("Invalid value for `storage_path`, length must be greater than or equal to `0`")  # noqa: E501

        self._storage_path = storage_path

    @property
    def storage_project_id(self):
        """Gets the storage_project_id of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501

        Storage project id. In case of \"Create backup\" action type.  # noqa: E501

        :return: The storage_project_id of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501
        :rtype: str
        """
        return self._storage_project_id

    @storage_project_id.setter
    def storage_project_id(self, storage_project_id):
        """Sets the storage_project_id of this CreateUpdateInstanceSchedulerCommand.

        Storage project id. In case of \"Create backup\" action type.  # noqa: E501

        :param storage_project_id: The storage_project_id of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                storage_project_id is not None and len(storage_project_id) > 50):
            raise ValueError("Invalid value for `storage_project_id`, length must be less than or equal to `50`")  # noqa: E501
        if (self._configuration.client_side_validation and
                storage_project_id is not None and len(storage_project_id) < 0):
            raise ValueError("Invalid value for `storage_project_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._storage_project_id = storage_project_id

    @property
    def is_backups_days_limit(self):
        """Gets the is_backups_days_limit of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501

        Is backups days limit set. In case of \"Create backup\" action type.  # noqa: E501

        :return: The is_backups_days_limit of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501
        :rtype: bool
        """
        return self._is_backups_days_limit

    @is_backups_days_limit.setter
    def is_backups_days_limit(self, is_backups_days_limit):
        """Sets the is_backups_days_limit of this CreateUpdateInstanceSchedulerCommand.

        Is backups days limit set. In case of \"Create backup\" action type.  # noqa: E501

        :param is_backups_days_limit: The is_backups_days_limit of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501
        :type: bool
        """

        self._is_backups_days_limit = is_backups_days_limit

    @property
    def backups_days_limit(self):
        """Gets the backups_days_limit of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501

        Backups days limit. In case of \"Create backup\" action type.  # noqa: E501

        :return: The backups_days_limit of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501
        :rtype: int
        """
        return self._backups_days_limit

    @backups_days_limit.setter
    def backups_days_limit(self, backups_days_limit):
        """Sets the backups_days_limit of this CreateUpdateInstanceSchedulerCommand.

        Backups days limit. In case of \"Create backup\" action type.  # noqa: E501

        :param backups_days_limit: The backups_days_limit of this CreateUpdateInstanceSchedulerCommand.  # noqa: E501
        :type: int
        """

        self._backups_days_limit = backups_days_limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateUpdateInstanceSchedulerCommand, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateUpdateInstanceSchedulerCommand):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateUpdateInstanceSchedulerCommand):
            return True

        return self.to_dict() != other.to_dict()
