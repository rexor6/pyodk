# coding: utf-8

"""
    Oktawave API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pyodk.configuration import Configuration


class PrivateIp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'interface_id': 'int',
        'mac_address': 'str',
        'address': 'str',
        'address_v6': 'str',
        'instance': 'BaseResource',
        'creation_date': 'datetime'
    }

    attribute_map = {
        'interface_id': 'InterfaceId',
        'mac_address': 'MacAddress',
        'address': 'Address',
        'address_v6': 'AddressV6',
        'instance': 'Instance',
        'creation_date': 'CreationDate'
    }

    def __init__(self, interface_id=None, mac_address=None, address=None, address_v6=None, instance=None, creation_date=None, _configuration=None):  # noqa: E501
        """PrivateIp - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._interface_id = None
        self._mac_address = None
        self._address = None
        self._address_v6 = None
        self._instance = None
        self._creation_date = None
        self.discriminator = None

        if interface_id is not None:
            self.interface_id = interface_id
        if mac_address is not None:
            self.mac_address = mac_address
        if address is not None:
            self.address = address
        if address_v6 is not None:
            self.address_v6 = address_v6
        if instance is not None:
            self.instance = instance
        if creation_date is not None:
            self.creation_date = creation_date

    @property
    def interface_id(self):
        """Gets the interface_id of this PrivateIp.  # noqa: E501

        Interface id  # noqa: E501

        :return: The interface_id of this PrivateIp.  # noqa: E501
        :rtype: int
        """
        return self._interface_id

    @interface_id.setter
    def interface_id(self, interface_id):
        """Sets the interface_id of this PrivateIp.

        Interface id  # noqa: E501

        :param interface_id: The interface_id of this PrivateIp.  # noqa: E501
        :type: int
        """

        self._interface_id = interface_id

    @property
    def mac_address(self):
        """Gets the mac_address of this PrivateIp.  # noqa: E501

        The MAC address of the network card associated with that IP address  # noqa: E501

        :return: The mac_address of this PrivateIp.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this PrivateIp.

        The MAC address of the network card associated with that IP address  # noqa: E501

        :param mac_address: The mac_address of this PrivateIp.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def address(self):
        """Gets the address of this PrivateIp.  # noqa: E501

        Adres IPv4  # noqa: E501

        :return: The address of this PrivateIp.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this PrivateIp.

        Adres IPv4  # noqa: E501

        :param address: The address of this PrivateIp.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def address_v6(self):
        """Gets the address_v6 of this PrivateIp.  # noqa: E501

        Adres IPv6  # noqa: E501

        :return: The address_v6 of this PrivateIp.  # noqa: E501
        :rtype: str
        """
        return self._address_v6

    @address_v6.setter
    def address_v6(self, address_v6):
        """Sets the address_v6 of this PrivateIp.

        Adres IPv6  # noqa: E501

        :param address_v6: The address_v6 of this PrivateIp.  # noqa: E501
        :type: str
        """

        self._address_v6 = address_v6

    @property
    def instance(self):
        """Gets the instance of this PrivateIp.  # noqa: E501

        Instance  # noqa: E501

        :return: The instance of this PrivateIp.  # noqa: E501
        :rtype: BaseResource
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this PrivateIp.

        Instance  # noqa: E501

        :param instance: The instance of this PrivateIp.  # noqa: E501
        :type: BaseResource
        """

        self._instance = instance

    @property
    def creation_date(self):
        """Gets the creation_date of this PrivateIp.  # noqa: E501

        Creation date  # noqa: E501

        :return: The creation_date of this PrivateIp.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this PrivateIp.

        Creation date  # noqa: E501

        :param creation_date: The creation_date of this PrivateIp.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PrivateIp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrivateIp):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PrivateIp):
            return True

        return self.to_dict() != other.to_dict()
