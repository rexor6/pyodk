# coding: utf-8

"""
    Oktawave API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pyodk.configuration import Configuration


class Instance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'creation_date': 'datetime',
        'creation_user': 'UserResource',
        'is_locked': 'bool',
        'locking_date': 'datetime',
        'template': 'BaseResource',
        'subregion': 'BaseResource',
        'type': 'DictionaryItem',
        'status': 'DictionaryItem',
        'system_category': 'DictionaryItem',
        'autoscaling_type': 'DictionaryItem',
        'vm_ware_tools_status': 'DictionaryItem',
        'monit_status': 'DictionaryItem',
        'template_type': 'DictionaryItem',
        'ip_address': 'str',
        'private_ip_address': 'str',
        'dns_address': 'str',
        'total_disks_capacity': 'int',
        'payment_type': 'DictionaryItem',
        'health_check': 'BaseResource',
        'scsi_controller_type': 'DictionaryItem',
        'is_freemium': 'bool',
        'cpu_number': 'int',
        'ram_mb': 'int',
        'support_type': 'Software'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'creation_date': 'CreationDate',
        'creation_user': 'CreationUser',
        'is_locked': 'IsLocked',
        'locking_date': 'LockingDate',
        'template': 'Template',
        'subregion': 'Subregion',
        'type': 'Type',
        'status': 'Status',
        'system_category': 'SystemCategory',
        'autoscaling_type': 'AutoscalingType',
        'vm_ware_tools_status': 'VmWareToolsStatus',
        'monit_status': 'MonitStatus',
        'template_type': 'TemplateType',
        'ip_address': 'IpAddress',
        'private_ip_address': 'PrivateIpAddress',
        'dns_address': 'DnsAddress',
        'total_disks_capacity': 'TotalDisksCapacity',
        'payment_type': 'PaymentType',
        'health_check': 'HealthCheck',
        'scsi_controller_type': 'ScsiControllerType',
        'is_freemium': 'IsFreemium',
        'cpu_number': 'CpuNumber',
        'ram_mb': 'RamMb',
        'support_type': 'SupportType'
    }

    def __init__(self, id=None, name=None, creation_date=None, creation_user=None, is_locked=None, locking_date=None, template=None, subregion=None, type=None, status=None, system_category=None, autoscaling_type=None, vm_ware_tools_status=None, monit_status=None, template_type=None, ip_address=None, private_ip_address=None, dns_address=None, total_disks_capacity=None, payment_type=None, health_check=None, scsi_controller_type=None, is_freemium=None, cpu_number=None, ram_mb=None, support_type=None, _configuration=None):  # noqa: E501
        """Instance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._creation_date = None
        self._creation_user = None
        self._is_locked = None
        self._locking_date = None
        self._template = None
        self._subregion = None
        self._type = None
        self._status = None
        self._system_category = None
        self._autoscaling_type = None
        self._vm_ware_tools_status = None
        self._monit_status = None
        self._template_type = None
        self._ip_address = None
        self._private_ip_address = None
        self._dns_address = None
        self._total_disks_capacity = None
        self._payment_type = None
        self._health_check = None
        self._scsi_controller_type = None
        self._is_freemium = None
        self._cpu_number = None
        self._ram_mb = None
        self._support_type = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if creation_date is not None:
            self.creation_date = creation_date
        if creation_user is not None:
            self.creation_user = creation_user
        if is_locked is not None:
            self.is_locked = is_locked
        if locking_date is not None:
            self.locking_date = locking_date
        if template is not None:
            self.template = template
        if subregion is not None:
            self.subregion = subregion
        if type is not None:
            self.type = type
        if status is not None:
            self.status = status
        if system_category is not None:
            self.system_category = system_category
        if autoscaling_type is not None:
            self.autoscaling_type = autoscaling_type
        if vm_ware_tools_status is not None:
            self.vm_ware_tools_status = vm_ware_tools_status
        if monit_status is not None:
            self.monit_status = monit_status
        if template_type is not None:
            self.template_type = template_type
        if ip_address is not None:
            self.ip_address = ip_address
        if private_ip_address is not None:
            self.private_ip_address = private_ip_address
        if dns_address is not None:
            self.dns_address = dns_address
        if total_disks_capacity is not None:
            self.total_disks_capacity = total_disks_capacity
        if payment_type is not None:
            self.payment_type = payment_type
        if health_check is not None:
            self.health_check = health_check
        if scsi_controller_type is not None:
            self.scsi_controller_type = scsi_controller_type
        if is_freemium is not None:
            self.is_freemium = is_freemium
        if cpu_number is not None:
            self.cpu_number = cpu_number
        if ram_mb is not None:
            self.ram_mb = ram_mb
        if support_type is not None:
            self.support_type = support_type

    @property
    def id(self):
        """Gets the id of this Instance.  # noqa: E501

        ID  # noqa: E501

        :return: The id of this Instance.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Instance.

        ID  # noqa: E501

        :param id: The id of this Instance.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Instance.  # noqa: E501

        Name  # noqa: E501

        :return: The name of this Instance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Instance.

        Name  # noqa: E501

        :param name: The name of this Instance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def creation_date(self):
        """Gets the creation_date of this Instance.  # noqa: E501

        Creation date  # noqa: E501

        :return: The creation_date of this Instance.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Instance.

        Creation date  # noqa: E501

        :param creation_date: The creation_date of this Instance.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def creation_user(self):
        """Gets the creation_user of this Instance.  # noqa: E501

        User who created the instance  # noqa: E501

        :return: The creation_user of this Instance.  # noqa: E501
        :rtype: UserResource
        """
        return self._creation_user

    @creation_user.setter
    def creation_user(self, creation_user):
        """Sets the creation_user of this Instance.

        User who created the instance  # noqa: E501

        :param creation_user: The creation_user of this Instance.  # noqa: E501
        :type: UserResource
        """

        self._creation_user = creation_user

    @property
    def is_locked(self):
        """Gets the is_locked of this Instance.  # noqa: E501

        If the instance is locked by a running operation  # noqa: E501

        :return: The is_locked of this Instance.  # noqa: E501
        :rtype: bool
        """
        return self._is_locked

    @is_locked.setter
    def is_locked(self, is_locked):
        """Sets the is_locked of this Instance.

        If the instance is locked by a running operation  # noqa: E501

        :param is_locked: The is_locked of this Instance.  # noqa: E501
        :type: bool
        """

        self._is_locked = is_locked

    @property
    def locking_date(self):
        """Gets the locking_date of this Instance.  # noqa: E501

        Locking date  # noqa: E501

        :return: The locking_date of this Instance.  # noqa: E501
        :rtype: datetime
        """
        return self._locking_date

    @locking_date.setter
    def locking_date(self, locking_date):
        """Sets the locking_date of this Instance.

        Locking date  # noqa: E501

        :param locking_date: The locking_date of this Instance.  # noqa: E501
        :type: datetime
        """

        self._locking_date = locking_date

    @property
    def template(self):
        """Gets the template of this Instance.  # noqa: E501

        Template from which the instance was created  # noqa: E501

        :return: The template of this Instance.  # noqa: E501
        :rtype: BaseResource
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this Instance.

        Template from which the instance was created  # noqa: E501

        :param template: The template of this Instance.  # noqa: E501
        :type: BaseResource
        """

        self._template = template

    @property
    def subregion(self):
        """Gets the subregion of this Instance.  # noqa: E501

        Subregion that is running the instance  # noqa: E501

        :return: The subregion of this Instance.  # noqa: E501
        :rtype: BaseResource
        """
        return self._subregion

    @subregion.setter
    def subregion(self, subregion):
        """Sets the subregion of this Instance.

        Subregion that is running the instance  # noqa: E501

        :param subregion: The subregion of this Instance.  # noqa: E501
        :type: BaseResource
        """

        self._subregion = subregion

    @property
    def type(self):
        """Gets the type of this Instance.  # noqa: E501

        Instance type. Defines the configuration of CPU and RAM  # noqa: E501

        :return: The type of this Instance.  # noqa: E501
        :rtype: DictionaryItem
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Instance.

        Instance type. Defines the configuration of CPU and RAM  # noqa: E501

        :param type: The type of this Instance.  # noqa: E501
        :type: DictionaryItem
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this Instance.  # noqa: E501

        Status  # noqa: E501

        :return: The status of this Instance.  # noqa: E501
        :rtype: DictionaryItem
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Instance.

        Status  # noqa: E501

        :param status: The status of this Instance.  # noqa: E501
        :type: DictionaryItem
        """

        self._status = status

    @property
    def system_category(self):
        """Gets the system_category of this Instance.  # noqa: E501

        Operating system category installed on the instance  # noqa: E501

        :return: The system_category of this Instance.  # noqa: E501
        :rtype: DictionaryItem
        """
        return self._system_category

    @system_category.setter
    def system_category(self, system_category):
        """Sets the system_category of this Instance.

        Operating system category installed on the instance  # noqa: E501

        :param system_category: The system_category of this Instance.  # noqa: E501
        :type: DictionaryItem
        """

        self._system_category = system_category

    @property
    def autoscaling_type(self):
        """Gets the autoscaling_type of this Instance.  # noqa: E501

        Autoscaling type  # noqa: E501

        :return: The autoscaling_type of this Instance.  # noqa: E501
        :rtype: DictionaryItem
        """
        return self._autoscaling_type

    @autoscaling_type.setter
    def autoscaling_type(self, autoscaling_type):
        """Sets the autoscaling_type of this Instance.

        Autoscaling type  # noqa: E501

        :param autoscaling_type: The autoscaling_type of this Instance.  # noqa: E501
        :type: DictionaryItem
        """

        self._autoscaling_type = autoscaling_type

    @property
    def vm_ware_tools_status(self):
        """Gets the vm_ware_tools_status of this Instance.  # noqa: E501

        VMware Tools status  # noqa: E501

        :return: The vm_ware_tools_status of this Instance.  # noqa: E501
        :rtype: DictionaryItem
        """
        return self._vm_ware_tools_status

    @vm_ware_tools_status.setter
    def vm_ware_tools_status(self, vm_ware_tools_status):
        """Sets the vm_ware_tools_status of this Instance.

        VMware Tools status  # noqa: E501

        :param vm_ware_tools_status: The vm_ware_tools_status of this Instance.  # noqa: E501
        :type: DictionaryItem
        """

        self._vm_ware_tools_status = vm_ware_tools_status

    @property
    def monit_status(self):
        """Gets the monit_status of this Instance.  # noqa: E501

        Monitoring status  # noqa: E501

        :return: The monit_status of this Instance.  # noqa: E501
        :rtype: DictionaryItem
        """
        return self._monit_status

    @monit_status.setter
    def monit_status(self, monit_status):
        """Sets the monit_status of this Instance.

        Monitoring status  # noqa: E501

        :param monit_status: The monit_status of this Instance.  # noqa: E501
        :type: DictionaryItem
        """

        self._monit_status = monit_status

    @property
    def template_type(self):
        """Gets the template_type of this Instance.  # noqa: E501

        Template type eg marketplace, oci instance  # noqa: E501

        :return: The template_type of this Instance.  # noqa: E501
        :rtype: DictionaryItem
        """
        return self._template_type

    @template_type.setter
    def template_type(self, template_type):
        """Sets the template_type of this Instance.

        Template type eg marketplace, oci instance  # noqa: E501

        :param template_type: The template_type of this Instance.  # noqa: E501
        :type: DictionaryItem
        """

        self._template_type = template_type

    @property
    def ip_address(self):
        """Gets the ip_address of this Instance.  # noqa: E501

        IP address  # noqa: E501

        :return: The ip_address of this Instance.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this Instance.

        IP address  # noqa: E501

        :param ip_address: The ip_address of this Instance.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def private_ip_address(self):
        """Gets the private_ip_address of this Instance.  # noqa: E501

        Private IP address  # noqa: E501

        :return: The private_ip_address of this Instance.  # noqa: E501
        :rtype: str
        """
        return self._private_ip_address

    @private_ip_address.setter
    def private_ip_address(self, private_ip_address):
        """Sets the private_ip_address of this Instance.

        Private IP address  # noqa: E501

        :param private_ip_address: The private_ip_address of this Instance.  # noqa: E501
        :type: str
        """

        self._private_ip_address = private_ip_address

    @property
    def dns_address(self):
        """Gets the dns_address of this Instance.  # noqa: E501

        DNS address  # noqa: E501

        :return: The dns_address of this Instance.  # noqa: E501
        :rtype: str
        """
        return self._dns_address

    @dns_address.setter
    def dns_address(self, dns_address):
        """Sets the dns_address of this Instance.

        DNS address  # noqa: E501

        :param dns_address: The dns_address of this Instance.  # noqa: E501
        :type: str
        """

        self._dns_address = dns_address

    @property
    def total_disks_capacity(self):
        """Gets the total_disks_capacity of this Instance.  # noqa: E501

        Total disks capacity in GB  # noqa: E501

        :return: The total_disks_capacity of this Instance.  # noqa: E501
        :rtype: int
        """
        return self._total_disks_capacity

    @total_disks_capacity.setter
    def total_disks_capacity(self, total_disks_capacity):
        """Sets the total_disks_capacity of this Instance.

        Total disks capacity in GB  # noqa: E501

        :param total_disks_capacity: The total_disks_capacity of this Instance.  # noqa: E501
        :type: int
        """

        self._total_disks_capacity = total_disks_capacity

    @property
    def payment_type(self):
        """Gets the payment_type of this Instance.  # noqa: E501

        Payment type  # noqa: E501

        :return: The payment_type of this Instance.  # noqa: E501
        :rtype: DictionaryItem
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this Instance.

        Payment type  # noqa: E501

        :param payment_type: The payment_type of this Instance.  # noqa: E501
        :type: DictionaryItem
        """

        self._payment_type = payment_type

    @property
    def health_check(self):
        """Gets the health_check of this Instance.  # noqa: E501

        Health check  # noqa: E501

        :return: The health_check of this Instance.  # noqa: E501
        :rtype: BaseResource
        """
        return self._health_check

    @health_check.setter
    def health_check(self, health_check):
        """Sets the health_check of this Instance.

        Health check  # noqa: E501

        :param health_check: The health_check of this Instance.  # noqa: E501
        :type: BaseResource
        """

        self._health_check = health_check

    @property
    def scsi_controller_type(self):
        """Gets the scsi_controller_type of this Instance.  # noqa: E501

        SCSI controller type  # noqa: E501

        :return: The scsi_controller_type of this Instance.  # noqa: E501
        :rtype: DictionaryItem
        """
        return self._scsi_controller_type

    @scsi_controller_type.setter
    def scsi_controller_type(self, scsi_controller_type):
        """Sets the scsi_controller_type of this Instance.

        SCSI controller type  # noqa: E501

        :param scsi_controller_type: The scsi_controller_type of this Instance.  # noqa: E501
        :type: DictionaryItem
        """

        self._scsi_controller_type = scsi_controller_type

    @property
    def is_freemium(self):
        """Gets the is_freemium of this Instance.  # noqa: E501

        Is freemium  # noqa: E501

        :return: The is_freemium of this Instance.  # noqa: E501
        :rtype: bool
        """
        return self._is_freemium

    @is_freemium.setter
    def is_freemium(self, is_freemium):
        """Sets the is_freemium of this Instance.

        Is freemium  # noqa: E501

        :param is_freemium: The is_freemium of this Instance.  # noqa: E501
        :type: bool
        """

        self._is_freemium = is_freemium

    @property
    def cpu_number(self):
        """Gets the cpu_number of this Instance.  # noqa: E501

        Number of CPUs  # noqa: E501

        :return: The cpu_number of this Instance.  # noqa: E501
        :rtype: int
        """
        return self._cpu_number

    @cpu_number.setter
    def cpu_number(self, cpu_number):
        """Sets the cpu_number of this Instance.

        Number of CPUs  # noqa: E501

        :param cpu_number: The cpu_number of this Instance.  # noqa: E501
        :type: int
        """

        self._cpu_number = cpu_number

    @property
    def ram_mb(self):
        """Gets the ram_mb of this Instance.  # noqa: E501

        Memory in MB  # noqa: E501

        :return: The ram_mb of this Instance.  # noqa: E501
        :rtype: int
        """
        return self._ram_mb

    @ram_mb.setter
    def ram_mb(self, ram_mb):
        """Sets the ram_mb of this Instance.

        Memory in MB  # noqa: E501

        :param ram_mb: The ram_mb of this Instance.  # noqa: E501
        :type: int
        """

        self._ram_mb = ram_mb

    @property
    def support_type(self):
        """Gets the support_type of this Instance.  # noqa: E501

        Support type  # noqa: E501

        :return: The support_type of this Instance.  # noqa: E501
        :rtype: Software
        """
        return self._support_type

    @support_type.setter
    def support_type(self, support_type):
        """Sets the support_type of this Instance.

        Support type  # noqa: E501

        :param support_type: The support_type of this Instance.  # noqa: E501
        :type: Software
        """

        self._support_type = support_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Instance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Instance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Instance):
            return True

        return self.to_dict() != other.to_dict()
