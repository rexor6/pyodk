# coding: utf-8

"""
    Oktawave API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pyodk.configuration import Configuration


class ImportDisk(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'capacity': 'int',
        'disk_name': 'str',
        'relative_path': 'str',
        'controller': 'int',
        'controller_slot': 'int'
    }

    attribute_map = {
        'id': 'Id',
        'capacity': 'Capacity',
        'disk_name': 'DiskName',
        'relative_path': 'RelativePath',
        'controller': 'Controller',
        'controller_slot': 'ControllerSlot'
    }

    def __init__(self, id=None, capacity=None, disk_name=None, relative_path=None, controller=None, controller_slot=None, _configuration=None):  # noqa: E501
        """ImportDisk - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._capacity = None
        self._disk_name = None
        self._relative_path = None
        self._controller = None
        self._controller_slot = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if capacity is not None:
            self.capacity = capacity
        if disk_name is not None:
            self.disk_name = disk_name
        if relative_path is not None:
            self.relative_path = relative_path
        if controller is not None:
            self.controller = controller
        if controller_slot is not None:
            self.controller_slot = controller_slot

    @property
    def id(self):
        """Gets the id of this ImportDisk.  # noqa: E501

        Id of disk  # noqa: E501

        :return: The id of this ImportDisk.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImportDisk.

        Id of disk  # noqa: E501

        :param id: The id of this ImportDisk.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def capacity(self):
        """Gets the capacity of this ImportDisk.  # noqa: E501

        Capacity in GB  # noqa: E501

        :return: The capacity of this ImportDisk.  # noqa: E501
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this ImportDisk.

        Capacity in GB  # noqa: E501

        :param capacity: The capacity of this ImportDisk.  # noqa: E501
        :type: int
        """

        self._capacity = capacity

    @property
    def disk_name(self):
        """Gets the disk_name of this ImportDisk.  # noqa: E501

        Disk name  # noqa: E501

        :return: The disk_name of this ImportDisk.  # noqa: E501
        :rtype: str
        """
        return self._disk_name

    @disk_name.setter
    def disk_name(self, disk_name):
        """Sets the disk_name of this ImportDisk.

        Disk name  # noqa: E501

        :param disk_name: The disk_name of this ImportDisk.  # noqa: E501
        :type: str
        """

        self._disk_name = disk_name

    @property
    def relative_path(self):
        """Gets the relative_path of this ImportDisk.  # noqa: E501

        Relative path  # noqa: E501

        :return: The relative_path of this ImportDisk.  # noqa: E501
        :rtype: str
        """
        return self._relative_path

    @relative_path.setter
    def relative_path(self, relative_path):
        """Sets the relative_path of this ImportDisk.

        Relative path  # noqa: E501

        :param relative_path: The relative_path of this ImportDisk.  # noqa: E501
        :type: str
        """

        self._relative_path = relative_path

    @property
    def controller(self):
        """Gets the controller of this ImportDisk.  # noqa: E501

        Controller index  # noqa: E501

        :return: The controller of this ImportDisk.  # noqa: E501
        :rtype: int
        """
        return self._controller

    @controller.setter
    def controller(self, controller):
        """Sets the controller of this ImportDisk.

        Controller index  # noqa: E501

        :param controller: The controller of this ImportDisk.  # noqa: E501
        :type: int
        """

        self._controller = controller

    @property
    def controller_slot(self):
        """Gets the controller_slot of this ImportDisk.  # noqa: E501

        Controller slot index  # noqa: E501

        :return: The controller_slot of this ImportDisk.  # noqa: E501
        :rtype: int
        """
        return self._controller_slot

    @controller_slot.setter
    def controller_slot(self, controller_slot):
        """Sets the controller_slot of this ImportDisk.

        Controller slot index  # noqa: E501

        :param controller_slot: The controller_slot of this ImportDisk.  # noqa: E501
        :type: int
        """

        self._controller_slot = controller_slot

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportDisk, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportDisk):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImportDisk):
            return True

        return self.to_dict() != other.to_dict()
