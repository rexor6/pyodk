# coding: utf-8

"""
    Oktawave API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pyodk.configuration import Configuration


class LoadBalancerService(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'instance': 'NamedResource',
        'instance_state': 'DictionaryItem',
        'ip_address': 'str',
        'port': 'int',
        'request_rate': 'int',
        'response_rate': 'int',
        'request_rate_bytes': 'int',
        'response_rate_bytes': 'int',
        'current_client_connections': 'int',
        'status': 'DictionaryItem'
    }

    attribute_map = {
        'instance': 'Instance',
        'instance_state': 'InstanceState',
        'ip_address': 'IpAddress',
        'port': 'Port',
        'request_rate': 'RequestRate',
        'response_rate': 'ResponseRate',
        'request_rate_bytes': 'RequestRateBytes',
        'response_rate_bytes': 'ResponseRateBytes',
        'current_client_connections': 'CurrentClientConnections',
        'status': 'Status'
    }

    def __init__(self, instance=None, instance_state=None, ip_address=None, port=None, request_rate=None, response_rate=None, request_rate_bytes=None, response_rate_bytes=None, current_client_connections=None, status=None, _configuration=None):  # noqa: E501
        """LoadBalancerService - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._instance = None
        self._instance_state = None
        self._ip_address = None
        self._port = None
        self._request_rate = None
        self._response_rate = None
        self._request_rate_bytes = None
        self._response_rate_bytes = None
        self._current_client_connections = None
        self._status = None
        self.discriminator = None

        if instance is not None:
            self.instance = instance
        if instance_state is not None:
            self.instance_state = instance_state
        if ip_address is not None:
            self.ip_address = ip_address
        if port is not None:
            self.port = port
        if request_rate is not None:
            self.request_rate = request_rate
        if response_rate is not None:
            self.response_rate = response_rate
        if request_rate_bytes is not None:
            self.request_rate_bytes = request_rate_bytes
        if response_rate_bytes is not None:
            self.response_rate_bytes = response_rate_bytes
        if current_client_connections is not None:
            self.current_client_connections = current_client_connections
        if status is not None:
            self.status = status

    @property
    def instance(self):
        """Gets the instance of this LoadBalancerService.  # noqa: E501

        Instance  # noqa: E501

        :return: The instance of this LoadBalancerService.  # noqa: E501
        :rtype: NamedResource
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this LoadBalancerService.

        Instance  # noqa: E501

        :param instance: The instance of this LoadBalancerService.  # noqa: E501
        :type: NamedResource
        """

        self._instance = instance

    @property
    def instance_state(self):
        """Gets the instance_state of this LoadBalancerService.  # noqa: E501

        Instance state  # noqa: E501

        :return: The instance_state of this LoadBalancerService.  # noqa: E501
        :rtype: DictionaryItem
        """
        return self._instance_state

    @instance_state.setter
    def instance_state(self, instance_state):
        """Sets the instance_state of this LoadBalancerService.

        Instance state  # noqa: E501

        :param instance_state: The instance_state of this LoadBalancerService.  # noqa: E501
        :type: DictionaryItem
        """

        self._instance_state = instance_state

    @property
    def ip_address(self):
        """Gets the ip_address of this LoadBalancerService.  # noqa: E501

        Ip address  # noqa: E501

        :return: The ip_address of this LoadBalancerService.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this LoadBalancerService.

        Ip address  # noqa: E501

        :param ip_address: The ip_address of this LoadBalancerService.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def port(self):
        """Gets the port of this LoadBalancerService.  # noqa: E501

        Port  # noqa: E501

        :return: The port of this LoadBalancerService.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this LoadBalancerService.

        Port  # noqa: E501

        :param port: The port of this LoadBalancerService.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def request_rate(self):
        """Gets the request_rate of this LoadBalancerService.  # noqa: E501

        Request rate  # noqa: E501

        :return: The request_rate of this LoadBalancerService.  # noqa: E501
        :rtype: int
        """
        return self._request_rate

    @request_rate.setter
    def request_rate(self, request_rate):
        """Sets the request_rate of this LoadBalancerService.

        Request rate  # noqa: E501

        :param request_rate: The request_rate of this LoadBalancerService.  # noqa: E501
        :type: int
        """

        self._request_rate = request_rate

    @property
    def response_rate(self):
        """Gets the response_rate of this LoadBalancerService.  # noqa: E501

        Response rate  # noqa: E501

        :return: The response_rate of this LoadBalancerService.  # noqa: E501
        :rtype: int
        """
        return self._response_rate

    @response_rate.setter
    def response_rate(self, response_rate):
        """Sets the response_rate of this LoadBalancerService.

        Response rate  # noqa: E501

        :param response_rate: The response_rate of this LoadBalancerService.  # noqa: E501
        :type: int
        """

        self._response_rate = response_rate

    @property
    def request_rate_bytes(self):
        """Gets the request_rate_bytes of this LoadBalancerService.  # noqa: E501

        Request rate in bytes  # noqa: E501

        :return: The request_rate_bytes of this LoadBalancerService.  # noqa: E501
        :rtype: int
        """
        return self._request_rate_bytes

    @request_rate_bytes.setter
    def request_rate_bytes(self, request_rate_bytes):
        """Sets the request_rate_bytes of this LoadBalancerService.

        Request rate in bytes  # noqa: E501

        :param request_rate_bytes: The request_rate_bytes of this LoadBalancerService.  # noqa: E501
        :type: int
        """

        self._request_rate_bytes = request_rate_bytes

    @property
    def response_rate_bytes(self):
        """Gets the response_rate_bytes of this LoadBalancerService.  # noqa: E501

        Response rate in bytes  # noqa: E501

        :return: The response_rate_bytes of this LoadBalancerService.  # noqa: E501
        :rtype: int
        """
        return self._response_rate_bytes

    @response_rate_bytes.setter
    def response_rate_bytes(self, response_rate_bytes):
        """Sets the response_rate_bytes of this LoadBalancerService.

        Response rate in bytes  # noqa: E501

        :param response_rate_bytes: The response_rate_bytes of this LoadBalancerService.  # noqa: E501
        :type: int
        """

        self._response_rate_bytes = response_rate_bytes

    @property
    def current_client_connections(self):
        """Gets the current_client_connections of this LoadBalancerService.  # noqa: E501

        Current client connections  # noqa: E501

        :return: The current_client_connections of this LoadBalancerService.  # noqa: E501
        :rtype: int
        """
        return self._current_client_connections

    @current_client_connections.setter
    def current_client_connections(self, current_client_connections):
        """Sets the current_client_connections of this LoadBalancerService.

        Current client connections  # noqa: E501

        :param current_client_connections: The current_client_connections of this LoadBalancerService.  # noqa: E501
        :type: int
        """

        self._current_client_connections = current_client_connections

    @property
    def status(self):
        """Gets the status of this LoadBalancerService.  # noqa: E501

        Status  # noqa: E501

        :return: The status of this LoadBalancerService.  # noqa: E501
        :rtype: DictionaryItem
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LoadBalancerService.

        Status  # noqa: E501

        :param status: The status of this LoadBalancerService.  # noqa: E501
        :type: DictionaryItem
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoadBalancerService, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoadBalancerService):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LoadBalancerService):
            return True

        return self.to_dict() != other.to_dict()
