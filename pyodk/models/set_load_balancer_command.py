# coding: utf-8

"""
    Oktawave API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pyodk.configuration import Configuration


class SetLoadBalancerCommand(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ssl_enabled': 'bool',
        'service_type': 'int',
        'port_number': 'int',
        'target_port_number': 'int',
        'ssl_target_port_number': 'int',
        'session_persistence_type': 'int',
        'load_balancer_algorithm': 'int',
        'ip_version': 'int',
        'health_check_enabled': 'bool',
        'common_persistence_for_http_and_https_enabled': 'bool',
        'load_balancer_ip_id': 'int'
    }

    attribute_map = {
        'ssl_enabled': 'SslEnabled',
        'service_type': 'ServiceType',
        'port_number': 'PortNumber',
        'target_port_number': 'TargetPortNumber',
        'ssl_target_port_number': 'SslTargetPortNumber',
        'session_persistence_type': 'SessionPersistenceType',
        'load_balancer_algorithm': 'LoadBalancerAlgorithm',
        'ip_version': 'IpVersion',
        'health_check_enabled': 'HealthCheckEnabled',
        'common_persistence_for_http_and_https_enabled': 'CommonPersistenceForHttpAndHttpsEnabled',
        'load_balancer_ip_id': 'LoadBalancerIpId'
    }

    def __init__(self, ssl_enabled=None, service_type=None, port_number=None, target_port_number=None, ssl_target_port_number=None, session_persistence_type=None, load_balancer_algorithm=None, ip_version=None, health_check_enabled=None, common_persistence_for_http_and_https_enabled=None, load_balancer_ip_id=None, _configuration=None):  # noqa: E501
        """SetLoadBalancerCommand - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._ssl_enabled = None
        self._service_type = None
        self._port_number = None
        self._target_port_number = None
        self._ssl_target_port_number = None
        self._session_persistence_type = None
        self._load_balancer_algorithm = None
        self._ip_version = None
        self._health_check_enabled = None
        self._common_persistence_for_http_and_https_enabled = None
        self._load_balancer_ip_id = None
        self.discriminator = None

        if ssl_enabled is not None:
            self.ssl_enabled = ssl_enabled
        self.service_type = service_type
        if port_number is not None:
            self.port_number = port_number
        if target_port_number is not None:
            self.target_port_number = target_port_number
        if ssl_target_port_number is not None:
            self.ssl_target_port_number = ssl_target_port_number
        self.session_persistence_type = session_persistence_type
        self.load_balancer_algorithm = load_balancer_algorithm
        self.ip_version = ip_version
        if health_check_enabled is not None:
            self.health_check_enabled = health_check_enabled
        if common_persistence_for_http_and_https_enabled is not None:
            self.common_persistence_for_http_and_https_enabled = common_persistence_for_http_and_https_enabled
        if load_balancer_ip_id is not None:
            self.load_balancer_ip_id = load_balancer_ip_id

    @property
    def ssl_enabled(self):
        """Gets the ssl_enabled of this SetLoadBalancerCommand.  # noqa: E501

        Is ssl enabled (only for \"HTTP\" load balancer service type)  # noqa: E501

        :return: The ssl_enabled of this SetLoadBalancerCommand.  # noqa: E501
        :rtype: bool
        """
        return self._ssl_enabled

    @ssl_enabled.setter
    def ssl_enabled(self, ssl_enabled):
        """Sets the ssl_enabled of this SetLoadBalancerCommand.

        Is ssl enabled (only for \"HTTP\" load balancer service type)  # noqa: E501

        :param ssl_enabled: The ssl_enabled of this SetLoadBalancerCommand.  # noqa: E501
        :type: bool
        """

        self._ssl_enabled = ssl_enabled

    @property
    def service_type(self):
        """Gets the service_type of this SetLoadBalancerCommand.  # noqa: E501

        Load balancer service type  # noqa: E501

        :return: The service_type of this SetLoadBalancerCommand.  # noqa: E501
        :rtype: int
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this SetLoadBalancerCommand.

        Load balancer service type  # noqa: E501

        :param service_type: The service_type of this SetLoadBalancerCommand.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and service_type is None:
            raise ValueError("Invalid value for `service_type`, must not be `None`")  # noqa: E501

        self._service_type = service_type

    @property
    def port_number(self):
        """Gets the port_number of this SetLoadBalancerCommand.  # noqa: E501

        Port number for \"Port\" load balancer service type  # noqa: E501

        :return: The port_number of this SetLoadBalancerCommand.  # noqa: E501
        :rtype: int
        """
        return self._port_number

    @port_number.setter
    def port_number(self, port_number):
        """Sets the port_number of this SetLoadBalancerCommand.

        Port number for \"Port\" load balancer service type  # noqa: E501

        :param port_number: The port_number of this SetLoadBalancerCommand.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                port_number is not None and port_number > 65535):  # noqa: E501
            raise ValueError("Invalid value for `port_number`, must be a value less than or equal to `65535`")  # noqa: E501
        if (self._configuration.client_side_validation and
                port_number is not None and port_number < 1):  # noqa: E501
            raise ValueError("Invalid value for `port_number`, must be a value greater than or equal to `1`")  # noqa: E501

        self._port_number = port_number

    @property
    def target_port_number(self):
        """Gets the target_port_number of this SetLoadBalancerCommand.  # noqa: E501

        Port number for \"TargetPort\" load balancer service type  # noqa: E501

        :return: The target_port_number of this SetLoadBalancerCommand.  # noqa: E501
        :rtype: int
        """
        return self._target_port_number

    @target_port_number.setter
    def target_port_number(self, target_port_number):
        """Sets the target_port_number of this SetLoadBalancerCommand.

        Port number for \"TargetPort\" load balancer service type  # noqa: E501

        :param target_port_number: The target_port_number of this SetLoadBalancerCommand.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                target_port_number is not None and target_port_number > 65535):  # noqa: E501
            raise ValueError("Invalid value for `target_port_number`, must be a value less than or equal to `65535`")  # noqa: E501
        if (self._configuration.client_side_validation and
                target_port_number is not None and target_port_number < 1):  # noqa: E501
            raise ValueError("Invalid value for `target_port_number`, must be a value greater than or equal to `1`")  # noqa: E501

        self._target_port_number = target_port_number

    @property
    def ssl_target_port_number(self):
        """Gets the ssl_target_port_number of this SetLoadBalancerCommand.  # noqa: E501

        Ssl port number for \"TargetPort\" load balancer service type  # noqa: E501

        :return: The ssl_target_port_number of this SetLoadBalancerCommand.  # noqa: E501
        :rtype: int
        """
        return self._ssl_target_port_number

    @ssl_target_port_number.setter
    def ssl_target_port_number(self, ssl_target_port_number):
        """Sets the ssl_target_port_number of this SetLoadBalancerCommand.

        Ssl port number for \"TargetPort\" load balancer service type  # noqa: E501

        :param ssl_target_port_number: The ssl_target_port_number of this SetLoadBalancerCommand.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                ssl_target_port_number is not None and ssl_target_port_number > 65535):  # noqa: E501
            raise ValueError("Invalid value for `ssl_target_port_number`, must be a value less than or equal to `65535`")  # noqa: E501
        if (self._configuration.client_side_validation and
                ssl_target_port_number is not None and ssl_target_port_number < 1):  # noqa: E501
            raise ValueError("Invalid value for `ssl_target_port_number`, must be a value greater than or equal to `1`")  # noqa: E501

        self._ssl_target_port_number = ssl_target_port_number

    @property
    def session_persistence_type(self):
        """Gets the session_persistence_type of this SetLoadBalancerCommand.  # noqa: E501

        Session persistence type  # noqa: E501

        :return: The session_persistence_type of this SetLoadBalancerCommand.  # noqa: E501
        :rtype: int
        """
        return self._session_persistence_type

    @session_persistence_type.setter
    def session_persistence_type(self, session_persistence_type):
        """Sets the session_persistence_type of this SetLoadBalancerCommand.

        Session persistence type  # noqa: E501

        :param session_persistence_type: The session_persistence_type of this SetLoadBalancerCommand.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and session_persistence_type is None:
            raise ValueError("Invalid value for `session_persistence_type`, must not be `None`")  # noqa: E501

        self._session_persistence_type = session_persistence_type

    @property
    def load_balancer_algorithm(self):
        """Gets the load_balancer_algorithm of this SetLoadBalancerCommand.  # noqa: E501

        Load balancing algorithm  # noqa: E501

        :return: The load_balancer_algorithm of this SetLoadBalancerCommand.  # noqa: E501
        :rtype: int
        """
        return self._load_balancer_algorithm

    @load_balancer_algorithm.setter
    def load_balancer_algorithm(self, load_balancer_algorithm):
        """Sets the load_balancer_algorithm of this SetLoadBalancerCommand.

        Load balancing algorithm  # noqa: E501

        :param load_balancer_algorithm: The load_balancer_algorithm of this SetLoadBalancerCommand.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and load_balancer_algorithm is None:
            raise ValueError("Invalid value for `load_balancer_algorithm`, must not be `None`")  # noqa: E501

        self._load_balancer_algorithm = load_balancer_algorithm

    @property
    def ip_version(self):
        """Gets the ip_version of this SetLoadBalancerCommand.  # noqa: E501

        Ip version for load balancing  # noqa: E501

        :return: The ip_version of this SetLoadBalancerCommand.  # noqa: E501
        :rtype: int
        """
        return self._ip_version

    @ip_version.setter
    def ip_version(self, ip_version):
        """Sets the ip_version of this SetLoadBalancerCommand.

        Ip version for load balancing  # noqa: E501

        :param ip_version: The ip_version of this SetLoadBalancerCommand.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and ip_version is None:
            raise ValueError("Invalid value for `ip_version`, must not be `None`")  # noqa: E501

        self._ip_version = ip_version

    @property
    def health_check_enabled(self):
        """Gets the health_check_enabled of this SetLoadBalancerCommand.  # noqa: E501

        Is health check enabled  # noqa: E501

        :return: The health_check_enabled of this SetLoadBalancerCommand.  # noqa: E501
        :rtype: bool
        """
        return self._health_check_enabled

    @health_check_enabled.setter
    def health_check_enabled(self, health_check_enabled):
        """Sets the health_check_enabled of this SetLoadBalancerCommand.

        Is health check enabled  # noqa: E501

        :param health_check_enabled: The health_check_enabled of this SetLoadBalancerCommand.  # noqa: E501
        :type: bool
        """

        self._health_check_enabled = health_check_enabled

    @property
    def common_persistence_for_http_and_https_enabled(self):
        """Gets the common_persistence_for_http_and_https_enabled of this SetLoadBalancerCommand.  # noqa: E501

        Is common persistence for HTTP and HTTPS enabled (only for \"HTTP\" load balancer service type)  # noqa: E501

        :return: The common_persistence_for_http_and_https_enabled of this SetLoadBalancerCommand.  # noqa: E501
        :rtype: bool
        """
        return self._common_persistence_for_http_and_https_enabled

    @common_persistence_for_http_and_https_enabled.setter
    def common_persistence_for_http_and_https_enabled(self, common_persistence_for_http_and_https_enabled):
        """Sets the common_persistence_for_http_and_https_enabled of this SetLoadBalancerCommand.

        Is common persistence for HTTP and HTTPS enabled (only for \"HTTP\" load balancer service type)  # noqa: E501

        :param common_persistence_for_http_and_https_enabled: The common_persistence_for_http_and_https_enabled of this SetLoadBalancerCommand.  # noqa: E501
        :type: bool
        """

        self._common_persistence_for_http_and_https_enabled = common_persistence_for_http_and_https_enabled

    @property
    def load_balancer_ip_id(self):
        """Gets the load_balancer_ip_id of this SetLoadBalancerCommand.  # noqa: E501

        Public ip id for load balancer  # noqa: E501

        :return: The load_balancer_ip_id of this SetLoadBalancerCommand.  # noqa: E501
        :rtype: int
        """
        return self._load_balancer_ip_id

    @load_balancer_ip_id.setter
    def load_balancer_ip_id(self, load_balancer_ip_id):
        """Sets the load_balancer_ip_id of this SetLoadBalancerCommand.

        Public ip id for load balancer  # noqa: E501

        :param load_balancer_ip_id: The load_balancer_ip_id of this SetLoadBalancerCommand.  # noqa: E501
        :type: int
        """

        self._load_balancer_ip_id = load_balancer_ip_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SetLoadBalancerCommand, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SetLoadBalancerCommand):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SetLoadBalancerCommand):
            return True

        return self.to_dict() != other.to_dict()
