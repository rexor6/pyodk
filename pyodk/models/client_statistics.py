# coding: utf-8

"""
    Oktawave API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pyodk.configuration import Configuration


class ClientStatistics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'statistic_type': 'BaseResource',
        'sample_time': 'datetime',
        'value': 'int'
    }

    attribute_map = {
        'statistic_type': 'StatisticType',
        'sample_time': 'SampleTime',
        'value': 'Value'
    }

    def __init__(self, statistic_type=None, sample_time=None, value=None, _configuration=None):  # noqa: E501
        """ClientStatistics - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._statistic_type = None
        self._sample_time = None
        self._value = None
        self.discriminator = None

        if statistic_type is not None:
            self.statistic_type = statistic_type
        if sample_time is not None:
            self.sample_time = sample_time
        if value is not None:
            self.value = value

    @property
    def statistic_type(self):
        """Gets the statistic_type of this ClientStatistics.  # noqa: E501

        Statistic type  # noqa: E501

        :return: The statistic_type of this ClientStatistics.  # noqa: E501
        :rtype: BaseResource
        """
        return self._statistic_type

    @statistic_type.setter
    def statistic_type(self, statistic_type):
        """Sets the statistic_type of this ClientStatistics.

        Statistic type  # noqa: E501

        :param statistic_type: The statistic_type of this ClientStatistics.  # noqa: E501
        :type: BaseResource
        """

        self._statistic_type = statistic_type

    @property
    def sample_time(self):
        """Gets the sample_time of this ClientStatistics.  # noqa: E501

        Sample time  # noqa: E501

        :return: The sample_time of this ClientStatistics.  # noqa: E501
        :rtype: datetime
        """
        return self._sample_time

    @sample_time.setter
    def sample_time(self, sample_time):
        """Sets the sample_time of this ClientStatistics.

        Sample time  # noqa: E501

        :param sample_time: The sample_time of this ClientStatistics.  # noqa: E501
        :type: datetime
        """

        self._sample_time = sample_time

    @property
    def value(self):
        """Gets the value of this ClientStatistics.  # noqa: E501

        Value  # noqa: E501

        :return: The value of this ClientStatistics.  # noqa: E501
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ClientStatistics.

        Value  # noqa: E501

        :param value: The value of this ClientStatistics.  # noqa: E501
        :type: int
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientStatistics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientStatistics):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClientStatistics):
            return True

        return self.to_dict() != other.to_dict()
