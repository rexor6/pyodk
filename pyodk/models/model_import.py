# coding: utf-8

"""
    Oktawave API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pyodk.configuration import Configuration


class ModelImport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'creation_date': 'datetime',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'size': 'int',
        'network_interfaces_count': 'int',
        'disks_count': 'int',
        'status': 'DictionaryItem',
        'creation_user': 'UserResource'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'creation_date': 'CreationDate',
        'start_date': 'StartDate',
        'end_date': 'EndDate',
        'size': 'Size',
        'network_interfaces_count': 'NetworkInterfacesCount',
        'disks_count': 'DisksCount',
        'status': 'Status',
        'creation_user': 'CreationUser'
    }

    def __init__(self, id=None, name=None, creation_date=None, start_date=None, end_date=None, size=None, network_interfaces_count=None, disks_count=None, status=None, creation_user=None, _configuration=None):  # noqa: E501
        """ModelImport - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._creation_date = None
        self._start_date = None
        self._end_date = None
        self._size = None
        self._network_interfaces_count = None
        self._disks_count = None
        self._status = None
        self._creation_user = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if creation_date is not None:
            self.creation_date = creation_date
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if size is not None:
            self.size = size
        if network_interfaces_count is not None:
            self.network_interfaces_count = network_interfaces_count
        if disks_count is not None:
            self.disks_count = disks_count
        if status is not None:
            self.status = status
        if creation_user is not None:
            self.creation_user = creation_user

    @property
    def id(self):
        """Gets the id of this ModelImport.  # noqa: E501

        Id  # noqa: E501

        :return: The id of this ModelImport.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelImport.

        Id  # noqa: E501

        :param id: The id of this ModelImport.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ModelImport.  # noqa: E501

        Name  # noqa: E501

        :return: The name of this ModelImport.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelImport.

        Name  # noqa: E501

        :param name: The name of this ModelImport.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def creation_date(self):
        """Gets the creation_date of this ModelImport.  # noqa: E501

        Creation date  # noqa: E501

        :return: The creation_date of this ModelImport.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this ModelImport.

        Creation date  # noqa: E501

        :param creation_date: The creation_date of this ModelImport.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def start_date(self):
        """Gets the start_date of this ModelImport.  # noqa: E501

        Start date  # noqa: E501

        :return: The start_date of this ModelImport.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ModelImport.

        Start date  # noqa: E501

        :param start_date: The start_date of this ModelImport.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this ModelImport.  # noqa: E501

        End date  # noqa: E501

        :return: The end_date of this ModelImport.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ModelImport.

        End date  # noqa: E501

        :param end_date: The end_date of this ModelImport.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def size(self):
        """Gets the size of this ModelImport.  # noqa: E501

        Total size in GB  # noqa: E501

        :return: The size of this ModelImport.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ModelImport.

        Total size in GB  # noqa: E501

        :param size: The size of this ModelImport.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def network_interfaces_count(self):
        """Gets the network_interfaces_count of this ModelImport.  # noqa: E501

        Network interfaces count  # noqa: E501

        :return: The network_interfaces_count of this ModelImport.  # noqa: E501
        :rtype: int
        """
        return self._network_interfaces_count

    @network_interfaces_count.setter
    def network_interfaces_count(self, network_interfaces_count):
        """Sets the network_interfaces_count of this ModelImport.

        Network interfaces count  # noqa: E501

        :param network_interfaces_count: The network_interfaces_count of this ModelImport.  # noqa: E501
        :type: int
        """

        self._network_interfaces_count = network_interfaces_count

    @property
    def disks_count(self):
        """Gets the disks_count of this ModelImport.  # noqa: E501

        Disks count  # noqa: E501

        :return: The disks_count of this ModelImport.  # noqa: E501
        :rtype: int
        """
        return self._disks_count

    @disks_count.setter
    def disks_count(self, disks_count):
        """Sets the disks_count of this ModelImport.

        Disks count  # noqa: E501

        :param disks_count: The disks_count of this ModelImport.  # noqa: E501
        :type: int
        """

        self._disks_count = disks_count

    @property
    def status(self):
        """Gets the status of this ModelImport.  # noqa: E501

        Status  # noqa: E501

        :return: The status of this ModelImport.  # noqa: E501
        :rtype: DictionaryItem
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ModelImport.

        Status  # noqa: E501

        :param status: The status of this ModelImport.  # noqa: E501
        :type: DictionaryItem
        """

        self._status = status

    @property
    def creation_user(self):
        """Gets the creation_user of this ModelImport.  # noqa: E501

        User who created the import  # noqa: E501

        :return: The creation_user of this ModelImport.  # noqa: E501
        :rtype: UserResource
        """
        return self._creation_user

    @creation_user.setter
    def creation_user(self, creation_user):
        """Sets the creation_user of this ModelImport.

        User who created the import  # noqa: E501

        :param creation_user: The creation_user of this ModelImport.  # noqa: E501
        :type: UserResource
        """

        self._creation_user = creation_user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelImport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelImport):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelImport):
            return True

        return self.to_dict() != other.to_dict()
