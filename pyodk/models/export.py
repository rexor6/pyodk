# coding: utf-8

"""
    Oktawave API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pyodk.configuration import Configuration


class Export(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'creation_date': 'datetime',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'status': 'DictionaryItem',
        'ocs_location': 'str',
        'ocs_project_id': 'str',
        'total_space_capacity': 'int',
        'instance': 'NamedResource',
        'creation_user': 'UserResource',
        'origin': 'DictionaryItem',
        'scheduler': 'BaseResource'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'creation_date': 'CreationDate',
        'start_date': 'StartDate',
        'end_date': 'EndDate',
        'status': 'Status',
        'ocs_location': 'OcsLocation',
        'ocs_project_id': 'OcsProjectId',
        'total_space_capacity': 'TotalSpaceCapacity',
        'instance': 'Instance',
        'creation_user': 'CreationUser',
        'origin': 'Origin',
        'scheduler': 'Scheduler'
    }

    def __init__(self, id=None, name=None, creation_date=None, start_date=None, end_date=None, status=None, ocs_location=None, ocs_project_id=None, total_space_capacity=None, instance=None, creation_user=None, origin=None, scheduler=None, _configuration=None):  # noqa: E501
        """Export - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._creation_date = None
        self._start_date = None
        self._end_date = None
        self._status = None
        self._ocs_location = None
        self._ocs_project_id = None
        self._total_space_capacity = None
        self._instance = None
        self._creation_user = None
        self._origin = None
        self._scheduler = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if creation_date is not None:
            self.creation_date = creation_date
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if status is not None:
            self.status = status
        if ocs_location is not None:
            self.ocs_location = ocs_location
        if ocs_project_id is not None:
            self.ocs_project_id = ocs_project_id
        if total_space_capacity is not None:
            self.total_space_capacity = total_space_capacity
        if instance is not None:
            self.instance = instance
        if creation_user is not None:
            self.creation_user = creation_user
        if origin is not None:
            self.origin = origin
        if scheduler is not None:
            self.scheduler = scheduler

    @property
    def id(self):
        """Gets the id of this Export.  # noqa: E501

        Id  # noqa: E501

        :return: The id of this Export.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Export.

        Id  # noqa: E501

        :param id: The id of this Export.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Export.  # noqa: E501

        Name  # noqa: E501

        :return: The name of this Export.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Export.

        Name  # noqa: E501

        :param name: The name of this Export.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def creation_date(self):
        """Gets the creation_date of this Export.  # noqa: E501

        Creation date  # noqa: E501

        :return: The creation_date of this Export.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Export.

        Creation date  # noqa: E501

        :param creation_date: The creation_date of this Export.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def start_date(self):
        """Gets the start_date of this Export.  # noqa: E501

        Start date  # noqa: E501

        :return: The start_date of this Export.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Export.

        Start date  # noqa: E501

        :param start_date: The start_date of this Export.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this Export.  # noqa: E501

        End date  # noqa: E501

        :return: The end_date of this Export.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Export.

        End date  # noqa: E501

        :param end_date: The end_date of this Export.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def status(self):
        """Gets the status of this Export.  # noqa: E501

        Status  # noqa: E501

        :return: The status of this Export.  # noqa: E501
        :rtype: DictionaryItem
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Export.

        Status  # noqa: E501

        :param status: The status of this Export.  # noqa: E501
        :type: DictionaryItem
        """

        self._status = status

    @property
    def ocs_location(self):
        """Gets the ocs_location of this Export.  # noqa: E501

        Location in OCS  # noqa: E501

        :return: The ocs_location of this Export.  # noqa: E501
        :rtype: str
        """
        return self._ocs_location

    @ocs_location.setter
    def ocs_location(self, ocs_location):
        """Sets the ocs_location of this Export.

        Location in OCS  # noqa: E501

        :param ocs_location: The ocs_location of this Export.  # noqa: E501
        :type: str
        """

        self._ocs_location = ocs_location

    @property
    def ocs_project_id(self):
        """Gets the ocs_project_id of this Export.  # noqa: E501

        OCS Project Id  # noqa: E501

        :return: The ocs_project_id of this Export.  # noqa: E501
        :rtype: str
        """
        return self._ocs_project_id

    @ocs_project_id.setter
    def ocs_project_id(self, ocs_project_id):
        """Sets the ocs_project_id of this Export.

        OCS Project Id  # noqa: E501

        :param ocs_project_id: The ocs_project_id of this Export.  # noqa: E501
        :type: str
        """

        self._ocs_project_id = ocs_project_id

    @property
    def total_space_capacity(self):
        """Gets the total_space_capacity of this Export.  # noqa: E501

        Total space capacity in GB  # noqa: E501

        :return: The total_space_capacity of this Export.  # noqa: E501
        :rtype: int
        """
        return self._total_space_capacity

    @total_space_capacity.setter
    def total_space_capacity(self, total_space_capacity):
        """Sets the total_space_capacity of this Export.

        Total space capacity in GB  # noqa: E501

        :param total_space_capacity: The total_space_capacity of this Export.  # noqa: E501
        :type: int
        """

        self._total_space_capacity = total_space_capacity

    @property
    def instance(self):
        """Gets the instance of this Export.  # noqa: E501

        Instance  # noqa: E501

        :return: The instance of this Export.  # noqa: E501
        :rtype: NamedResource
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this Export.

        Instance  # noqa: E501

        :param instance: The instance of this Export.  # noqa: E501
        :type: NamedResource
        """

        self._instance = instance

    @property
    def creation_user(self):
        """Gets the creation_user of this Export.  # noqa: E501

        Creation user  # noqa: E501

        :return: The creation_user of this Export.  # noqa: E501
        :rtype: UserResource
        """
        return self._creation_user

    @creation_user.setter
    def creation_user(self, creation_user):
        """Sets the creation_user of this Export.

        Creation user  # noqa: E501

        :param creation_user: The creation_user of this Export.  # noqa: E501
        :type: UserResource
        """

        self._creation_user = creation_user

    @property
    def origin(self):
        """Gets the origin of this Export.  # noqa: E501

        Origin  # noqa: E501

        :return: The origin of this Export.  # noqa: E501
        :rtype: DictionaryItem
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this Export.

        Origin  # noqa: E501

        :param origin: The origin of this Export.  # noqa: E501
        :type: DictionaryItem
        """

        self._origin = origin

    @property
    def scheduler(self):
        """Gets the scheduler of this Export.  # noqa: E501

        Scheduler that launches export  # noqa: E501

        :return: The scheduler of this Export.  # noqa: E501
        :rtype: BaseResource
        """
        return self._scheduler

    @scheduler.setter
    def scheduler(self, scheduler):
        """Sets the scheduler of this Export.

        Scheduler that launches export  # noqa: E501

        :param scheduler: The scheduler of this Export.  # noqa: E501
        :type: BaseResource
        """

        self._scheduler = scheduler

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Export, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Export):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Export):
            return True

        return self.to_dict() != other.to_dict()
