# coding: utf-8

"""
    Oktawave API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pyodk.configuration import Configuration


class Account(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'addresses': 'list[Address]',
        'payment': 'PaymentDetails',
        'company': 'CompanyDetails',
        'freemium_enabled': 'bool'
    }

    attribute_map = {
        'id': 'Id',
        'addresses': 'Addresses',
        'payment': 'Payment',
        'company': 'Company',
        'freemium_enabled': 'FreemiumEnabled'
    }

    def __init__(self, id=None, addresses=None, payment=None, company=None, freemium_enabled=None, _configuration=None):  # noqa: E501
        """Account - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._addresses = None
        self._payment = None
        self._company = None
        self._freemium_enabled = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if addresses is not None:
            self.addresses = addresses
        if payment is not None:
            self.payment = payment
        if company is not None:
            self.company = company
        if freemium_enabled is not None:
            self.freemium_enabled = freemium_enabled

    @property
    def id(self):
        """Gets the id of this Account.  # noqa: E501

        Id of account (client)  # noqa: E501

        :return: The id of this Account.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Account.

        Id of account (client)  # noqa: E501

        :param id: The id of this Account.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def addresses(self):
        """Gets the addresses of this Account.  # noqa: E501

        Account addressess  # noqa: E501

        :return: The addresses of this Account.  # noqa: E501
        :rtype: list[Address]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this Account.

        Account addressess  # noqa: E501

        :param addresses: The addresses of this Account.  # noqa: E501
        :type: list[Address]
        """

        self._addresses = addresses

    @property
    def payment(self):
        """Gets the payment of this Account.  # noqa: E501

        Payment information  # noqa: E501

        :return: The payment of this Account.  # noqa: E501
        :rtype: PaymentDetails
        """
        return self._payment

    @payment.setter
    def payment(self, payment):
        """Sets the payment of this Account.

        Payment information  # noqa: E501

        :param payment: The payment of this Account.  # noqa: E501
        :type: PaymentDetails
        """

        self._payment = payment

    @property
    def company(self):
        """Gets the company of this Account.  # noqa: E501

        Company information for company account  # noqa: E501

        :return: The company of this Account.  # noqa: E501
        :rtype: CompanyDetails
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this Account.

        Company information for company account  # noqa: E501

        :param company: The company of this Account.  # noqa: E501
        :type: CompanyDetails
        """

        self._company = company

    @property
    def freemium_enabled(self):
        """Gets the freemium_enabled of this Account.  # noqa: E501

        Is Freemium enabled for account  # noqa: E501

        :return: The freemium_enabled of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._freemium_enabled

    @freemium_enabled.setter
    def freemium_enabled(self, freemium_enabled):
        """Sets the freemium_enabled of this Account.

        Is Freemium enabled for account  # noqa: E501

        :param freemium_enabled: The freemium_enabled of this Account.  # noqa: E501
        :type: bool
        """

        self._freemium_enabled = freemium_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Account, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Account):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Account):
            return True

        return self.to_dict() != other.to_dict()
