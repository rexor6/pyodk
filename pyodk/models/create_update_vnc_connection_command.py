# coding: utf-8

"""
    Oktawave API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pyodk.configuration import Configuration


class CreateUpdateVncConnectionCommand(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_ip': 'str',
        'timeout_in_minutes': 'int'
    }

    attribute_map = {
        'source_ip': 'SourceIp',
        'timeout_in_minutes': 'TimeoutInMinutes'
    }

    def __init__(self, source_ip=None, timeout_in_minutes=None, _configuration=None):  # noqa: E501
        """CreateUpdateVncConnectionCommand - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._source_ip = None
        self._timeout_in_minutes = None
        self.discriminator = None

        if source_ip is not None:
            self.source_ip = source_ip
        self.timeout_in_minutes = timeout_in_minutes

    @property
    def source_ip(self):
        """Gets the source_ip of this CreateUpdateVncConnectionCommand.  # noqa: E501

        Source ip - only connections from this source ip will be accepted  # noqa: E501

        :return: The source_ip of this CreateUpdateVncConnectionCommand.  # noqa: E501
        :rtype: str
        """
        return self._source_ip

    @source_ip.setter
    def source_ip(self, source_ip):
        """Sets the source_ip of this CreateUpdateVncConnectionCommand.

        Source ip - only connections from this source ip will be accepted  # noqa: E501

        :param source_ip: The source_ip of this CreateUpdateVncConnectionCommand.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                source_ip is not None and not re.search(r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$', source_ip)):  # noqa: E501
            raise ValueError(r"Invalid value for `source_ip`, must be a follow pattern or equal to `/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/`")  # noqa: E501

        self._source_ip = source_ip

    @property
    def timeout_in_minutes(self):
        """Gets the timeout_in_minutes of this CreateUpdateVncConnectionCommand.  # noqa: E501

        Connection will be closed after that period  # noqa: E501

        :return: The timeout_in_minutes of this CreateUpdateVncConnectionCommand.  # noqa: E501
        :rtype: int
        """
        return self._timeout_in_minutes

    @timeout_in_minutes.setter
    def timeout_in_minutes(self, timeout_in_minutes):
        """Sets the timeout_in_minutes of this CreateUpdateVncConnectionCommand.

        Connection will be closed after that period  # noqa: E501

        :param timeout_in_minutes: The timeout_in_minutes of this CreateUpdateVncConnectionCommand.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and timeout_in_minutes is None:
            raise ValueError("Invalid value for `timeout_in_minutes`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                timeout_in_minutes is not None and timeout_in_minutes > 360):  # noqa: E501
            raise ValueError("Invalid value for `timeout_in_minutes`, must be a value less than or equal to `360`")  # noqa: E501
        if (self._configuration.client_side_validation and
                timeout_in_minutes is not None and timeout_in_minutes < 30):  # noqa: E501
            raise ValueError("Invalid value for `timeout_in_minutes`, must be a value greater than or equal to `30`")  # noqa: E501

        self._timeout_in_minutes = timeout_in_minutes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateUpdateVncConnectionCommand, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateUpdateVncConnectionCommand):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateUpdateVncConnectionCommand):
            return True

        return self.to_dict() != other.to_dict()
