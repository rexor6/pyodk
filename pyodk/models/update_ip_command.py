# coding: utf-8

"""
    Oktawave API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pyodk.configuration import Configuration


class UpdateIpCommand(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'set_static': 'bool',
        'comment': 'str',
        'restore_rev_dns': 'bool',
        'restore_rev_dns_v6': 'bool',
        'rev_dns': 'str',
        'rev_dns_v6': 'str'
    }

    attribute_map = {
        'set_static': 'SetStatic',
        'comment': 'Comment',
        'restore_rev_dns': 'RestoreRevDns',
        'restore_rev_dns_v6': 'RestoreRevDnsV6',
        'rev_dns': 'RevDns',
        'rev_dns_v6': 'RevDnsV6'
    }

    def __init__(self, set_static=None, comment=None, restore_rev_dns=None, restore_rev_dns_v6=None, rev_dns=None, rev_dns_v6=None, _configuration=None):  # noqa: E501
        """UpdateIpCommand - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._set_static = None
        self._comment = None
        self._restore_rev_dns = None
        self._restore_rev_dns_v6 = None
        self._rev_dns = None
        self._rev_dns_v6 = None
        self.discriminator = None

        if set_static is not None:
            self.set_static = set_static
        if comment is not None:
            self.comment = comment
        if restore_rev_dns is not None:
            self.restore_rev_dns = restore_rev_dns
        if restore_rev_dns_v6 is not None:
            self.restore_rev_dns_v6 = restore_rev_dns_v6
        if rev_dns is not None:
            self.rev_dns = rev_dns
        if rev_dns_v6 is not None:
            self.rev_dns_v6 = rev_dns_v6

    @property
    def set_static(self):
        """Gets the set_static of this UpdateIpCommand.  # noqa: E501

        IP should be static  # noqa: E501

        :return: The set_static of this UpdateIpCommand.  # noqa: E501
        :rtype: bool
        """
        return self._set_static

    @set_static.setter
    def set_static(self, set_static):
        """Sets the set_static of this UpdateIpCommand.

        IP should be static  # noqa: E501

        :param set_static: The set_static of this UpdateIpCommand.  # noqa: E501
        :type: bool
        """

        self._set_static = set_static

    @property
    def comment(self):
        """Gets the comment of this UpdateIpCommand.  # noqa: E501

        IP comment  # noqa: E501

        :return: The comment of this UpdateIpCommand.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this UpdateIpCommand.

        IP comment  # noqa: E501

        :param comment: The comment of this UpdateIpCommand.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                comment is not None and len(comment) > 50):
            raise ValueError("Invalid value for `comment`, length must be less than or equal to `50`")  # noqa: E501
        if (self._configuration.client_side_validation and
                comment is not None and len(comment) < 0):
            raise ValueError("Invalid value for `comment`, length must be greater than or equal to `0`")  # noqa: E501

        self._comment = comment

    @property
    def restore_rev_dns(self):
        """Gets the restore_rev_dns of this UpdateIpCommand.  # noqa: E501

        Restore default value for revDNS IPv4  # noqa: E501

        :return: The restore_rev_dns of this UpdateIpCommand.  # noqa: E501
        :rtype: bool
        """
        return self._restore_rev_dns

    @restore_rev_dns.setter
    def restore_rev_dns(self, restore_rev_dns):
        """Sets the restore_rev_dns of this UpdateIpCommand.

        Restore default value for revDNS IPv4  # noqa: E501

        :param restore_rev_dns: The restore_rev_dns of this UpdateIpCommand.  # noqa: E501
        :type: bool
        """

        self._restore_rev_dns = restore_rev_dns

    @property
    def restore_rev_dns_v6(self):
        """Gets the restore_rev_dns_v6 of this UpdateIpCommand.  # noqa: E501

        Restore default value for revDNS IPv6  # noqa: E501

        :return: The restore_rev_dns_v6 of this UpdateIpCommand.  # noqa: E501
        :rtype: bool
        """
        return self._restore_rev_dns_v6

    @restore_rev_dns_v6.setter
    def restore_rev_dns_v6(self, restore_rev_dns_v6):
        """Sets the restore_rev_dns_v6 of this UpdateIpCommand.

        Restore default value for revDNS IPv6  # noqa: E501

        :param restore_rev_dns_v6: The restore_rev_dns_v6 of this UpdateIpCommand.  # noqa: E501
        :type: bool
        """

        self._restore_rev_dns_v6 = restore_rev_dns_v6

    @property
    def rev_dns(self):
        """Gets the rev_dns of this UpdateIpCommand.  # noqa: E501

        revDNS for IPv4  # noqa: E501

        :return: The rev_dns of this UpdateIpCommand.  # noqa: E501
        :rtype: str
        """
        return self._rev_dns

    @rev_dns.setter
    def rev_dns(self, rev_dns):
        """Sets the rev_dns of this UpdateIpCommand.

        revDNS for IPv4  # noqa: E501

        :param rev_dns: The rev_dns of this UpdateIpCommand.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                rev_dns is not None and not re.search(r'^[A-Za-z0-9_ \\-.]{3,255}$', rev_dns)):  # noqa: E501
            raise ValueError(r"Invalid value for `rev_dns`, must be a follow pattern or equal to `/^[A-Za-z0-9_ \\-.]{3,255}$/`")  # noqa: E501

        self._rev_dns = rev_dns

    @property
    def rev_dns_v6(self):
        """Gets the rev_dns_v6 of this UpdateIpCommand.  # noqa: E501

        revDNS for IPv6  # noqa: E501

        :return: The rev_dns_v6 of this UpdateIpCommand.  # noqa: E501
        :rtype: str
        """
        return self._rev_dns_v6

    @rev_dns_v6.setter
    def rev_dns_v6(self, rev_dns_v6):
        """Sets the rev_dns_v6 of this UpdateIpCommand.

        revDNS for IPv6  # noqa: E501

        :param rev_dns_v6: The rev_dns_v6 of this UpdateIpCommand.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                rev_dns_v6 is not None and not re.search(r'^[A-Za-z0-9_ \\-.]{3,255}$', rev_dns_v6)):  # noqa: E501
            raise ValueError(r"Invalid value for `rev_dns_v6`, must be a follow pattern or equal to `/^[A-Za-z0-9_ \\-.]{3,255}$/`")  # noqa: E501

        self._rev_dns_v6 = rev_dns_v6

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateIpCommand, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateIpCommand):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateIpCommand):
            return True

        return self.to_dict() != other.to_dict()
