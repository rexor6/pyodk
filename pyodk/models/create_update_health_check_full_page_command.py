# coding: utf-8

"""
    Oktawave API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pyodk.configuration import Configuration


class CreateUpdateHealthCheckFullPageCommand(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'http_method_id': 'int',
        'content_regular_expression': 'str',
        'content_negative_regular_expression': 'str',
        'port': 'int',
        'page_timeout': 'int',
        'element_timeout': 'int',
        'elements_total_timeout': 'int',
        'fetch_page_elements': 'bool',
        'max_redirects': 'int',
        'max_parallel_requests': 'int',
        'generate_har': 'bool',
        'allowed_element_error_count': 'int',
        'content_size_limit': 'int',
        'ignore_html_parsing_time': 'bool',
        'save_cookies': 'bool',
        'disable_content_encoding': 'bool',
        'content': 'str',
        'content_type': 'str',
        'ignored_elements_filter': 'str',
        'elements_filter': 'str',
        'error_tolerance': 'int',
        'name': 'str',
        'address': 'str',
        'interval': 'int',
        'paused': 'bool',
        'locations_failover_enabled': 'bool',
        'notification_type_ids': 'list[int]',
        'notification_event_type_ids': 'list[int]',
        'notification_time_id': 'int',
        'description': 'str'
    }

    attribute_map = {
        'http_method_id': 'HttpMethodId',
        'content_regular_expression': 'ContentRegularExpression',
        'content_negative_regular_expression': 'ContentNegativeRegularExpression',
        'port': 'Port',
        'page_timeout': 'PageTimeout',
        'element_timeout': 'ElementTimeout',
        'elements_total_timeout': 'ElementsTotalTimeout',
        'fetch_page_elements': 'FetchPageElements',
        'max_redirects': 'MaxRedirects',
        'max_parallel_requests': 'MaxParallelRequests',
        'generate_har': 'GenerateHar',
        'allowed_element_error_count': 'AllowedElementErrorCount',
        'content_size_limit': 'ContentSizeLimit',
        'ignore_html_parsing_time': 'IgnoreHtmlParsingTime',
        'save_cookies': 'SaveCookies',
        'disable_content_encoding': 'DisableContentEncoding',
        'content': 'Content',
        'content_type': 'ContentType',
        'ignored_elements_filter': 'IgnoredElementsFilter',
        'elements_filter': 'ElementsFilter',
        'error_tolerance': 'ErrorTolerance',
        'name': 'Name',
        'address': 'Address',
        'interval': 'Interval',
        'paused': 'Paused',
        'locations_failover_enabled': 'LocationsFailoverEnabled',
        'notification_type_ids': 'NotificationTypeIds',
        'notification_event_type_ids': 'NotificationEventTypeIds',
        'notification_time_id': 'NotificationTimeId',
        'description': 'Description'
    }

    def __init__(self, http_method_id=1440, content_regular_expression='', content_negative_regular_expression='', port=80, page_timeout=7000, element_timeout=5000, elements_total_timeout=10000, fetch_page_elements=None, max_redirects=5, max_parallel_requests=6, generate_har=True, allowed_element_error_count=0, content_size_limit=2097152, ignore_html_parsing_time=True, save_cookies=False, disable_content_encoding=False, content='', content_type='', ignored_elements_filter='', elements_filter='', error_tolerance=51, name='', address='', interval=60, paused=False, locations_failover_enabled=True, notification_type_ids=None, notification_event_type_ids=None, notification_time_id=1594, description=None, _configuration=None):  # noqa: E501
        """CreateUpdateHealthCheckFullPageCommand - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._http_method_id = None
        self._content_regular_expression = None
        self._content_negative_regular_expression = None
        self._port = None
        self._page_timeout = None
        self._element_timeout = None
        self._elements_total_timeout = None
        self._fetch_page_elements = None
        self._max_redirects = None
        self._max_parallel_requests = None
        self._generate_har = None
        self._allowed_element_error_count = None
        self._content_size_limit = None
        self._ignore_html_parsing_time = None
        self._save_cookies = None
        self._disable_content_encoding = None
        self._content = None
        self._content_type = None
        self._ignored_elements_filter = None
        self._elements_filter = None
        self._error_tolerance = None
        self._name = None
        self._address = None
        self._interval = None
        self._paused = None
        self._locations_failover_enabled = None
        self._notification_type_ids = None
        self._notification_event_type_ids = None
        self._notification_time_id = None
        self._description = None
        self.discriminator = None

        self.http_method_id = http_method_id
        if content_regular_expression is not None:
            self.content_regular_expression = content_regular_expression
        if content_negative_regular_expression is not None:
            self.content_negative_regular_expression = content_negative_regular_expression
        self.port = port
        self.page_timeout = page_timeout
        self.element_timeout = element_timeout
        self.elements_total_timeout = elements_total_timeout
        self.fetch_page_elements = fetch_page_elements
        self.max_redirects = max_redirects
        self.max_parallel_requests = max_parallel_requests
        self.generate_har = generate_har
        if allowed_element_error_count is not None:
            self.allowed_element_error_count = allowed_element_error_count
        if content_size_limit is not None:
            self.content_size_limit = content_size_limit
        self.ignore_html_parsing_time = ignore_html_parsing_time
        self.save_cookies = save_cookies
        self.disable_content_encoding = disable_content_encoding
        if content is not None:
            self.content = content
        if content_type is not None:
            self.content_type = content_type
        if ignored_elements_filter is not None:
            self.ignored_elements_filter = ignored_elements_filter
        if elements_filter is not None:
            self.elements_filter = elements_filter
        self.error_tolerance = error_tolerance
        self.name = name
        self.address = address
        self.interval = interval
        self.paused = paused
        self.locations_failover_enabled = locations_failover_enabled
        if notification_type_ids is not None:
            self.notification_type_ids = notification_type_ids
        if notification_event_type_ids is not None:
            self.notification_event_type_ids = notification_event_type_ids
        self.notification_time_id = notification_time_id
        if description is not None:
            self.description = description

    @property
    def http_method_id(self):
        """Gets the http_method_id of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501

        Health check http method type (Dictionary 166)  # noqa: E501

        :return: The http_method_id of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :rtype: int
        """
        return self._http_method_id

    @http_method_id.setter
    def http_method_id(self, http_method_id):
        """Sets the http_method_id of this CreateUpdateHealthCheckFullPageCommand.

        Health check http method type (Dictionary 166)  # noqa: E501

        :param http_method_id: The http_method_id of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and http_method_id is None:
            raise ValueError("Invalid value for `http_method_id`, must not be `None`")  # noqa: E501

        self._http_method_id = http_method_id

    @property
    def content_regular_expression(self):
        """Gets the content_regular_expression of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501

        The content has to match the expression (GET and POST methods only)  # noqa: E501

        :return: The content_regular_expression of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :rtype: str
        """
        return self._content_regular_expression

    @content_regular_expression.setter
    def content_regular_expression(self, content_regular_expression):
        """Sets the content_regular_expression of this CreateUpdateHealthCheckFullPageCommand.

        The content has to match the expression (GET and POST methods only)  # noqa: E501

        :param content_regular_expression: The content_regular_expression of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :type: str
        """

        self._content_regular_expression = content_regular_expression

    @property
    def content_negative_regular_expression(self):
        """Gets the content_negative_regular_expression of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501

        The content cannot match the expression (GET and POST methods only)  # noqa: E501

        :return: The content_negative_regular_expression of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :rtype: str
        """
        return self._content_negative_regular_expression

    @content_negative_regular_expression.setter
    def content_negative_regular_expression(self, content_negative_regular_expression):
        """Sets the content_negative_regular_expression of this CreateUpdateHealthCheckFullPageCommand.

        The content cannot match the expression (GET and POST methods only)  # noqa: E501

        :param content_negative_regular_expression: The content_negative_regular_expression of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :type: str
        """

        self._content_negative_regular_expression = content_negative_regular_expression

    @property
    def port(self):
        """Gets the port of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501

        Port  # noqa: E501

        :return: The port of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this CreateUpdateHealthCheckFullPageCommand.

        Port  # noqa: E501

        :param port: The port of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                port is not None and port > 65535):  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value less than or equal to `65535`")  # noqa: E501
        if (self._configuration.client_side_validation and
                port is not None and port < 0):  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value greater than or equal to `0`")  # noqa: E501

        self._port = port

    @property
    def page_timeout(self):
        """Gets the page_timeout of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501

        Time limit for the main page body [ms]  # noqa: E501

        :return: The page_timeout of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :rtype: int
        """
        return self._page_timeout

    @page_timeout.setter
    def page_timeout(self, page_timeout):
        """Sets the page_timeout of this CreateUpdateHealthCheckFullPageCommand.

        Time limit for the main page body [ms]  # noqa: E501

        :param page_timeout: The page_timeout of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and page_timeout is None:
            raise ValueError("Invalid value for `page_timeout`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                page_timeout is not None and page_timeout > 120000):  # noqa: E501
            raise ValueError("Invalid value for `page_timeout`, must be a value less than or equal to `120000`")  # noqa: E501
        if (self._configuration.client_side_validation and
                page_timeout is not None and page_timeout < 1):  # noqa: E501
            raise ValueError("Invalid value for `page_timeout`, must be a value greater than or equal to `1`")  # noqa: E501

        self._page_timeout = page_timeout

    @property
    def element_timeout(self):
        """Gets the element_timeout of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501

        Time limit for each page elements [ms]  # noqa: E501

        :return: The element_timeout of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :rtype: int
        """
        return self._element_timeout

    @element_timeout.setter
    def element_timeout(self, element_timeout):
        """Sets the element_timeout of this CreateUpdateHealthCheckFullPageCommand.

        Time limit for each page elements [ms]  # noqa: E501

        :param element_timeout: The element_timeout of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and element_timeout is None:
            raise ValueError("Invalid value for `element_timeout`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                element_timeout is not None and element_timeout > 120000):  # noqa: E501
            raise ValueError("Invalid value for `element_timeout`, must be a value less than or equal to `120000`")  # noqa: E501
        if (self._configuration.client_side_validation and
                element_timeout is not None and element_timeout < 1):  # noqa: E501
            raise ValueError("Invalid value for `element_timeout`, must be a value greater than or equal to `1`")  # noqa: E501

        self._element_timeout = element_timeout

    @property
    def elements_total_timeout(self):
        """Gets the elements_total_timeout of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501

        Time limit for all page elements [ms]  # noqa: E501

        :return: The elements_total_timeout of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :rtype: int
        """
        return self._elements_total_timeout

    @elements_total_timeout.setter
    def elements_total_timeout(self, elements_total_timeout):
        """Sets the elements_total_timeout of this CreateUpdateHealthCheckFullPageCommand.

        Time limit for all page elements [ms]  # noqa: E501

        :param elements_total_timeout: The elements_total_timeout of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and elements_total_timeout is None:
            raise ValueError("Invalid value for `elements_total_timeout`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                elements_total_timeout is not None and elements_total_timeout > 120000):  # noqa: E501
            raise ValueError("Invalid value for `elements_total_timeout`, must be a value less than or equal to `120000`")  # noqa: E501
        if (self._configuration.client_side_validation and
                elements_total_timeout is not None and elements_total_timeout < 1):  # noqa: E501
            raise ValueError("Invalid value for `elements_total_timeout`, must be a value greater than or equal to `1`")  # noqa: E501

        self._elements_total_timeout = elements_total_timeout

    @property
    def fetch_page_elements(self):
        """Gets the fetch_page_elements of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501

        Fetch page elements  # noqa: E501

        :return: The fetch_page_elements of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :rtype: bool
        """
        return self._fetch_page_elements

    @fetch_page_elements.setter
    def fetch_page_elements(self, fetch_page_elements):
        """Sets the fetch_page_elements of this CreateUpdateHealthCheckFullPageCommand.

        Fetch page elements  # noqa: E501

        :param fetch_page_elements: The fetch_page_elements of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and fetch_page_elements is None:
            raise ValueError("Invalid value for `fetch_page_elements`, must not be `None`")  # noqa: E501

        self._fetch_page_elements = fetch_page_elements

    @property
    def max_redirects(self):
        """Gets the max_redirects of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501

        Maximum length of HTTP redirects sequence  # noqa: E501

        :return: The max_redirects of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :rtype: int
        """
        return self._max_redirects

    @max_redirects.setter
    def max_redirects(self, max_redirects):
        """Sets the max_redirects of this CreateUpdateHealthCheckFullPageCommand.

        Maximum length of HTTP redirects sequence  # noqa: E501

        :param max_redirects: The max_redirects of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and max_redirects is None:
            raise ValueError("Invalid value for `max_redirects`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                max_redirects is not None and max_redirects > 20):  # noqa: E501
            raise ValueError("Invalid value for `max_redirects`, must be a value less than or equal to `20`")  # noqa: E501
        if (self._configuration.client_side_validation and
                max_redirects is not None and max_redirects < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_redirects`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_redirects = max_redirects

    @property
    def max_parallel_requests(self):
        """Gets the max_parallel_requests of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501

        Maximum number of HTTP requests run in parallel  # noqa: E501

        :return: The max_parallel_requests of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :rtype: int
        """
        return self._max_parallel_requests

    @max_parallel_requests.setter
    def max_parallel_requests(self, max_parallel_requests):
        """Sets the max_parallel_requests of this CreateUpdateHealthCheckFullPageCommand.

        Maximum number of HTTP requests run in parallel  # noqa: E501

        :param max_parallel_requests: The max_parallel_requests of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and max_parallel_requests is None:
            raise ValueError("Invalid value for `max_parallel_requests`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                max_parallel_requests is not None and max_parallel_requests > 20):  # noqa: E501
            raise ValueError("Invalid value for `max_parallel_requests`, must be a value less than or equal to `20`")  # noqa: E501
        if (self._configuration.client_side_validation and
                max_parallel_requests is not None and max_parallel_requests < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_parallel_requests`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_parallel_requests = max_parallel_requests

    @property
    def generate_har(self):
        """Gets the generate_har of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501

        Generate a HAR file for each check  # noqa: E501

        :return: The generate_har of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :rtype: bool
        """
        return self._generate_har

    @generate_har.setter
    def generate_har(self, generate_har):
        """Sets the generate_har of this CreateUpdateHealthCheckFullPageCommand.

        Generate a HAR file for each check  # noqa: E501

        :param generate_har: The generate_har of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and generate_har is None:
            raise ValueError("Invalid value for `generate_har`, must not be `None`")  # noqa: E501

        self._generate_har = generate_har

    @property
    def allowed_element_error_count(self):
        """Gets the allowed_element_error_count of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501

        Number of elements that may not be fetched correctly  # noqa: E501

        :return: The allowed_element_error_count of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :rtype: int
        """
        return self._allowed_element_error_count

    @allowed_element_error_count.setter
    def allowed_element_error_count(self, allowed_element_error_count):
        """Sets the allowed_element_error_count of this CreateUpdateHealthCheckFullPageCommand.

        Number of elements that may not be fetched correctly  # noqa: E501

        :param allowed_element_error_count: The allowed_element_error_count of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                allowed_element_error_count is not None and allowed_element_error_count > 10000):  # noqa: E501
            raise ValueError("Invalid value for `allowed_element_error_count`, must be a value less than or equal to `10000`")  # noqa: E501
        if (self._configuration.client_side_validation and
                allowed_element_error_count is not None and allowed_element_error_count < 0):  # noqa: E501
            raise ValueError("Invalid value for `allowed_element_error_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._allowed_element_error_count = allowed_element_error_count

    @property
    def content_size_limit(self):
        """Gets the content_size_limit of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501

        Content size limit (bytes)  # noqa: E501

        :return: The content_size_limit of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :rtype: int
        """
        return self._content_size_limit

    @content_size_limit.setter
    def content_size_limit(self, content_size_limit):
        """Sets the content_size_limit of this CreateUpdateHealthCheckFullPageCommand.

        Content size limit (bytes)  # noqa: E501

        :param content_size_limit: The content_size_limit of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                content_size_limit is not None and content_size_limit > 104857600):  # noqa: E501
            raise ValueError("Invalid value for `content_size_limit`, must be a value less than or equal to `104857600`")  # noqa: E501
        if (self._configuration.client_side_validation and
                content_size_limit is not None and content_size_limit < 1):  # noqa: E501
            raise ValueError("Invalid value for `content_size_limit`, must be a value greater than or equal to `1`")  # noqa: E501

        self._content_size_limit = content_size_limit

    @property
    def ignore_html_parsing_time(self):
        """Gets the ignore_html_parsing_time of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501

        Ignore HTML code processing time in results  # noqa: E501

        :return: The ignore_html_parsing_time of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_html_parsing_time

    @ignore_html_parsing_time.setter
    def ignore_html_parsing_time(self, ignore_html_parsing_time):
        """Sets the ignore_html_parsing_time of this CreateUpdateHealthCheckFullPageCommand.

        Ignore HTML code processing time in results  # noqa: E501

        :param ignore_html_parsing_time: The ignore_html_parsing_time of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and ignore_html_parsing_time is None:
            raise ValueError("Invalid value for `ignore_html_parsing_time`, must not be `None`")  # noqa: E501

        self._ignore_html_parsing_time = ignore_html_parsing_time

    @property
    def save_cookies(self):
        """Gets the save_cookies of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501

        Save cookies between checks  # noqa: E501

        :return: The save_cookies of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :rtype: bool
        """
        return self._save_cookies

    @save_cookies.setter
    def save_cookies(self, save_cookies):
        """Sets the save_cookies of this CreateUpdateHealthCheckFullPageCommand.

        Save cookies between checks  # noqa: E501

        :param save_cookies: The save_cookies of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and save_cookies is None:
            raise ValueError("Invalid value for `save_cookies`, must not be `None`")  # noqa: E501

        self._save_cookies = save_cookies

    @property
    def disable_content_encoding(self):
        """Gets the disable_content_encoding of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501

        Disable HTTP transfer compression  # noqa: E501

        :return: The disable_content_encoding of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :rtype: bool
        """
        return self._disable_content_encoding

    @disable_content_encoding.setter
    def disable_content_encoding(self, disable_content_encoding):
        """Sets the disable_content_encoding of this CreateUpdateHealthCheckFullPageCommand.

        Disable HTTP transfer compression  # noqa: E501

        :param disable_content_encoding: The disable_content_encoding of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and disable_content_encoding is None:
            raise ValueError("Invalid value for `disable_content_encoding`, must not be `None`")  # noqa: E501

        self._disable_content_encoding = disable_content_encoding

    @property
    def content(self):
        """Gets the content of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501

        Content  # noqa: E501

        :return: The content of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this CreateUpdateHealthCheckFullPageCommand.

        Content  # noqa: E501

        :param content: The content of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def content_type(self):
        """Gets the content_type of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501

        Content type  # noqa: E501

        :return: The content_type of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this CreateUpdateHealthCheckFullPageCommand.

        Content type  # noqa: E501

        :param content_type: The content_type of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def ignored_elements_filter(self):
        """Gets the ignored_elements_filter of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501

        Ignore errors for elements with URLs matching the expression (only if page elements are fetched)  # noqa: E501

        :return: The ignored_elements_filter of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :rtype: str
        """
        return self._ignored_elements_filter

    @ignored_elements_filter.setter
    def ignored_elements_filter(self, ignored_elements_filter):
        """Sets the ignored_elements_filter of this CreateUpdateHealthCheckFullPageCommand.

        Ignore errors for elements with URLs matching the expression (only if page elements are fetched)  # noqa: E501

        :param ignored_elements_filter: The ignored_elements_filter of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :type: str
        """

        self._ignored_elements_filter = ignored_elements_filter

    @property
    def elements_filter(self):
        """Gets the elements_filter of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501

        Do not fetch elements with URLs that match the expression  # noqa: E501

        :return: The elements_filter of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :rtype: str
        """
        return self._elements_filter

    @elements_filter.setter
    def elements_filter(self, elements_filter):
        """Sets the elements_filter of this CreateUpdateHealthCheckFullPageCommand.

        Do not fetch elements with URLs that match the expression  # noqa: E501

        :param elements_filter: The elements_filter of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :type: str
        """

        self._elements_filter = elements_filter

    @property
    def error_tolerance(self):
        """Gets the error_tolerance of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501

        How many (%) locations have to report an error to consider it a breakdown  # noqa: E501

        :return: The error_tolerance of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :rtype: int
        """
        return self._error_tolerance

    @error_tolerance.setter
    def error_tolerance(self, error_tolerance):
        """Sets the error_tolerance of this CreateUpdateHealthCheckFullPageCommand.

        How many (%) locations have to report an error to consider it a breakdown  # noqa: E501

        :param error_tolerance: The error_tolerance of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and error_tolerance is None:
            raise ValueError("Invalid value for `error_tolerance`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                error_tolerance is not None and error_tolerance > 100):  # noqa: E501
            raise ValueError("Invalid value for `error_tolerance`, must be a value less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                error_tolerance is not None and error_tolerance < 1):  # noqa: E501
            raise ValueError("Invalid value for `error_tolerance`, must be a value greater than or equal to `1`")  # noqa: E501

        self._error_tolerance = error_tolerance

    @property
    def name(self):
        """Gets the name of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501

        Health check name  # noqa: E501

        :return: The name of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateUpdateHealthCheckFullPageCommand.

        Health check name  # noqa: E501

        :param name: The name of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 2000):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `2000`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and not re.search(r'^[^\/\\\\|<>%]*$', name)):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^[^\/\\\\|<>%]*$/`")  # noqa: E501

        self._name = name

    @property
    def address(self):
        """Gets the address of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501

        URL or IP address of the monitored service  # noqa: E501

        :return: The address of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CreateUpdateHealthCheckFullPageCommand.

        URL or IP address of the monitored service  # noqa: E501

        :param address: The address of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def interval(self):
        """Gets the interval of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501

        Time interval between health checks, in seconds  # noqa: E501

        :return: The interval of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this CreateUpdateHealthCheckFullPageCommand.

        Time interval between health checks, in seconds  # noqa: E501

        :param interval: The interval of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and interval is None:
            raise ValueError("Invalid value for `interval`, must not be `None`")  # noqa: E501

        self._interval = interval

    @property
    def paused(self):
        """Gets the paused of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501

        Is paused  # noqa: E501

        :return: The paused of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :rtype: bool
        """
        return self._paused

    @paused.setter
    def paused(self, paused):
        """Sets the paused of this CreateUpdateHealthCheckFullPageCommand.

        Is paused  # noqa: E501

        :param paused: The paused of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and paused is None:
            raise ValueError("Invalid value for `paused`, must not be `None`")  # noqa: E501

        self._paused = paused

    @property
    def locations_failover_enabled(self):
        """Gets the locations_failover_enabled of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501

        Use random substitute locations in case of location breakdown  # noqa: E501

        :return: The locations_failover_enabled of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :rtype: bool
        """
        return self._locations_failover_enabled

    @locations_failover_enabled.setter
    def locations_failover_enabled(self, locations_failover_enabled):
        """Sets the locations_failover_enabled of this CreateUpdateHealthCheckFullPageCommand.

        Use random substitute locations in case of location breakdown  # noqa: E501

        :param locations_failover_enabled: The locations_failover_enabled of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and locations_failover_enabled is None:
            raise ValueError("Invalid value for `locations_failover_enabled`, must not be `None`")  # noqa: E501

        self._locations_failover_enabled = locations_failover_enabled

    @property
    def notification_type_ids(self):
        """Gets the notification_type_ids of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501

        Notification types enabled for a health check  # noqa: E501

        :return: The notification_type_ids of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :rtype: list[int]
        """
        return self._notification_type_ids

    @notification_type_ids.setter
    def notification_type_ids(self, notification_type_ids):
        """Sets the notification_type_ids of this CreateUpdateHealthCheckFullPageCommand.

        Notification types enabled for a health check  # noqa: E501

        :param notification_type_ids: The notification_type_ids of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :type: list[int]
        """

        self._notification_type_ids = notification_type_ids

    @property
    def notification_event_type_ids(self):
        """Gets the notification_event_type_ids of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501

        Event types with enabled notification  # noqa: E501

        :return: The notification_event_type_ids of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :rtype: list[int]
        """
        return self._notification_event_type_ids

    @notification_event_type_ids.setter
    def notification_event_type_ids(self, notification_event_type_ids):
        """Sets the notification_event_type_ids of this CreateUpdateHealthCheckFullPageCommand.

        Event types with enabled notification  # noqa: E501

        :param notification_event_type_ids: The notification_event_type_ids of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :type: list[int]
        """

        self._notification_event_type_ids = notification_event_type_ids

    @property
    def notification_time_id(self):
        """Gets the notification_time_id of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501

        Time when notification is sent  # noqa: E501

        :return: The notification_time_id of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :rtype: int
        """
        return self._notification_time_id

    @notification_time_id.setter
    def notification_time_id(self, notification_time_id):
        """Sets the notification_time_id of this CreateUpdateHealthCheckFullPageCommand.

        Time when notification is sent  # noqa: E501

        :param notification_time_id: The notification_time_id of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and notification_time_id is None:
            raise ValueError("Invalid value for `notification_time_id`, must not be `None`")  # noqa: E501

        self._notification_time_id = notification_time_id

    @property
    def description(self):
        """Gets the description of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateUpdateHealthCheckFullPageCommand.

        Description  # noqa: E501

        :param description: The description of this CreateUpdateHealthCheckFullPageCommand.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateUpdateHealthCheckFullPageCommand, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateUpdateHealthCheckFullPageCommand):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateUpdateHealthCheckFullPageCommand):
            return True

        return self.to_dict() != other.to_dict()
