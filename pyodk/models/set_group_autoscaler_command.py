# coding: utf-8

"""
    Oktawave API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pyodk.configuration import Configuration


class SetGroupAutoscalerCommand(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expansion_type_id': 'int',
        'minimum_instance_number': 'int',
        'maximum_instance_number': 'int',
        'instances': 'list[GroupAutoscalerInstance]'
    }

    attribute_map = {
        'expansion_type_id': 'ExpansionTypeId',
        'minimum_instance_number': 'MinimumInstanceNumber',
        'maximum_instance_number': 'MaximumInstanceNumber',
        'instances': 'Instances'
    }

    def __init__(self, expansion_type_id=None, minimum_instance_number=None, maximum_instance_number=None, instances=None, _configuration=None):  # noqa: E501
        """SetGroupAutoscalerCommand - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._expansion_type_id = None
        self._minimum_instance_number = None
        self._maximum_instance_number = None
        self._instances = None
        self.discriminator = None

        self.expansion_type_id = expansion_type_id
        self.minimum_instance_number = minimum_instance_number
        self.maximum_instance_number = maximum_instance_number
        self.instances = instances

    @property
    def expansion_type_id(self):
        """Gets the expansion_type_id of this SetGroupAutoscalerCommand.  # noqa: E501

        Expansion type  # noqa: E501

        :return: The expansion_type_id of this SetGroupAutoscalerCommand.  # noqa: E501
        :rtype: int
        """
        return self._expansion_type_id

    @expansion_type_id.setter
    def expansion_type_id(self, expansion_type_id):
        """Sets the expansion_type_id of this SetGroupAutoscalerCommand.

        Expansion type  # noqa: E501

        :param expansion_type_id: The expansion_type_id of this SetGroupAutoscalerCommand.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and expansion_type_id is None:
            raise ValueError("Invalid value for `expansion_type_id`, must not be `None`")  # noqa: E501

        self._expansion_type_id = expansion_type_id

    @property
    def minimum_instance_number(self):
        """Gets the minimum_instance_number of this SetGroupAutoscalerCommand.  # noqa: E501

        Minimum instance number in container  # noqa: E501

        :return: The minimum_instance_number of this SetGroupAutoscalerCommand.  # noqa: E501
        :rtype: int
        """
        return self._minimum_instance_number

    @minimum_instance_number.setter
    def minimum_instance_number(self, minimum_instance_number):
        """Sets the minimum_instance_number of this SetGroupAutoscalerCommand.

        Minimum instance number in container  # noqa: E501

        :param minimum_instance_number: The minimum_instance_number of this SetGroupAutoscalerCommand.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and minimum_instance_number is None:
            raise ValueError("Invalid value for `minimum_instance_number`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                minimum_instance_number is not None and minimum_instance_number > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `minimum_instance_number`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                minimum_instance_number is not None and minimum_instance_number < 1):  # noqa: E501
            raise ValueError("Invalid value for `minimum_instance_number`, must be a value greater than or equal to `1`")  # noqa: E501

        self._minimum_instance_number = minimum_instance_number

    @property
    def maximum_instance_number(self):
        """Gets the maximum_instance_number of this SetGroupAutoscalerCommand.  # noqa: E501

        Minimum instance number in container  # noqa: E501

        :return: The maximum_instance_number of this SetGroupAutoscalerCommand.  # noqa: E501
        :rtype: int
        """
        return self._maximum_instance_number

    @maximum_instance_number.setter
    def maximum_instance_number(self, maximum_instance_number):
        """Sets the maximum_instance_number of this SetGroupAutoscalerCommand.

        Minimum instance number in container  # noqa: E501

        :param maximum_instance_number: The maximum_instance_number of this SetGroupAutoscalerCommand.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and maximum_instance_number is None:
            raise ValueError("Invalid value for `maximum_instance_number`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                maximum_instance_number is not None and maximum_instance_number > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `maximum_instance_number`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                maximum_instance_number is not None and maximum_instance_number < 1):  # noqa: E501
            raise ValueError("Invalid value for `maximum_instance_number`, must be a value greater than or equal to `1`")  # noqa: E501

        self._maximum_instance_number = maximum_instance_number

    @property
    def instances(self):
        """Gets the instances of this SetGroupAutoscalerCommand.  # noqa: E501

        Instances to scaling  # noqa: E501

        :return: The instances of this SetGroupAutoscalerCommand.  # noqa: E501
        :rtype: list[GroupAutoscalerInstance]
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this SetGroupAutoscalerCommand.

        Instances to scaling  # noqa: E501

        :param instances: The instances of this SetGroupAutoscalerCommand.  # noqa: E501
        :type: list[GroupAutoscalerInstance]
        """
        if self._configuration.client_side_validation and instances is None:
            raise ValueError("Invalid value for `instances`, must not be `None`")  # noqa: E501

        self._instances = instances

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SetGroupAutoscalerCommand, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SetGroupAutoscalerCommand):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SetGroupAutoscalerCommand):
            return True

        return self.to_dict() != other.to_dict()
