# coding: utf-8

"""
    Oktawave API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pyodk.configuration import Configuration


class CreateUpdateGroupSchedulerCommand(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'start_date': 'datetime',
        'time_zone_name': 'str',
        'instance_id': 'int',
        'action_type_id': 'int',
        'scheduler_type_id': 'int',
        'cycle_type_id': 'int',
        'cycle_number': 'int'
    }

    attribute_map = {
        'name': 'Name',
        'start_date': 'StartDate',
        'time_zone_name': 'TimeZoneName',
        'instance_id': 'InstanceId',
        'action_type_id': 'ActionTypeId',
        'scheduler_type_id': 'SchedulerTypeId',
        'cycle_type_id': 'CycleTypeId',
        'cycle_number': 'CycleNumber'
    }

    def __init__(self, name=None, start_date=None, time_zone_name=None, instance_id=None, action_type_id=None, scheduler_type_id=None, cycle_type_id=None, cycle_number=None, _configuration=None):  # noqa: E501
        """CreateUpdateGroupSchedulerCommand - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._start_date = None
        self._time_zone_name = None
        self._instance_id = None
        self._action_type_id = None
        self._scheduler_type_id = None
        self._cycle_type_id = None
        self._cycle_number = None
        self.discriminator = None

        self.name = name
        self.start_date = start_date
        self.time_zone_name = time_zone_name
        self.instance_id = instance_id
        self.action_type_id = action_type_id
        self.scheduler_type_id = scheduler_type_id
        if cycle_type_id is not None:
            self.cycle_type_id = cycle_type_id
        if cycle_number is not None:
            self.cycle_number = cycle_number

    @property
    def name(self):
        """Gets the name of this CreateUpdateGroupSchedulerCommand.  # noqa: E501

        Scheduler name  # noqa: E501

        :return: The name of this CreateUpdateGroupSchedulerCommand.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateUpdateGroupSchedulerCommand.

        Scheduler name  # noqa: E501

        :param name: The name of this CreateUpdateGroupSchedulerCommand.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 400):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `400`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and not re.search(r'^[^\/\\\\|<>%]*$', name)):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^[^\/\\\\|<>%]*$/`")  # noqa: E501

        self._name = name

    @property
    def start_date(self):
        """Gets the start_date of this CreateUpdateGroupSchedulerCommand.  # noqa: E501

        Start date  # noqa: E501

        :return: The start_date of this CreateUpdateGroupSchedulerCommand.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this CreateUpdateGroupSchedulerCommand.

        Start date  # noqa: E501

        :param start_date: The start_date of this CreateUpdateGroupSchedulerCommand.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def time_zone_name(self):
        """Gets the time_zone_name of this CreateUpdateGroupSchedulerCommand.  # noqa: E501

        IANA Time zone. To get a list of available timezones, visit (https://momentjs.com/timezone)  # noqa: E501

        :return: The time_zone_name of this CreateUpdateGroupSchedulerCommand.  # noqa: E501
        :rtype: str
        """
        return self._time_zone_name

    @time_zone_name.setter
    def time_zone_name(self, time_zone_name):
        """Sets the time_zone_name of this CreateUpdateGroupSchedulerCommand.

        IANA Time zone. To get a list of available timezones, visit (https://momentjs.com/timezone)  # noqa: E501

        :param time_zone_name: The time_zone_name of this CreateUpdateGroupSchedulerCommand.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and time_zone_name is None:
            raise ValueError("Invalid value for `time_zone_name`, must not be `None`")  # noqa: E501

        self._time_zone_name = time_zone_name

    @property
    def instance_id(self):
        """Gets the instance_id of this CreateUpdateGroupSchedulerCommand.  # noqa: E501

        Instance Id  # noqa: E501

        :return: The instance_id of this CreateUpdateGroupSchedulerCommand.  # noqa: E501
        :rtype: int
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this CreateUpdateGroupSchedulerCommand.

        Instance Id  # noqa: E501

        :param instance_id: The instance_id of this CreateUpdateGroupSchedulerCommand.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and instance_id is None:
            raise ValueError("Invalid value for `instance_id`, must not be `None`")  # noqa: E501

        self._instance_id = instance_id

    @property
    def action_type_id(self):
        """Gets the action_type_id of this CreateUpdateGroupSchedulerCommand.  # noqa: E501

        Action type id  # noqa: E501

        :return: The action_type_id of this CreateUpdateGroupSchedulerCommand.  # noqa: E501
        :rtype: int
        """
        return self._action_type_id

    @action_type_id.setter
    def action_type_id(self, action_type_id):
        """Sets the action_type_id of this CreateUpdateGroupSchedulerCommand.

        Action type id  # noqa: E501

        :param action_type_id: The action_type_id of this CreateUpdateGroupSchedulerCommand.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and action_type_id is None:
            raise ValueError("Invalid value for `action_type_id`, must not be `None`")  # noqa: E501

        self._action_type_id = action_type_id

    @property
    def scheduler_type_id(self):
        """Gets the scheduler_type_id of this CreateUpdateGroupSchedulerCommand.  # noqa: E501

        Scheduler type id  # noqa: E501

        :return: The scheduler_type_id of this CreateUpdateGroupSchedulerCommand.  # noqa: E501
        :rtype: int
        """
        return self._scheduler_type_id

    @scheduler_type_id.setter
    def scheduler_type_id(self, scheduler_type_id):
        """Sets the scheduler_type_id of this CreateUpdateGroupSchedulerCommand.

        Scheduler type id  # noqa: E501

        :param scheduler_type_id: The scheduler_type_id of this CreateUpdateGroupSchedulerCommand.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and scheduler_type_id is None:
            raise ValueError("Invalid value for `scheduler_type_id`, must not be `None`")  # noqa: E501

        self._scheduler_type_id = scheduler_type_id

    @property
    def cycle_type_id(self):
        """Gets the cycle_type_id of this CreateUpdateGroupSchedulerCommand.  # noqa: E501

        Cycle type id  # noqa: E501

        :return: The cycle_type_id of this CreateUpdateGroupSchedulerCommand.  # noqa: E501
        :rtype: int
        """
        return self._cycle_type_id

    @cycle_type_id.setter
    def cycle_type_id(self, cycle_type_id):
        """Sets the cycle_type_id of this CreateUpdateGroupSchedulerCommand.

        Cycle type id  # noqa: E501

        :param cycle_type_id: The cycle_type_id of this CreateUpdateGroupSchedulerCommand.  # noqa: E501
        :type: int
        """

        self._cycle_type_id = cycle_type_id

    @property
    def cycle_number(self):
        """Gets the cycle_number of this CreateUpdateGroupSchedulerCommand.  # noqa: E501

        Cycle number  # noqa: E501

        :return: The cycle_number of this CreateUpdateGroupSchedulerCommand.  # noqa: E501
        :rtype: int
        """
        return self._cycle_number

    @cycle_number.setter
    def cycle_number(self, cycle_number):
        """Sets the cycle_number of this CreateUpdateGroupSchedulerCommand.

        Cycle number  # noqa: E501

        :param cycle_number: The cycle_number of this CreateUpdateGroupSchedulerCommand.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                cycle_number is not None and cycle_number > 32767):  # noqa: E501
            raise ValueError("Invalid value for `cycle_number`, must be a value less than or equal to `32767`")  # noqa: E501
        if (self._configuration.client_side_validation and
                cycle_number is not None and cycle_number < 1):  # noqa: E501
            raise ValueError("Invalid value for `cycle_number`, must be a value greater than or equal to `1`")  # noqa: E501

        self._cycle_number = cycle_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateUpdateGroupSchedulerCommand, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateUpdateGroupSchedulerCommand):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateUpdateGroupSchedulerCommand):
            return True

        return self.to_dict() != other.to_dict()
