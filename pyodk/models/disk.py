# coding: utf-8

"""
    Oktawave API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pyodk.configuration import Configuration


class Disk(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'space_capacity': 'int',
        'tier': 'DictionaryItem',
        'creation_date': 'datetime',
        'creation_user': 'UserResource',
        'is_shared': 'bool',
        'shared_disk_type': 'DictionaryItem',
        'subregion': 'BaseResource',
        'is_locked': 'bool',
        'locking_date': 'datetime',
        'connections': 'list[DiskConnection]',
        'is_freemium': 'bool'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'space_capacity': 'SpaceCapacity',
        'tier': 'Tier',
        'creation_date': 'CreationDate',
        'creation_user': 'CreationUser',
        'is_shared': 'IsShared',
        'shared_disk_type': 'SharedDiskType',
        'subregion': 'Subregion',
        'is_locked': 'IsLocked',
        'locking_date': 'LockingDate',
        'connections': 'Connections',
        'is_freemium': 'IsFreemium'
    }

    def __init__(self, id=None, name=None, space_capacity=None, tier=None, creation_date=None, creation_user=None, is_shared=None, shared_disk_type=None, subregion=None, is_locked=None, locking_date=None, connections=None, is_freemium=None, _configuration=None):  # noqa: E501
        """Disk - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._space_capacity = None
        self._tier = None
        self._creation_date = None
        self._creation_user = None
        self._is_shared = None
        self._shared_disk_type = None
        self._subregion = None
        self._is_locked = None
        self._locking_date = None
        self._connections = None
        self._is_freemium = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if space_capacity is not None:
            self.space_capacity = space_capacity
        if tier is not None:
            self.tier = tier
        if creation_date is not None:
            self.creation_date = creation_date
        if creation_user is not None:
            self.creation_user = creation_user
        if is_shared is not None:
            self.is_shared = is_shared
        if shared_disk_type is not None:
            self.shared_disk_type = shared_disk_type
        if subregion is not None:
            self.subregion = subregion
        if is_locked is not None:
            self.is_locked = is_locked
        if locking_date is not None:
            self.locking_date = locking_date
        if connections is not None:
            self.connections = connections
        if is_freemium is not None:
            self.is_freemium = is_freemium

    @property
    def id(self):
        """Gets the id of this Disk.  # noqa: E501

        Id  # noqa: E501

        :return: The id of this Disk.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Disk.

        Id  # noqa: E501

        :param id: The id of this Disk.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Disk.  # noqa: E501

        Name  # noqa: E501

        :return: The name of this Disk.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Disk.

        Name  # noqa: E501

        :param name: The name of this Disk.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def space_capacity(self):
        """Gets the space_capacity of this Disk.  # noqa: E501

        Space capacity in GB  # noqa: E501

        :return: The space_capacity of this Disk.  # noqa: E501
        :rtype: int
        """
        return self._space_capacity

    @space_capacity.setter
    def space_capacity(self, space_capacity):
        """Sets the space_capacity of this Disk.

        Space capacity in GB  # noqa: E501

        :param space_capacity: The space_capacity of this Disk.  # noqa: E501
        :type: int
        """

        self._space_capacity = space_capacity

    @property
    def tier(self):
        """Gets the tier of this Disk.  # noqa: E501

        Tier  # noqa: E501

        :return: The tier of this Disk.  # noqa: E501
        :rtype: DictionaryItem
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this Disk.

        Tier  # noqa: E501

        :param tier: The tier of this Disk.  # noqa: E501
        :type: DictionaryItem
        """

        self._tier = tier

    @property
    def creation_date(self):
        """Gets the creation_date of this Disk.  # noqa: E501

        Creation date  # noqa: E501

        :return: The creation_date of this Disk.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Disk.

        Creation date  # noqa: E501

        :param creation_date: The creation_date of this Disk.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def creation_user(self):
        """Gets the creation_user of this Disk.  # noqa: E501

        User who created the disk  # noqa: E501

        :return: The creation_user of this Disk.  # noqa: E501
        :rtype: UserResource
        """
        return self._creation_user

    @creation_user.setter
    def creation_user(self, creation_user):
        """Sets the creation_user of this Disk.

        User who created the disk  # noqa: E501

        :param creation_user: The creation_user of this Disk.  # noqa: E501
        :type: UserResource
        """

        self._creation_user = creation_user

    @property
    def is_shared(self):
        """Gets the is_shared of this Disk.  # noqa: E501

        If disk is shared  # noqa: E501

        :return: The is_shared of this Disk.  # noqa: E501
        :rtype: bool
        """
        return self._is_shared

    @is_shared.setter
    def is_shared(self, is_shared):
        """Sets the is_shared of this Disk.

        If disk is shared  # noqa: E501

        :param is_shared: The is_shared of this Disk.  # noqa: E501
        :type: bool
        """

        self._is_shared = is_shared

    @property
    def shared_disk_type(self):
        """Gets the shared_disk_type of this Disk.  # noqa: E501

        Shared disk type, null if disk is not shared  # noqa: E501

        :return: The shared_disk_type of this Disk.  # noqa: E501
        :rtype: DictionaryItem
        """
        return self._shared_disk_type

    @shared_disk_type.setter
    def shared_disk_type(self, shared_disk_type):
        """Sets the shared_disk_type of this Disk.

        Shared disk type, null if disk is not shared  # noqa: E501

        :param shared_disk_type: The shared_disk_type of this Disk.  # noqa: E501
        :type: DictionaryItem
        """

        self._shared_disk_type = shared_disk_type

    @property
    def subregion(self):
        """Gets the subregion of this Disk.  # noqa: E501

        Subregion  # noqa: E501

        :return: The subregion of this Disk.  # noqa: E501
        :rtype: BaseResource
        """
        return self._subregion

    @subregion.setter
    def subregion(self, subregion):
        """Sets the subregion of this Disk.

        Subregion  # noqa: E501

        :param subregion: The subregion of this Disk.  # noqa: E501
        :type: BaseResource
        """

        self._subregion = subregion

    @property
    def is_locked(self):
        """Gets the is_locked of this Disk.  # noqa: E501

        If the disk is locked by a running operation  # noqa: E501

        :return: The is_locked of this Disk.  # noqa: E501
        :rtype: bool
        """
        return self._is_locked

    @is_locked.setter
    def is_locked(self, is_locked):
        """Sets the is_locked of this Disk.

        If the disk is locked by a running operation  # noqa: E501

        :param is_locked: The is_locked of this Disk.  # noqa: E501
        :type: bool
        """

        self._is_locked = is_locked

    @property
    def locking_date(self):
        """Gets the locking_date of this Disk.  # noqa: E501

        Locking date  # noqa: E501

        :return: The locking_date of this Disk.  # noqa: E501
        :rtype: datetime
        """
        return self._locking_date

    @locking_date.setter
    def locking_date(self, locking_date):
        """Sets the locking_date of this Disk.

        Locking date  # noqa: E501

        :param locking_date: The locking_date of this Disk.  # noqa: E501
        :type: datetime
        """

        self._locking_date = locking_date

    @property
    def connections(self):
        """Gets the connections of this Disk.  # noqa: E501

        Connections to instances  # noqa: E501

        :return: The connections of this Disk.  # noqa: E501
        :rtype: list[DiskConnection]
        """
        return self._connections

    @connections.setter
    def connections(self, connections):
        """Sets the connections of this Disk.

        Connections to instances  # noqa: E501

        :param connections: The connections of this Disk.  # noqa: E501
        :type: list[DiskConnection]
        """

        self._connections = connections

    @property
    def is_freemium(self):
        """Gets the is_freemium of this Disk.  # noqa: E501

        Is freemium  # noqa: E501

        :return: The is_freemium of this Disk.  # noqa: E501
        :rtype: bool
        """
        return self._is_freemium

    @is_freemium.setter
    def is_freemium(self, is_freemium):
        """Sets the is_freemium of this Disk.

        Is freemium  # noqa: E501

        :param is_freemium: The is_freemium of this Disk.  # noqa: E501
        :type: bool
        """

        self._is_freemium = is_freemium

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Disk, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Disk):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Disk):
            return True

        return self.to_dict() != other.to_dict()
