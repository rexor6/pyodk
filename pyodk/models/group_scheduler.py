# coding: utf-8

"""
    Oktawave API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pyodk.configuration import Configuration


class GroupScheduler(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'creation_user': 'UserResource',
        'instance': 'BaseResource',
        'group': 'BaseResource',
        'creation_date': 'datetime',
        'last_change_date': 'datetime',
        'start_date': 'datetime',
        'time_zone_name': 'str',
        'name': 'str',
        'status': 'DictionaryItem',
        'type': 'DictionaryItem',
        'action_type': 'DictionaryItem',
        'cycle_type': 'DictionaryItem',
        'cycle_number': 'int'
    }

    attribute_map = {
        'id': 'Id',
        'creation_user': 'CreationUser',
        'instance': 'Instance',
        'group': 'Group',
        'creation_date': 'CreationDate',
        'last_change_date': 'LastChangeDate',
        'start_date': 'StartDate',
        'time_zone_name': 'TimeZoneName',
        'name': 'Name',
        'status': 'Status',
        'type': 'Type',
        'action_type': 'ActionType',
        'cycle_type': 'CycleType',
        'cycle_number': 'CycleNumber'
    }

    def __init__(self, id=None, creation_user=None, instance=None, group=None, creation_date=None, last_change_date=None, start_date=None, time_zone_name=None, name=None, status=None, type=None, action_type=None, cycle_type=None, cycle_number=None, _configuration=None):  # noqa: E501
        """GroupScheduler - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._creation_user = None
        self._instance = None
        self._group = None
        self._creation_date = None
        self._last_change_date = None
        self._start_date = None
        self._time_zone_name = None
        self._name = None
        self._status = None
        self._type = None
        self._action_type = None
        self._cycle_type = None
        self._cycle_number = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if creation_user is not None:
            self.creation_user = creation_user
        if instance is not None:
            self.instance = instance
        if group is not None:
            self.group = group
        if creation_date is not None:
            self.creation_date = creation_date
        if last_change_date is not None:
            self.last_change_date = last_change_date
        if start_date is not None:
            self.start_date = start_date
        if time_zone_name is not None:
            self.time_zone_name = time_zone_name
        if name is not None:
            self.name = name
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type
        if action_type is not None:
            self.action_type = action_type
        if cycle_type is not None:
            self.cycle_type = cycle_type
        if cycle_number is not None:
            self.cycle_number = cycle_number

    @property
    def id(self):
        """Gets the id of this GroupScheduler.  # noqa: E501

        ID  # noqa: E501

        :return: The id of this GroupScheduler.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GroupScheduler.

        ID  # noqa: E501

        :param id: The id of this GroupScheduler.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def creation_user(self):
        """Gets the creation_user of this GroupScheduler.  # noqa: E501

        User who created the scheduler  # noqa: E501

        :return: The creation_user of this GroupScheduler.  # noqa: E501
        :rtype: UserResource
        """
        return self._creation_user

    @creation_user.setter
    def creation_user(self, creation_user):
        """Sets the creation_user of this GroupScheduler.

        User who created the scheduler  # noqa: E501

        :param creation_user: The creation_user of this GroupScheduler.  # noqa: E501
        :type: UserResource
        """

        self._creation_user = creation_user

    @property
    def instance(self):
        """Gets the instance of this GroupScheduler.  # noqa: E501

        Instance  # noqa: E501

        :return: The instance of this GroupScheduler.  # noqa: E501
        :rtype: BaseResource
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this GroupScheduler.

        Instance  # noqa: E501

        :param instance: The instance of this GroupScheduler.  # noqa: E501
        :type: BaseResource
        """

        self._instance = instance

    @property
    def group(self):
        """Gets the group of this GroupScheduler.  # noqa: E501

        Group  # noqa: E501

        :return: The group of this GroupScheduler.  # noqa: E501
        :rtype: BaseResource
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this GroupScheduler.

        Group  # noqa: E501

        :param group: The group of this GroupScheduler.  # noqa: E501
        :type: BaseResource
        """

        self._group = group

    @property
    def creation_date(self):
        """Gets the creation_date of this GroupScheduler.  # noqa: E501

        Creation date  # noqa: E501

        :return: The creation_date of this GroupScheduler.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this GroupScheduler.

        Creation date  # noqa: E501

        :param creation_date: The creation_date of this GroupScheduler.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def last_change_date(self):
        """Gets the last_change_date of this GroupScheduler.  # noqa: E501

        Last change date  # noqa: E501

        :return: The last_change_date of this GroupScheduler.  # noqa: E501
        :rtype: datetime
        """
        return self._last_change_date

    @last_change_date.setter
    def last_change_date(self, last_change_date):
        """Sets the last_change_date of this GroupScheduler.

        Last change date  # noqa: E501

        :param last_change_date: The last_change_date of this GroupScheduler.  # noqa: E501
        :type: datetime
        """

        self._last_change_date = last_change_date

    @property
    def start_date(self):
        """Gets the start_date of this GroupScheduler.  # noqa: E501

        Start date  # noqa: E501

        :return: The start_date of this GroupScheduler.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this GroupScheduler.

        Start date  # noqa: E501

        :param start_date: The start_date of this GroupScheduler.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def time_zone_name(self):
        """Gets the time_zone_name of this GroupScheduler.  # noqa: E501

        Time zone name  # noqa: E501

        :return: The time_zone_name of this GroupScheduler.  # noqa: E501
        :rtype: str
        """
        return self._time_zone_name

    @time_zone_name.setter
    def time_zone_name(self, time_zone_name):
        """Sets the time_zone_name of this GroupScheduler.

        Time zone name  # noqa: E501

        :param time_zone_name: The time_zone_name of this GroupScheduler.  # noqa: E501
        :type: str
        """

        self._time_zone_name = time_zone_name

    @property
    def name(self):
        """Gets the name of this GroupScheduler.  # noqa: E501

        Scheduler name  # noqa: E501

        :return: The name of this GroupScheduler.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GroupScheduler.

        Scheduler name  # noqa: E501

        :param name: The name of this GroupScheduler.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this GroupScheduler.  # noqa: E501

        Status  # noqa: E501

        :return: The status of this GroupScheduler.  # noqa: E501
        :rtype: DictionaryItem
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GroupScheduler.

        Status  # noqa: E501

        :param status: The status of this GroupScheduler.  # noqa: E501
        :type: DictionaryItem
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this GroupScheduler.  # noqa: E501

        Type  # noqa: E501

        :return: The type of this GroupScheduler.  # noqa: E501
        :rtype: DictionaryItem
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GroupScheduler.

        Type  # noqa: E501

        :param type: The type of this GroupScheduler.  # noqa: E501
        :type: DictionaryItem
        """

        self._type = type

    @property
    def action_type(self):
        """Gets the action_type of this GroupScheduler.  # noqa: E501

        Action type  # noqa: E501

        :return: The action_type of this GroupScheduler.  # noqa: E501
        :rtype: DictionaryItem
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this GroupScheduler.

        Action type  # noqa: E501

        :param action_type: The action_type of this GroupScheduler.  # noqa: E501
        :type: DictionaryItem
        """

        self._action_type = action_type

    @property
    def cycle_type(self):
        """Gets the cycle_type of this GroupScheduler.  # noqa: E501

        Cycle type  # noqa: E501

        :return: The cycle_type of this GroupScheduler.  # noqa: E501
        :rtype: DictionaryItem
        """
        return self._cycle_type

    @cycle_type.setter
    def cycle_type(self, cycle_type):
        """Sets the cycle_type of this GroupScheduler.

        Cycle type  # noqa: E501

        :param cycle_type: The cycle_type of this GroupScheduler.  # noqa: E501
        :type: DictionaryItem
        """

        self._cycle_type = cycle_type

    @property
    def cycle_number(self):
        """Gets the cycle_number of this GroupScheduler.  # noqa: E501

        Cycle number beetwen scheduler launch  # noqa: E501

        :return: The cycle_number of this GroupScheduler.  # noqa: E501
        :rtype: int
        """
        return self._cycle_number

    @cycle_number.setter
    def cycle_number(self, cycle_number):
        """Sets the cycle_number of this GroupScheduler.

        Cycle number beetwen scheduler launch  # noqa: E501

        :param cycle_number: The cycle_number of this GroupScheduler.  # noqa: E501
        :type: int
        """

        self._cycle_number = cycle_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GroupScheduler, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupScheduler):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GroupScheduler):
            return True

        return self.to_dict() != other.to_dict()
