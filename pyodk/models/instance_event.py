# coding: utf-8

"""
    Oktawave API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pyodk.configuration import Configuration


class InstanceEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        '_date': 'datetime',
        'instance': 'NamedResource',
        'user': 'UserResource',
        'operation_type': 'DictionaryItem',
        'operation_status': 'DictionaryItem',
        'message': 'str'
    }

    attribute_map = {
        'id': 'Id',
        '_date': 'Date',
        'instance': 'Instance',
        'user': 'User',
        'operation_type': 'OperationType',
        'operation_status': 'OperationStatus',
        'message': 'Message'
    }

    def __init__(self, id=None, _date=None, instance=None, user=None, operation_type=None, operation_status=None, message=None, _configuration=None):  # noqa: E501
        """InstanceEvent - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self.__date = None
        self._instance = None
        self._user = None
        self._operation_type = None
        self._operation_status = None
        self._message = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if _date is not None:
            self._date = _date
        if instance is not None:
            self.instance = instance
        if user is not None:
            self.user = user
        if operation_type is not None:
            self.operation_type = operation_type
        if operation_status is not None:
            self.operation_status = operation_status
        if message is not None:
            self.message = message

    @property
    def id(self):
        """Gets the id of this InstanceEvent.  # noqa: E501

        Id  # noqa: E501

        :return: The id of this InstanceEvent.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InstanceEvent.

        Id  # noqa: E501

        :param id: The id of this InstanceEvent.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def _date(self):
        """Gets the _date of this InstanceEvent.  # noqa: E501

        Date  # noqa: E501

        :return: The _date of this InstanceEvent.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this InstanceEvent.

        Date  # noqa: E501

        :param _date: The _date of this InstanceEvent.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def instance(self):
        """Gets the instance of this InstanceEvent.  # noqa: E501

        Instance  # noqa: E501

        :return: The instance of this InstanceEvent.  # noqa: E501
        :rtype: NamedResource
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this InstanceEvent.

        Instance  # noqa: E501

        :param instance: The instance of this InstanceEvent.  # noqa: E501
        :type: NamedResource
        """

        self._instance = instance

    @property
    def user(self):
        """Gets the user of this InstanceEvent.  # noqa: E501

        User who performed the operation  # noqa: E501

        :return: The user of this InstanceEvent.  # noqa: E501
        :rtype: UserResource
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this InstanceEvent.

        User who performed the operation  # noqa: E501

        :param user: The user of this InstanceEvent.  # noqa: E501
        :type: UserResource
        """

        self._user = user

    @property
    def operation_type(self):
        """Gets the operation_type of this InstanceEvent.  # noqa: E501

        Operation type  # noqa: E501

        :return: The operation_type of this InstanceEvent.  # noqa: E501
        :rtype: DictionaryItem
        """
        return self._operation_type

    @operation_type.setter
    def operation_type(self, operation_type):
        """Sets the operation_type of this InstanceEvent.

        Operation type  # noqa: E501

        :param operation_type: The operation_type of this InstanceEvent.  # noqa: E501
        :type: DictionaryItem
        """

        self._operation_type = operation_type

    @property
    def operation_status(self):
        """Gets the operation_status of this InstanceEvent.  # noqa: E501

        Operation status  # noqa: E501

        :return: The operation_status of this InstanceEvent.  # noqa: E501
        :rtype: DictionaryItem
        """
        return self._operation_status

    @operation_status.setter
    def operation_status(self, operation_status):
        """Sets the operation_status of this InstanceEvent.

        Operation status  # noqa: E501

        :param operation_status: The operation_status of this InstanceEvent.  # noqa: E501
        :type: DictionaryItem
        """

        self._operation_status = operation_status

    @property
    def message(self):
        """Gets the message of this InstanceEvent.  # noqa: E501

        Message  # noqa: E501

        :return: The message of this InstanceEvent.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this InstanceEvent.

        Message  # noqa: E501

        :param message: The message of this InstanceEvent.  # noqa: E501
        :type: str
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstanceEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstanceEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InstanceEvent):
            return True

        return self.to_dict() != other.to_dict()
