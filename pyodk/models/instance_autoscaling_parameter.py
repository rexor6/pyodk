# coding: utf-8

"""
    Oktawave API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pyodk.configuration import Configuration


class InstanceAutoscalingParameter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'autoscaling_parameter_type': 'DictionaryItem',
        'min_ram': 'int',
        'max_ram': 'int',
        'min_cpu': 'int',
        'max_cpu': 'int',
        'has_agreed_to_increase_class': 'bool',
        'has_agreed_to_decrease_class': 'bool',
        'has_agreed_to_restart': 'bool',
        'restart_time_from': 'NullableTime',
        'restart_time_to': 'NullableTime',
        'time_zone_name': 'str'
    }

    attribute_map = {
        'autoscaling_parameter_type': 'AutoscalingParameterType',
        'min_ram': 'MinRam',
        'max_ram': 'MaxRam',
        'min_cpu': 'MinCpu',
        'max_cpu': 'MaxCpu',
        'has_agreed_to_increase_class': 'HasAgreedToIncreaseClass',
        'has_agreed_to_decrease_class': 'HasAgreedToDecreaseClass',
        'has_agreed_to_restart': 'HasAgreedToRestart',
        'restart_time_from': 'RestartTimeFrom',
        'restart_time_to': 'RestartTimeTo',
        'time_zone_name': 'TimeZoneName'
    }

    def __init__(self, autoscaling_parameter_type=None, min_ram=None, max_ram=None, min_cpu=None, max_cpu=None, has_agreed_to_increase_class=None, has_agreed_to_decrease_class=None, has_agreed_to_restart=None, restart_time_from=None, restart_time_to=None, time_zone_name=None, _configuration=None):  # noqa: E501
        """InstanceAutoscalingParameter - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._autoscaling_parameter_type = None
        self._min_ram = None
        self._max_ram = None
        self._min_cpu = None
        self._max_cpu = None
        self._has_agreed_to_increase_class = None
        self._has_agreed_to_decrease_class = None
        self._has_agreed_to_restart = None
        self._restart_time_from = None
        self._restart_time_to = None
        self._time_zone_name = None
        self.discriminator = None

        if autoscaling_parameter_type is not None:
            self.autoscaling_parameter_type = autoscaling_parameter_type
        if min_ram is not None:
            self.min_ram = min_ram
        if max_ram is not None:
            self.max_ram = max_ram
        if min_cpu is not None:
            self.min_cpu = min_cpu
        if max_cpu is not None:
            self.max_cpu = max_cpu
        if has_agreed_to_increase_class is not None:
            self.has_agreed_to_increase_class = has_agreed_to_increase_class
        if has_agreed_to_decrease_class is not None:
            self.has_agreed_to_decrease_class = has_agreed_to_decrease_class
        if has_agreed_to_restart is not None:
            self.has_agreed_to_restart = has_agreed_to_restart
        if restart_time_from is not None:
            self.restart_time_from = restart_time_from
        if restart_time_to is not None:
            self.restart_time_to = restart_time_to
        if time_zone_name is not None:
            self.time_zone_name = time_zone_name

    @property
    def autoscaling_parameter_type(self):
        """Gets the autoscaling_parameter_type of this InstanceAutoscalingParameter.  # noqa: E501

        Autoscaling parameter type  # noqa: E501

        :return: The autoscaling_parameter_type of this InstanceAutoscalingParameter.  # noqa: E501
        :rtype: DictionaryItem
        """
        return self._autoscaling_parameter_type

    @autoscaling_parameter_type.setter
    def autoscaling_parameter_type(self, autoscaling_parameter_type):
        """Sets the autoscaling_parameter_type of this InstanceAutoscalingParameter.

        Autoscaling parameter type  # noqa: E501

        :param autoscaling_parameter_type: The autoscaling_parameter_type of this InstanceAutoscalingParameter.  # noqa: E501
        :type: DictionaryItem
        """

        self._autoscaling_parameter_type = autoscaling_parameter_type

    @property
    def min_ram(self):
        """Gets the min_ram of this InstanceAutoscalingParameter.  # noqa: E501

        Minimum RAM capacity in megabytes  # noqa: E501

        :return: The min_ram of this InstanceAutoscalingParameter.  # noqa: E501
        :rtype: int
        """
        return self._min_ram

    @min_ram.setter
    def min_ram(self, min_ram):
        """Sets the min_ram of this InstanceAutoscalingParameter.

        Minimum RAM capacity in megabytes  # noqa: E501

        :param min_ram: The min_ram of this InstanceAutoscalingParameter.  # noqa: E501
        :type: int
        """

        self._min_ram = min_ram

    @property
    def max_ram(self):
        """Gets the max_ram of this InstanceAutoscalingParameter.  # noqa: E501

        Maximum RAM capacity in megabytes  # noqa: E501

        :return: The max_ram of this InstanceAutoscalingParameter.  # noqa: E501
        :rtype: int
        """
        return self._max_ram

    @max_ram.setter
    def max_ram(self, max_ram):
        """Sets the max_ram of this InstanceAutoscalingParameter.

        Maximum RAM capacity in megabytes  # noqa: E501

        :param max_ram: The max_ram of this InstanceAutoscalingParameter.  # noqa: E501
        :type: int
        """

        self._max_ram = max_ram

    @property
    def min_cpu(self):
        """Gets the min_cpu of this InstanceAutoscalingParameter.  # noqa: E501

        Minimum CPU count  # noqa: E501

        :return: The min_cpu of this InstanceAutoscalingParameter.  # noqa: E501
        :rtype: int
        """
        return self._min_cpu

    @min_cpu.setter
    def min_cpu(self, min_cpu):
        """Sets the min_cpu of this InstanceAutoscalingParameter.

        Minimum CPU count  # noqa: E501

        :param min_cpu: The min_cpu of this InstanceAutoscalingParameter.  # noqa: E501
        :type: int
        """

        self._min_cpu = min_cpu

    @property
    def max_cpu(self):
        """Gets the max_cpu of this InstanceAutoscalingParameter.  # noqa: E501

        Maximum CPU count  # noqa: E501

        :return: The max_cpu of this InstanceAutoscalingParameter.  # noqa: E501
        :rtype: int
        """
        return self._max_cpu

    @max_cpu.setter
    def max_cpu(self, max_cpu):
        """Sets the max_cpu of this InstanceAutoscalingParameter.

        Maximum CPU count  # noqa: E501

        :param max_cpu: The max_cpu of this InstanceAutoscalingParameter.  # noqa: E501
        :type: int
        """

        self._max_cpu = max_cpu

    @property
    def has_agreed_to_increase_class(self):
        """Gets the has_agreed_to_increase_class of this InstanceAutoscalingParameter.  # noqa: E501

        Instance class increase agreement  # noqa: E501

        :return: The has_agreed_to_increase_class of this InstanceAutoscalingParameter.  # noqa: E501
        :rtype: bool
        """
        return self._has_agreed_to_increase_class

    @has_agreed_to_increase_class.setter
    def has_agreed_to_increase_class(self, has_agreed_to_increase_class):
        """Sets the has_agreed_to_increase_class of this InstanceAutoscalingParameter.

        Instance class increase agreement  # noqa: E501

        :param has_agreed_to_increase_class: The has_agreed_to_increase_class of this InstanceAutoscalingParameter.  # noqa: E501
        :type: bool
        """

        self._has_agreed_to_increase_class = has_agreed_to_increase_class

    @property
    def has_agreed_to_decrease_class(self):
        """Gets the has_agreed_to_decrease_class of this InstanceAutoscalingParameter.  # noqa: E501

        Instance class decrease agreement  # noqa: E501

        :return: The has_agreed_to_decrease_class of this InstanceAutoscalingParameter.  # noqa: E501
        :rtype: bool
        """
        return self._has_agreed_to_decrease_class

    @has_agreed_to_decrease_class.setter
    def has_agreed_to_decrease_class(self, has_agreed_to_decrease_class):
        """Sets the has_agreed_to_decrease_class of this InstanceAutoscalingParameter.

        Instance class decrease agreement  # noqa: E501

        :param has_agreed_to_decrease_class: The has_agreed_to_decrease_class of this InstanceAutoscalingParameter.  # noqa: E501
        :type: bool
        """

        self._has_agreed_to_decrease_class = has_agreed_to_decrease_class

    @property
    def has_agreed_to_restart(self):
        """Gets the has_agreed_to_restart of this InstanceAutoscalingParameter.  # noqa: E501

        Restart agreement  # noqa: E501

        :return: The has_agreed_to_restart of this InstanceAutoscalingParameter.  # noqa: E501
        :rtype: bool
        """
        return self._has_agreed_to_restart

    @has_agreed_to_restart.setter
    def has_agreed_to_restart(self, has_agreed_to_restart):
        """Sets the has_agreed_to_restart of this InstanceAutoscalingParameter.

        Restart agreement  # noqa: E501

        :param has_agreed_to_restart: The has_agreed_to_restart of this InstanceAutoscalingParameter.  # noqa: E501
        :type: bool
        """

        self._has_agreed_to_restart = has_agreed_to_restart

    @property
    def restart_time_from(self):
        """Gets the restart_time_from of this InstanceAutoscalingParameter.  # noqa: E501

        Restart time lower limit  # noqa: E501

        :return: The restart_time_from of this InstanceAutoscalingParameter.  # noqa: E501
        :rtype: NullableTime
        """
        return self._restart_time_from

    @restart_time_from.setter
    def restart_time_from(self, restart_time_from):
        """Sets the restart_time_from of this InstanceAutoscalingParameter.

        Restart time lower limit  # noqa: E501

        :param restart_time_from: The restart_time_from of this InstanceAutoscalingParameter.  # noqa: E501
        :type: NullableTime
        """

        self._restart_time_from = restart_time_from

    @property
    def restart_time_to(self):
        """Gets the restart_time_to of this InstanceAutoscalingParameter.  # noqa: E501

        Restart time upper limit  # noqa: E501

        :return: The restart_time_to of this InstanceAutoscalingParameter.  # noqa: E501
        :rtype: NullableTime
        """
        return self._restart_time_to

    @restart_time_to.setter
    def restart_time_to(self, restart_time_to):
        """Sets the restart_time_to of this InstanceAutoscalingParameter.

        Restart time upper limit  # noqa: E501

        :param restart_time_to: The restart_time_to of this InstanceAutoscalingParameter.  # noqa: E501
        :type: NullableTime
        """

        self._restart_time_to = restart_time_to

    @property
    def time_zone_name(self):
        """Gets the time_zone_name of this InstanceAutoscalingParameter.  # noqa: E501

        Time zone name (https://www.iana.org/time-zones)  # noqa: E501

        :return: The time_zone_name of this InstanceAutoscalingParameter.  # noqa: E501
        :rtype: str
        """
        return self._time_zone_name

    @time_zone_name.setter
    def time_zone_name(self, time_zone_name):
        """Sets the time_zone_name of this InstanceAutoscalingParameter.

        Time zone name (https://www.iana.org/time-zones)  # noqa: E501

        :param time_zone_name: The time_zone_name of this InstanceAutoscalingParameter.  # noqa: E501
        :type: str
        """

        self._time_zone_name = time_zone_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstanceAutoscalingParameter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstanceAutoscalingParameter):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InstanceAutoscalingParameter):
            return True

        return self.to_dict() != other.to_dict()
