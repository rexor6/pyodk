# coding: utf-8

"""
    Oktawave API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pyodk.configuration import Configuration


class Ticket(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'creation_date': 'datetime',
        'creation_user': 'UserResource',
        'end_date': 'datetime',
        'status': 'DictionaryItem',
        'operation_type': 'DictionaryItem',
        'object_id': 'int',
        'object_type': 'DictionaryItem',
        'object_name': 'str',
        'progress': 'int'
    }

    attribute_map = {
        'id': 'Id',
        'creation_date': 'CreationDate',
        'creation_user': 'CreationUser',
        'end_date': 'EndDate',
        'status': 'Status',
        'operation_type': 'OperationType',
        'object_id': 'ObjectId',
        'object_type': 'ObjectType',
        'object_name': 'ObjectName',
        'progress': 'Progress'
    }

    def __init__(self, id=None, creation_date=None, creation_user=None, end_date=None, status=None, operation_type=None, object_id=None, object_type=None, object_name=None, progress=None, _configuration=None):  # noqa: E501
        """Ticket - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._creation_date = None
        self._creation_user = None
        self._end_date = None
        self._status = None
        self._operation_type = None
        self._object_id = None
        self._object_type = None
        self._object_name = None
        self._progress = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if creation_date is not None:
            self.creation_date = creation_date
        if creation_user is not None:
            self.creation_user = creation_user
        if end_date is not None:
            self.end_date = end_date
        if status is not None:
            self.status = status
        if operation_type is not None:
            self.operation_type = operation_type
        if object_id is not None:
            self.object_id = object_id
        if object_type is not None:
            self.object_type = object_type
        if object_name is not None:
            self.object_name = object_name
        if progress is not None:
            self.progress = progress

    @property
    def id(self):
        """Gets the id of this Ticket.  # noqa: E501

        ID  # noqa: E501

        :return: The id of this Ticket.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Ticket.

        ID  # noqa: E501

        :param id: The id of this Ticket.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def creation_date(self):
        """Gets the creation_date of this Ticket.  # noqa: E501

        Creation date  # noqa: E501

        :return: The creation_date of this Ticket.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Ticket.

        Creation date  # noqa: E501

        :param creation_date: The creation_date of this Ticket.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def creation_user(self):
        """Gets the creation_user of this Ticket.  # noqa: E501

        User who created the ticket  # noqa: E501

        :return: The creation_user of this Ticket.  # noqa: E501
        :rtype: UserResource
        """
        return self._creation_user

    @creation_user.setter
    def creation_user(self, creation_user):
        """Sets the creation_user of this Ticket.

        User who created the ticket  # noqa: E501

        :param creation_user: The creation_user of this Ticket.  # noqa: E501
        :type: UserResource
        """

        self._creation_user = creation_user

    @property
    def end_date(self):
        """Gets the end_date of this Ticket.  # noqa: E501

        End date of operation  # noqa: E501

        :return: The end_date of this Ticket.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Ticket.

        End date of operation  # noqa: E501

        :param end_date: The end_date of this Ticket.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def status(self):
        """Gets the status of this Ticket.  # noqa: E501

        Status  # noqa: E501

        :return: The status of this Ticket.  # noqa: E501
        :rtype: DictionaryItem
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Ticket.

        Status  # noqa: E501

        :param status: The status of this Ticket.  # noqa: E501
        :type: DictionaryItem
        """

        self._status = status

    @property
    def operation_type(self):
        """Gets the operation_type of this Ticket.  # noqa: E501

        Operation type  # noqa: E501

        :return: The operation_type of this Ticket.  # noqa: E501
        :rtype: DictionaryItem
        """
        return self._operation_type

    @operation_type.setter
    def operation_type(self, operation_type):
        """Sets the operation_type of this Ticket.

        Operation type  # noqa: E501

        :param operation_type: The operation_type of this Ticket.  # noqa: E501
        :type: DictionaryItem
        """

        self._operation_type = operation_type

    @property
    def object_id(self):
        """Gets the object_id of this Ticket.  # noqa: E501

        Object identifier on which the operation is performed  # noqa: E501

        :return: The object_id of this Ticket.  # noqa: E501
        :rtype: int
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this Ticket.

        Object identifier on which the operation is performed  # noqa: E501

        :param object_id: The object_id of this Ticket.  # noqa: E501
        :type: int
        """

        self._object_id = object_id

    @property
    def object_type(self):
        """Gets the object_type of this Ticket.  # noqa: E501

        Object type  # noqa: E501

        :return: The object_type of this Ticket.  # noqa: E501
        :rtype: DictionaryItem
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this Ticket.

        Object type  # noqa: E501

        :param object_type: The object_type of this Ticket.  # noqa: E501
        :type: DictionaryItem
        """

        self._object_type = object_type

    @property
    def object_name(self):
        """Gets the object_name of this Ticket.  # noqa: E501

        Object name  # noqa: E501

        :return: The object_name of this Ticket.  # noqa: E501
        :rtype: str
        """
        return self._object_name

    @object_name.setter
    def object_name(self, object_name):
        """Sets the object_name of this Ticket.

        Object name  # noqa: E501

        :param object_name: The object_name of this Ticket.  # noqa: E501
        :type: str
        """

        self._object_name = object_name

    @property
    def progress(self):
        """Gets the progress of this Ticket.  # noqa: E501

        Operation progress  # noqa: E501

        :return: The progress of this Ticket.  # noqa: E501
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this Ticket.

        Operation progress  # noqa: E501

        :param progress: The progress of this Ticket.  # noqa: E501
        :type: int
        """

        self._progress = progress

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Ticket, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Ticket):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Ticket):
            return True

        return self.to_dict() != other.to_dict()
