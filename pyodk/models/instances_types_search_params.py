# coding: utf-8

"""
    Oktawave API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pyodk.configuration import Configuration


class InstancesTypesSearchParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category_id': 'int',
        'available_for_freemium': 'bool',
        'page_size': 'int',
        'page_number': 'int',
        'order_by': 'str',
        'sort_expression': 'str',
        'sort_direction': 'str'
    }

    attribute_map = {
        'category_id': 'CategoryId',
        'available_for_freemium': 'AvailableForFreemium',
        'page_size': 'PageSize',
        'page_number': 'PageNumber',
        'order_by': 'OrderBy',
        'sort_expression': 'SortExpression',
        'sort_direction': 'SortDirection'
    }

    def __init__(self, category_id=None, available_for_freemium=None, page_size=None, page_number=None, order_by=None, sort_expression=None, sort_direction=None, _configuration=None):  # noqa: E501
        """InstancesTypesSearchParams - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._category_id = None
        self._available_for_freemium = None
        self._page_size = None
        self._page_number = None
        self._order_by = None
        self._sort_expression = None
        self._sort_direction = None
        self.discriminator = None

        if category_id is not None:
            self.category_id = category_id
        if available_for_freemium is not None:
            self.available_for_freemium = available_for_freemium
        if page_size is not None:
            self.page_size = page_size
        if page_number is not None:
            self.page_number = page_number
        if order_by is not None:
            self.order_by = order_by
        if sort_expression is not None:
            self.sort_expression = sort_expression
        if sort_direction is not None:
            self.sort_direction = sort_direction

    @property
    def category_id(self):
        """Gets the category_id of this InstancesTypesSearchParams.  # noqa: E501

        Category id  # noqa: E501

        :return: The category_id of this InstancesTypesSearchParams.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this InstancesTypesSearchParams.

        Category id  # noqa: E501

        :param category_id: The category_id of this InstancesTypesSearchParams.  # noqa: E501
        :type: int
        """

        self._category_id = category_id

    @property
    def available_for_freemium(self):
        """Gets the available_for_freemium of this InstancesTypesSearchParams.  # noqa: E501

        Is available for freemium  # noqa: E501

        :return: The available_for_freemium of this InstancesTypesSearchParams.  # noqa: E501
        :rtype: bool
        """
        return self._available_for_freemium

    @available_for_freemium.setter
    def available_for_freemium(self, available_for_freemium):
        """Sets the available_for_freemium of this InstancesTypesSearchParams.

        Is available for freemium  # noqa: E501

        :param available_for_freemium: The available_for_freemium of this InstancesTypesSearchParams.  # noqa: E501
        :type: bool
        """

        self._available_for_freemium = available_for_freemium

    @property
    def page_size(self):
        """Gets the page_size of this InstancesTypesSearchParams.  # noqa: E501

        Page size  # noqa: E501

        :return: The page_size of this InstancesTypesSearchParams.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this InstancesTypesSearchParams.

        Page size  # noqa: E501

        :param page_size: The page_size of this InstancesTypesSearchParams.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def page_number(self):
        """Gets the page_number of this InstancesTypesSearchParams.  # noqa: E501

        Page number  # noqa: E501

        :return: The page_number of this InstancesTypesSearchParams.  # noqa: E501
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this InstancesTypesSearchParams.

        Page number  # noqa: E501

        :param page_number: The page_number of this InstancesTypesSearchParams.  # noqa: E501
        :type: int
        """

        self._page_number = page_number

    @property
    def order_by(self):
        """Gets the order_by of this InstancesTypesSearchParams.  # noqa: E501

        Order by  # noqa: E501

        :return: The order_by of this InstancesTypesSearchParams.  # noqa: E501
        :rtype: str
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this InstancesTypesSearchParams.

        Order by  # noqa: E501

        :param order_by: The order_by of this InstancesTypesSearchParams.  # noqa: E501
        :type: str
        """

        self._order_by = order_by

    @property
    def sort_expression(self):
        """Gets the sort_expression of this InstancesTypesSearchParams.  # noqa: E501

        Sort expression  # noqa: E501

        :return: The sort_expression of this InstancesTypesSearchParams.  # noqa: E501
        :rtype: str
        """
        return self._sort_expression

    @sort_expression.setter
    def sort_expression(self, sort_expression):
        """Sets the sort_expression of this InstancesTypesSearchParams.

        Sort expression  # noqa: E501

        :param sort_expression: The sort_expression of this InstancesTypesSearchParams.  # noqa: E501
        :type: str
        """

        self._sort_expression = sort_expression

    @property
    def sort_direction(self):
        """Gets the sort_direction of this InstancesTypesSearchParams.  # noqa: E501

        Sort direction  # noqa: E501

        :return: The sort_direction of this InstancesTypesSearchParams.  # noqa: E501
        :rtype: str
        """
        return self._sort_direction

    @sort_direction.setter
    def sort_direction(self, sort_direction):
        """Sets the sort_direction of this InstancesTypesSearchParams.

        Sort direction  # noqa: E501

        :param sort_direction: The sort_direction of this InstancesTypesSearchParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["Descending", "Ascending"]  # noqa: E501
        if (self._configuration.client_side_validation and
                sort_direction not in allowed_values):
            raise ValueError(
                "Invalid value for `sort_direction` ({0}), must be one of {1}"  # noqa: E501
                .format(sort_direction, allowed_values)
            )

        self._sort_direction = sort_direction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstancesTypesSearchParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstancesTypesSearchParams):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InstancesTypesSearchParams):
            return True

        return self.to_dict() != other.to_dict()
