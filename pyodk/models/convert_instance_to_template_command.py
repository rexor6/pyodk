# coding: utf-8

"""
    Oktawave API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pyodk.configuration import Configuration


class ConvertInstanceToTemplateCommand(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'template_name': 'str',
        'template_descriptions': 'list[TemplateDescription]',
        'template_icon': 'TemplateIcon',
        'template_version': 'str',
        'template_system_category_id': 'int',
        'template_windows_type_id': 'int',
        'template_default_type_id': 'int',
        'template_minimum_type_id': 'int',
        'tech_support_password': 'str'
    }

    attribute_map = {
        'template_name': 'TemplateName',
        'template_descriptions': 'TemplateDescriptions',
        'template_icon': 'TemplateIcon',
        'template_version': 'TemplateVersion',
        'template_system_category_id': 'TemplateSystemCategoryId',
        'template_windows_type_id': 'TemplateWindowsTypeId',
        'template_default_type_id': 'TemplateDefaultTypeId',
        'template_minimum_type_id': 'TemplateMinimumTypeId',
        'tech_support_password': 'TechSupportPassword'
    }

    def __init__(self, template_name=None, template_descriptions=None, template_icon=None, template_version=None, template_system_category_id=None, template_windows_type_id=None, template_default_type_id=None, template_minimum_type_id=None, tech_support_password=None, _configuration=None):  # noqa: E501
        """ConvertInstanceToTemplateCommand - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._template_name = None
        self._template_descriptions = None
        self._template_icon = None
        self._template_version = None
        self._template_system_category_id = None
        self._template_windows_type_id = None
        self._template_default_type_id = None
        self._template_minimum_type_id = None
        self._tech_support_password = None
        self.discriminator = None

        self.template_name = template_name
        self.template_descriptions = template_descriptions
        if template_icon is not None:
            self.template_icon = template_icon
        self.template_version = template_version
        self.template_system_category_id = template_system_category_id
        if template_windows_type_id is not None:
            self.template_windows_type_id = template_windows_type_id
        self.template_default_type_id = template_default_type_id
        self.template_minimum_type_id = template_minimum_type_id
        if tech_support_password is not None:
            self.tech_support_password = tech_support_password

    @property
    def template_name(self):
        """Gets the template_name of this ConvertInstanceToTemplateCommand.  # noqa: E501

        Template name  # noqa: E501

        :return: The template_name of this ConvertInstanceToTemplateCommand.  # noqa: E501
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this ConvertInstanceToTemplateCommand.

        Template name  # noqa: E501

        :param template_name: The template_name of this ConvertInstanceToTemplateCommand.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and template_name is None:
            raise ValueError("Invalid value for `template_name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                template_name is not None and not re.search(r'^[^\/]*$', template_name)):  # noqa: E501
            raise ValueError(r"Invalid value for `template_name`, must be a follow pattern or equal to `/^[^\/]*$/`")  # noqa: E501

        self._template_name = template_name

    @property
    def template_descriptions(self):
        """Gets the template_descriptions of this ConvertInstanceToTemplateCommand.  # noqa: E501

        Template descriptions  # noqa: E501

        :return: The template_descriptions of this ConvertInstanceToTemplateCommand.  # noqa: E501
        :rtype: list[TemplateDescription]
        """
        return self._template_descriptions

    @template_descriptions.setter
    def template_descriptions(self, template_descriptions):
        """Sets the template_descriptions of this ConvertInstanceToTemplateCommand.

        Template descriptions  # noqa: E501

        :param template_descriptions: The template_descriptions of this ConvertInstanceToTemplateCommand.  # noqa: E501
        :type: list[TemplateDescription]
        """
        if self._configuration.client_side_validation and template_descriptions is None:
            raise ValueError("Invalid value for `template_descriptions`, must not be `None`")  # noqa: E501

        self._template_descriptions = template_descriptions

    @property
    def template_icon(self):
        """Gets the template_icon of this ConvertInstanceToTemplateCommand.  # noqa: E501

        Template icon  # noqa: E501

        :return: The template_icon of this ConvertInstanceToTemplateCommand.  # noqa: E501
        :rtype: TemplateIcon
        """
        return self._template_icon

    @template_icon.setter
    def template_icon(self, template_icon):
        """Sets the template_icon of this ConvertInstanceToTemplateCommand.

        Template icon  # noqa: E501

        :param template_icon: The template_icon of this ConvertInstanceToTemplateCommand.  # noqa: E501
        :type: TemplateIcon
        """

        self._template_icon = template_icon

    @property
    def template_version(self):
        """Gets the template_version of this ConvertInstanceToTemplateCommand.  # noqa: E501

        Template version  # noqa: E501

        :return: The template_version of this ConvertInstanceToTemplateCommand.  # noqa: E501
        :rtype: str
        """
        return self._template_version

    @template_version.setter
    def template_version(self, template_version):
        """Sets the template_version of this ConvertInstanceToTemplateCommand.

        Template version  # noqa: E501

        :param template_version: The template_version of this ConvertInstanceToTemplateCommand.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and template_version is None:
            raise ValueError("Invalid value for `template_version`, must not be `None`")  # noqa: E501

        self._template_version = template_version

    @property
    def template_system_category_id(self):
        """Gets the template_system_category_id of this ConvertInstanceToTemplateCommand.  # noqa: E501

        Template system category id  # noqa: E501

        :return: The template_system_category_id of this ConvertInstanceToTemplateCommand.  # noqa: E501
        :rtype: int
        """
        return self._template_system_category_id

    @template_system_category_id.setter
    def template_system_category_id(self, template_system_category_id):
        """Sets the template_system_category_id of this ConvertInstanceToTemplateCommand.

        Template system category id  # noqa: E501

        :param template_system_category_id: The template_system_category_id of this ConvertInstanceToTemplateCommand.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and template_system_category_id is None:
            raise ValueError("Invalid value for `template_system_category_id`, must not be `None`")  # noqa: E501

        self._template_system_category_id = template_system_category_id

    @property
    def template_windows_type_id(self):
        """Gets the template_windows_type_id of this ConvertInstanceToTemplateCommand.  # noqa: E501

        Template windows type id  # noqa: E501

        :return: The template_windows_type_id of this ConvertInstanceToTemplateCommand.  # noqa: E501
        :rtype: int
        """
        return self._template_windows_type_id

    @template_windows_type_id.setter
    def template_windows_type_id(self, template_windows_type_id):
        """Sets the template_windows_type_id of this ConvertInstanceToTemplateCommand.

        Template windows type id  # noqa: E501

        :param template_windows_type_id: The template_windows_type_id of this ConvertInstanceToTemplateCommand.  # noqa: E501
        :type: int
        """

        self._template_windows_type_id = template_windows_type_id

    @property
    def template_default_type_id(self):
        """Gets the template_default_type_id of this ConvertInstanceToTemplateCommand.  # noqa: E501

        Template default type id  # noqa: E501

        :return: The template_default_type_id of this ConvertInstanceToTemplateCommand.  # noqa: E501
        :rtype: int
        """
        return self._template_default_type_id

    @template_default_type_id.setter
    def template_default_type_id(self, template_default_type_id):
        """Sets the template_default_type_id of this ConvertInstanceToTemplateCommand.

        Template default type id  # noqa: E501

        :param template_default_type_id: The template_default_type_id of this ConvertInstanceToTemplateCommand.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and template_default_type_id is None:
            raise ValueError("Invalid value for `template_default_type_id`, must not be `None`")  # noqa: E501

        self._template_default_type_id = template_default_type_id

    @property
    def template_minimum_type_id(self):
        """Gets the template_minimum_type_id of this ConvertInstanceToTemplateCommand.  # noqa: E501

        Template minimum type id  # noqa: E501

        :return: The template_minimum_type_id of this ConvertInstanceToTemplateCommand.  # noqa: E501
        :rtype: int
        """
        return self._template_minimum_type_id

    @template_minimum_type_id.setter
    def template_minimum_type_id(self, template_minimum_type_id):
        """Sets the template_minimum_type_id of this ConvertInstanceToTemplateCommand.

        Template minimum type id  # noqa: E501

        :param template_minimum_type_id: The template_minimum_type_id of this ConvertInstanceToTemplateCommand.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and template_minimum_type_id is None:
            raise ValueError("Invalid value for `template_minimum_type_id`, must not be `None`")  # noqa: E501

        self._template_minimum_type_id = template_minimum_type_id

    @property
    def tech_support_password(self):
        """Gets the tech_support_password of this ConvertInstanceToTemplateCommand.  # noqa: E501

        Account 'tech-support' password. Required for templates with initialization  # noqa: E501

        :return: The tech_support_password of this ConvertInstanceToTemplateCommand.  # noqa: E501
        :rtype: str
        """
        return self._tech_support_password

    @tech_support_password.setter
    def tech_support_password(self, tech_support_password):
        """Sets the tech_support_password of this ConvertInstanceToTemplateCommand.

        Account 'tech-support' password. Required for templates with initialization  # noqa: E501

        :param tech_support_password: The tech_support_password of this ConvertInstanceToTemplateCommand.  # noqa: E501
        :type: str
        """

        self._tech_support_password = tech_support_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConvertInstanceToTemplateCommand, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConvertInstanceToTemplateCommand):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConvertInstanceToTemplateCommand):
            return True

        return self.to_dict() != other.to_dict()
