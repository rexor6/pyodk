# coding: utf-8

"""
    Oktawave API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pyodk.configuration import Configuration


class HealthCheckFullPage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'http_method': 'DictionaryItem',
        'content_regular_expression': 'str',
        'content_negative_regular_expression': 'str',
        'port': 'int',
        'page_timeout': 'int',
        'element_timeout': 'int',
        'elements_total_timeout': 'int',
        'fetch_page_elements': 'bool',
        'max_redirects': 'int',
        'max_parallel_requests': 'int',
        'generate_har': 'bool',
        'allowed_element_error_count': 'int',
        'content_size_limit': 'int',
        'ignore_html_parsing_time': 'bool',
        'save_cookies': 'bool',
        'disable_content_encoding': 'bool',
        'content': 'str',
        'content_type': 'str',
        'ignored_elements_filter': 'str',
        'elements_filter': 'str',
        'notification_types': 'list[DictionaryItem]',
        'notification_event_types': 'list[DictionaryItem]',
        'notification_time': 'DictionaryItem',
        'locations_failover_enabled': 'bool',
        'error_tolerance': 'int',
        'id': 'int',
        'interval': 'int',
        'name': 'str',
        'address': 'str',
        'service_type': 'DictionaryItem',
        'state': 'DictionaryItem',
        'details_location': 'str',
        'paused': 'bool',
        'suspended': 'bool',
        'last_invalid_check': 'datetime',
        'last_valid_check': 'datetime',
        'description': 'str'
    }

    attribute_map = {
        'http_method': 'HttpMethod',
        'content_regular_expression': 'ContentRegularExpression',
        'content_negative_regular_expression': 'ContentNegativeRegularExpression',
        'port': 'Port',
        'page_timeout': 'PageTimeout',
        'element_timeout': 'ElementTimeout',
        'elements_total_timeout': 'ElementsTotalTimeout',
        'fetch_page_elements': 'FetchPageElements',
        'max_redirects': 'MaxRedirects',
        'max_parallel_requests': 'MaxParallelRequests',
        'generate_har': 'GenerateHar',
        'allowed_element_error_count': 'AllowedElementErrorCount',
        'content_size_limit': 'ContentSizeLimit',
        'ignore_html_parsing_time': 'IgnoreHtmlParsingTime',
        'save_cookies': 'SaveCookies',
        'disable_content_encoding': 'DisableContentEncoding',
        'content': 'Content',
        'content_type': 'ContentType',
        'ignored_elements_filter': 'IgnoredElementsFilter',
        'elements_filter': 'ElementsFilter',
        'notification_types': 'NotificationTypes',
        'notification_event_types': 'NotificationEventTypes',
        'notification_time': 'NotificationTime',
        'locations_failover_enabled': 'LocationsFailoverEnabled',
        'error_tolerance': 'ErrorTolerance',
        'id': 'Id',
        'interval': 'Interval',
        'name': 'Name',
        'address': 'Address',
        'service_type': 'ServiceType',
        'state': 'State',
        'details_location': 'DetailsLocation',
        'paused': 'Paused',
        'suspended': 'Suspended',
        'last_invalid_check': 'LastInvalidCheck',
        'last_valid_check': 'LastValidCheck',
        'description': 'Description'
    }

    def __init__(self, http_method=None, content_regular_expression=None, content_negative_regular_expression=None, port=None, page_timeout=None, element_timeout=None, elements_total_timeout=None, fetch_page_elements=None, max_redirects=None, max_parallel_requests=None, generate_har=None, allowed_element_error_count=None, content_size_limit=None, ignore_html_parsing_time=None, save_cookies=None, disable_content_encoding=None, content=None, content_type=None, ignored_elements_filter=None, elements_filter=None, notification_types=None, notification_event_types=None, notification_time=None, locations_failover_enabled=None, error_tolerance=None, id=None, interval=None, name=None, address=None, service_type=None, state=None, details_location=None, paused=None, suspended=None, last_invalid_check=None, last_valid_check=None, description=None, _configuration=None):  # noqa: E501
        """HealthCheckFullPage - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._http_method = None
        self._content_regular_expression = None
        self._content_negative_regular_expression = None
        self._port = None
        self._page_timeout = None
        self._element_timeout = None
        self._elements_total_timeout = None
        self._fetch_page_elements = None
        self._max_redirects = None
        self._max_parallel_requests = None
        self._generate_har = None
        self._allowed_element_error_count = None
        self._content_size_limit = None
        self._ignore_html_parsing_time = None
        self._save_cookies = None
        self._disable_content_encoding = None
        self._content = None
        self._content_type = None
        self._ignored_elements_filter = None
        self._elements_filter = None
        self._notification_types = None
        self._notification_event_types = None
        self._notification_time = None
        self._locations_failover_enabled = None
        self._error_tolerance = None
        self._id = None
        self._interval = None
        self._name = None
        self._address = None
        self._service_type = None
        self._state = None
        self._details_location = None
        self._paused = None
        self._suspended = None
        self._last_invalid_check = None
        self._last_valid_check = None
        self._description = None
        self.discriminator = None

        if http_method is not None:
            self.http_method = http_method
        if content_regular_expression is not None:
            self.content_regular_expression = content_regular_expression
        if content_negative_regular_expression is not None:
            self.content_negative_regular_expression = content_negative_regular_expression
        if port is not None:
            self.port = port
        if page_timeout is not None:
            self.page_timeout = page_timeout
        if element_timeout is not None:
            self.element_timeout = element_timeout
        if elements_total_timeout is not None:
            self.elements_total_timeout = elements_total_timeout
        if fetch_page_elements is not None:
            self.fetch_page_elements = fetch_page_elements
        if max_redirects is not None:
            self.max_redirects = max_redirects
        if max_parallel_requests is not None:
            self.max_parallel_requests = max_parallel_requests
        if generate_har is not None:
            self.generate_har = generate_har
        if allowed_element_error_count is not None:
            self.allowed_element_error_count = allowed_element_error_count
        if content_size_limit is not None:
            self.content_size_limit = content_size_limit
        if ignore_html_parsing_time is not None:
            self.ignore_html_parsing_time = ignore_html_parsing_time
        if save_cookies is not None:
            self.save_cookies = save_cookies
        if disable_content_encoding is not None:
            self.disable_content_encoding = disable_content_encoding
        if content is not None:
            self.content = content
        if content_type is not None:
            self.content_type = content_type
        if ignored_elements_filter is not None:
            self.ignored_elements_filter = ignored_elements_filter
        if elements_filter is not None:
            self.elements_filter = elements_filter
        if notification_types is not None:
            self.notification_types = notification_types
        if notification_event_types is not None:
            self.notification_event_types = notification_event_types
        if notification_time is not None:
            self.notification_time = notification_time
        if locations_failover_enabled is not None:
            self.locations_failover_enabled = locations_failover_enabled
        if error_tolerance is not None:
            self.error_tolerance = error_tolerance
        if id is not None:
            self.id = id
        if interval is not None:
            self.interval = interval
        if name is not None:
            self.name = name
        if address is not None:
            self.address = address
        if service_type is not None:
            self.service_type = service_type
        if state is not None:
            self.state = state
        if details_location is not None:
            self.details_location = details_location
        if paused is not None:
            self.paused = paused
        if suspended is not None:
            self.suspended = suspended
        if last_invalid_check is not None:
            self.last_invalid_check = last_invalid_check
        if last_valid_check is not None:
            self.last_valid_check = last_valid_check
        if description is not None:
            self.description = description

    @property
    def http_method(self):
        """Gets the http_method of this HealthCheckFullPage.  # noqa: E501

        Health check http method type  # noqa: E501

        :return: The http_method of this HealthCheckFullPage.  # noqa: E501
        :rtype: DictionaryItem
        """
        return self._http_method

    @http_method.setter
    def http_method(self, http_method):
        """Sets the http_method of this HealthCheckFullPage.

        Health check http method type  # noqa: E501

        :param http_method: The http_method of this HealthCheckFullPage.  # noqa: E501
        :type: DictionaryItem
        """

        self._http_method = http_method

    @property
    def content_regular_expression(self):
        """Gets the content_regular_expression of this HealthCheckFullPage.  # noqa: E501

        The content has to match the expression (GET and POST methods only)  # noqa: E501

        :return: The content_regular_expression of this HealthCheckFullPage.  # noqa: E501
        :rtype: str
        """
        return self._content_regular_expression

    @content_regular_expression.setter
    def content_regular_expression(self, content_regular_expression):
        """Sets the content_regular_expression of this HealthCheckFullPage.

        The content has to match the expression (GET and POST methods only)  # noqa: E501

        :param content_regular_expression: The content_regular_expression of this HealthCheckFullPage.  # noqa: E501
        :type: str
        """

        self._content_regular_expression = content_regular_expression

    @property
    def content_negative_regular_expression(self):
        """Gets the content_negative_regular_expression of this HealthCheckFullPage.  # noqa: E501

        The content cannot match the expression (GET and POST methods only)  # noqa: E501

        :return: The content_negative_regular_expression of this HealthCheckFullPage.  # noqa: E501
        :rtype: str
        """
        return self._content_negative_regular_expression

    @content_negative_regular_expression.setter
    def content_negative_regular_expression(self, content_negative_regular_expression):
        """Sets the content_negative_regular_expression of this HealthCheckFullPage.

        The content cannot match the expression (GET and POST methods only)  # noqa: E501

        :param content_negative_regular_expression: The content_negative_regular_expression of this HealthCheckFullPage.  # noqa: E501
        :type: str
        """

        self._content_negative_regular_expression = content_negative_regular_expression

    @property
    def port(self):
        """Gets the port of this HealthCheckFullPage.  # noqa: E501

        Port  # noqa: E501

        :return: The port of this HealthCheckFullPage.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this HealthCheckFullPage.

        Port  # noqa: E501

        :param port: The port of this HealthCheckFullPage.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def page_timeout(self):
        """Gets the page_timeout of this HealthCheckFullPage.  # noqa: E501

        Time limit for the main page body [ms]  # noqa: E501

        :return: The page_timeout of this HealthCheckFullPage.  # noqa: E501
        :rtype: int
        """
        return self._page_timeout

    @page_timeout.setter
    def page_timeout(self, page_timeout):
        """Sets the page_timeout of this HealthCheckFullPage.

        Time limit for the main page body [ms]  # noqa: E501

        :param page_timeout: The page_timeout of this HealthCheckFullPage.  # noqa: E501
        :type: int
        """

        self._page_timeout = page_timeout

    @property
    def element_timeout(self):
        """Gets the element_timeout of this HealthCheckFullPage.  # noqa: E501

        Time limit for each page elements [ms]  # noqa: E501

        :return: The element_timeout of this HealthCheckFullPage.  # noqa: E501
        :rtype: int
        """
        return self._element_timeout

    @element_timeout.setter
    def element_timeout(self, element_timeout):
        """Sets the element_timeout of this HealthCheckFullPage.

        Time limit for each page elements [ms]  # noqa: E501

        :param element_timeout: The element_timeout of this HealthCheckFullPage.  # noqa: E501
        :type: int
        """

        self._element_timeout = element_timeout

    @property
    def elements_total_timeout(self):
        """Gets the elements_total_timeout of this HealthCheckFullPage.  # noqa: E501

        Time limit for all page elements [ms]  # noqa: E501

        :return: The elements_total_timeout of this HealthCheckFullPage.  # noqa: E501
        :rtype: int
        """
        return self._elements_total_timeout

    @elements_total_timeout.setter
    def elements_total_timeout(self, elements_total_timeout):
        """Sets the elements_total_timeout of this HealthCheckFullPage.

        Time limit for all page elements [ms]  # noqa: E501

        :param elements_total_timeout: The elements_total_timeout of this HealthCheckFullPage.  # noqa: E501
        :type: int
        """

        self._elements_total_timeout = elements_total_timeout

    @property
    def fetch_page_elements(self):
        """Gets the fetch_page_elements of this HealthCheckFullPage.  # noqa: E501

        Fetch page elements  # noqa: E501

        :return: The fetch_page_elements of this HealthCheckFullPage.  # noqa: E501
        :rtype: bool
        """
        return self._fetch_page_elements

    @fetch_page_elements.setter
    def fetch_page_elements(self, fetch_page_elements):
        """Sets the fetch_page_elements of this HealthCheckFullPage.

        Fetch page elements  # noqa: E501

        :param fetch_page_elements: The fetch_page_elements of this HealthCheckFullPage.  # noqa: E501
        :type: bool
        """

        self._fetch_page_elements = fetch_page_elements

    @property
    def max_redirects(self):
        """Gets the max_redirects of this HealthCheckFullPage.  # noqa: E501

        Maximum length of HTTP redirects sequence  # noqa: E501

        :return: The max_redirects of this HealthCheckFullPage.  # noqa: E501
        :rtype: int
        """
        return self._max_redirects

    @max_redirects.setter
    def max_redirects(self, max_redirects):
        """Sets the max_redirects of this HealthCheckFullPage.

        Maximum length of HTTP redirects sequence  # noqa: E501

        :param max_redirects: The max_redirects of this HealthCheckFullPage.  # noqa: E501
        :type: int
        """

        self._max_redirects = max_redirects

    @property
    def max_parallel_requests(self):
        """Gets the max_parallel_requests of this HealthCheckFullPage.  # noqa: E501

        Maximum number of HTTP requests run in parallel  # noqa: E501

        :return: The max_parallel_requests of this HealthCheckFullPage.  # noqa: E501
        :rtype: int
        """
        return self._max_parallel_requests

    @max_parallel_requests.setter
    def max_parallel_requests(self, max_parallel_requests):
        """Sets the max_parallel_requests of this HealthCheckFullPage.

        Maximum number of HTTP requests run in parallel  # noqa: E501

        :param max_parallel_requests: The max_parallel_requests of this HealthCheckFullPage.  # noqa: E501
        :type: int
        """

        self._max_parallel_requests = max_parallel_requests

    @property
    def generate_har(self):
        """Gets the generate_har of this HealthCheckFullPage.  # noqa: E501

        Generate a HAR file for each check  # noqa: E501

        :return: The generate_har of this HealthCheckFullPage.  # noqa: E501
        :rtype: bool
        """
        return self._generate_har

    @generate_har.setter
    def generate_har(self, generate_har):
        """Sets the generate_har of this HealthCheckFullPage.

        Generate a HAR file for each check  # noqa: E501

        :param generate_har: The generate_har of this HealthCheckFullPage.  # noqa: E501
        :type: bool
        """

        self._generate_har = generate_har

    @property
    def allowed_element_error_count(self):
        """Gets the allowed_element_error_count of this HealthCheckFullPage.  # noqa: E501

        Number of elements that may not be fetched correctly  # noqa: E501

        :return: The allowed_element_error_count of this HealthCheckFullPage.  # noqa: E501
        :rtype: int
        """
        return self._allowed_element_error_count

    @allowed_element_error_count.setter
    def allowed_element_error_count(self, allowed_element_error_count):
        """Sets the allowed_element_error_count of this HealthCheckFullPage.

        Number of elements that may not be fetched correctly  # noqa: E501

        :param allowed_element_error_count: The allowed_element_error_count of this HealthCheckFullPage.  # noqa: E501
        :type: int
        """

        self._allowed_element_error_count = allowed_element_error_count

    @property
    def content_size_limit(self):
        """Gets the content_size_limit of this HealthCheckFullPage.  # noqa: E501

        Content size limit (bytes)  # noqa: E501

        :return: The content_size_limit of this HealthCheckFullPage.  # noqa: E501
        :rtype: int
        """
        return self._content_size_limit

    @content_size_limit.setter
    def content_size_limit(self, content_size_limit):
        """Sets the content_size_limit of this HealthCheckFullPage.

        Content size limit (bytes)  # noqa: E501

        :param content_size_limit: The content_size_limit of this HealthCheckFullPage.  # noqa: E501
        :type: int
        """

        self._content_size_limit = content_size_limit

    @property
    def ignore_html_parsing_time(self):
        """Gets the ignore_html_parsing_time of this HealthCheckFullPage.  # noqa: E501

        Ignore HTML code processing time in results  # noqa: E501

        :return: The ignore_html_parsing_time of this HealthCheckFullPage.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_html_parsing_time

    @ignore_html_parsing_time.setter
    def ignore_html_parsing_time(self, ignore_html_parsing_time):
        """Sets the ignore_html_parsing_time of this HealthCheckFullPage.

        Ignore HTML code processing time in results  # noqa: E501

        :param ignore_html_parsing_time: The ignore_html_parsing_time of this HealthCheckFullPage.  # noqa: E501
        :type: bool
        """

        self._ignore_html_parsing_time = ignore_html_parsing_time

    @property
    def save_cookies(self):
        """Gets the save_cookies of this HealthCheckFullPage.  # noqa: E501

        Save cookies between checks  # noqa: E501

        :return: The save_cookies of this HealthCheckFullPage.  # noqa: E501
        :rtype: bool
        """
        return self._save_cookies

    @save_cookies.setter
    def save_cookies(self, save_cookies):
        """Sets the save_cookies of this HealthCheckFullPage.

        Save cookies between checks  # noqa: E501

        :param save_cookies: The save_cookies of this HealthCheckFullPage.  # noqa: E501
        :type: bool
        """

        self._save_cookies = save_cookies

    @property
    def disable_content_encoding(self):
        """Gets the disable_content_encoding of this HealthCheckFullPage.  # noqa: E501

        Disable HTTP transfer compression  # noqa: E501

        :return: The disable_content_encoding of this HealthCheckFullPage.  # noqa: E501
        :rtype: bool
        """
        return self._disable_content_encoding

    @disable_content_encoding.setter
    def disable_content_encoding(self, disable_content_encoding):
        """Sets the disable_content_encoding of this HealthCheckFullPage.

        Disable HTTP transfer compression  # noqa: E501

        :param disable_content_encoding: The disable_content_encoding of this HealthCheckFullPage.  # noqa: E501
        :type: bool
        """

        self._disable_content_encoding = disable_content_encoding

    @property
    def content(self):
        """Gets the content of this HealthCheckFullPage.  # noqa: E501

        Content  # noqa: E501

        :return: The content of this HealthCheckFullPage.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this HealthCheckFullPage.

        Content  # noqa: E501

        :param content: The content of this HealthCheckFullPage.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def content_type(self):
        """Gets the content_type of this HealthCheckFullPage.  # noqa: E501

        Content type  # noqa: E501

        :return: The content_type of this HealthCheckFullPage.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this HealthCheckFullPage.

        Content type  # noqa: E501

        :param content_type: The content_type of this HealthCheckFullPage.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def ignored_elements_filter(self):
        """Gets the ignored_elements_filter of this HealthCheckFullPage.  # noqa: E501

        Ignore errors for elements with URLs matching the expression (only if page elements are fetched)  # noqa: E501

        :return: The ignored_elements_filter of this HealthCheckFullPage.  # noqa: E501
        :rtype: str
        """
        return self._ignored_elements_filter

    @ignored_elements_filter.setter
    def ignored_elements_filter(self, ignored_elements_filter):
        """Sets the ignored_elements_filter of this HealthCheckFullPage.

        Ignore errors for elements with URLs matching the expression (only if page elements are fetched)  # noqa: E501

        :param ignored_elements_filter: The ignored_elements_filter of this HealthCheckFullPage.  # noqa: E501
        :type: str
        """

        self._ignored_elements_filter = ignored_elements_filter

    @property
    def elements_filter(self):
        """Gets the elements_filter of this HealthCheckFullPage.  # noqa: E501

        Do not fetch elements with URLs that match the expression  # noqa: E501

        :return: The elements_filter of this HealthCheckFullPage.  # noqa: E501
        :rtype: str
        """
        return self._elements_filter

    @elements_filter.setter
    def elements_filter(self, elements_filter):
        """Sets the elements_filter of this HealthCheckFullPage.

        Do not fetch elements with URLs that match the expression  # noqa: E501

        :param elements_filter: The elements_filter of this HealthCheckFullPage.  # noqa: E501
        :type: str
        """

        self._elements_filter = elements_filter

    @property
    def notification_types(self):
        """Gets the notification_types of this HealthCheckFullPage.  # noqa: E501

        Notification types enabled for a health check  # noqa: E501

        :return: The notification_types of this HealthCheckFullPage.  # noqa: E501
        :rtype: list[DictionaryItem]
        """
        return self._notification_types

    @notification_types.setter
    def notification_types(self, notification_types):
        """Sets the notification_types of this HealthCheckFullPage.

        Notification types enabled for a health check  # noqa: E501

        :param notification_types: The notification_types of this HealthCheckFullPage.  # noqa: E501
        :type: list[DictionaryItem]
        """

        self._notification_types = notification_types

    @property
    def notification_event_types(self):
        """Gets the notification_event_types of this HealthCheckFullPage.  # noqa: E501

        Event types with enabled notification  # noqa: E501

        :return: The notification_event_types of this HealthCheckFullPage.  # noqa: E501
        :rtype: list[DictionaryItem]
        """
        return self._notification_event_types

    @notification_event_types.setter
    def notification_event_types(self, notification_event_types):
        """Sets the notification_event_types of this HealthCheckFullPage.

        Event types with enabled notification  # noqa: E501

        :param notification_event_types: The notification_event_types of this HealthCheckFullPage.  # noqa: E501
        :type: list[DictionaryItem]
        """

        self._notification_event_types = notification_event_types

    @property
    def notification_time(self):
        """Gets the notification_time of this HealthCheckFullPage.  # noqa: E501

        Time when notification is sent  # noqa: E501

        :return: The notification_time of this HealthCheckFullPage.  # noqa: E501
        :rtype: DictionaryItem
        """
        return self._notification_time

    @notification_time.setter
    def notification_time(self, notification_time):
        """Sets the notification_time of this HealthCheckFullPage.

        Time when notification is sent  # noqa: E501

        :param notification_time: The notification_time of this HealthCheckFullPage.  # noqa: E501
        :type: DictionaryItem
        """

        self._notification_time = notification_time

    @property
    def locations_failover_enabled(self):
        """Gets the locations_failover_enabled of this HealthCheckFullPage.  # noqa: E501

        Use random substitute locations in case of location breakdown  # noqa: E501

        :return: The locations_failover_enabled of this HealthCheckFullPage.  # noqa: E501
        :rtype: bool
        """
        return self._locations_failover_enabled

    @locations_failover_enabled.setter
    def locations_failover_enabled(self, locations_failover_enabled):
        """Sets the locations_failover_enabled of this HealthCheckFullPage.

        Use random substitute locations in case of location breakdown  # noqa: E501

        :param locations_failover_enabled: The locations_failover_enabled of this HealthCheckFullPage.  # noqa: E501
        :type: bool
        """

        self._locations_failover_enabled = locations_failover_enabled

    @property
    def error_tolerance(self):
        """Gets the error_tolerance of this HealthCheckFullPage.  # noqa: E501

        How many (%) locations have to report an error to consider it a breakdown  # noqa: E501

        :return: The error_tolerance of this HealthCheckFullPage.  # noqa: E501
        :rtype: int
        """
        return self._error_tolerance

    @error_tolerance.setter
    def error_tolerance(self, error_tolerance):
        """Sets the error_tolerance of this HealthCheckFullPage.

        How many (%) locations have to report an error to consider it a breakdown  # noqa: E501

        :param error_tolerance: The error_tolerance of this HealthCheckFullPage.  # noqa: E501
        :type: int
        """

        self._error_tolerance = error_tolerance

    @property
    def id(self):
        """Gets the id of this HealthCheckFullPage.  # noqa: E501

        Id  # noqa: E501

        :return: The id of this HealthCheckFullPage.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HealthCheckFullPage.

        Id  # noqa: E501

        :param id: The id of this HealthCheckFullPage.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def interval(self):
        """Gets the interval of this HealthCheckFullPage.  # noqa: E501

        Interval  # noqa: E501

        :return: The interval of this HealthCheckFullPage.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this HealthCheckFullPage.

        Interval  # noqa: E501

        :param interval: The interval of this HealthCheckFullPage.  # noqa: E501
        :type: int
        """

        self._interval = interval

    @property
    def name(self):
        """Gets the name of this HealthCheckFullPage.  # noqa: E501

        Name  # noqa: E501

        :return: The name of this HealthCheckFullPage.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HealthCheckFullPage.

        Name  # noqa: E501

        :param name: The name of this HealthCheckFullPage.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def address(self):
        """Gets the address of this HealthCheckFullPage.  # noqa: E501

        Address  # noqa: E501

        :return: The address of this HealthCheckFullPage.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this HealthCheckFullPage.

        Address  # noqa: E501

        :param address: The address of this HealthCheckFullPage.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def service_type(self):
        """Gets the service_type of this HealthCheckFullPage.  # noqa: E501

        Type  # noqa: E501

        :return: The service_type of this HealthCheckFullPage.  # noqa: E501
        :rtype: DictionaryItem
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this HealthCheckFullPage.

        Type  # noqa: E501

        :param service_type: The service_type of this HealthCheckFullPage.  # noqa: E501
        :type: DictionaryItem
        """

        self._service_type = service_type

    @property
    def state(self):
        """Gets the state of this HealthCheckFullPage.  # noqa: E501

        State  # noqa: E501

        :return: The state of this HealthCheckFullPage.  # noqa: E501
        :rtype: DictionaryItem
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this HealthCheckFullPage.

        State  # noqa: E501

        :param state: The state of this HealthCheckFullPage.  # noqa: E501
        :type: DictionaryItem
        """

        self._state = state

    @property
    def details_location(self):
        """Gets the details_location of this HealthCheckFullPage.  # noqa: E501

        Details url  # noqa: E501

        :return: The details_location of this HealthCheckFullPage.  # noqa: E501
        :rtype: str
        """
        return self._details_location

    @details_location.setter
    def details_location(self, details_location):
        """Sets the details_location of this HealthCheckFullPage.

        Details url  # noqa: E501

        :param details_location: The details_location of this HealthCheckFullPage.  # noqa: E501
        :type: str
        """

        self._details_location = details_location

    @property
    def paused(self):
        """Gets the paused of this HealthCheckFullPage.  # noqa: E501

        Is paused  # noqa: E501

        :return: The paused of this HealthCheckFullPage.  # noqa: E501
        :rtype: bool
        """
        return self._paused

    @paused.setter
    def paused(self, paused):
        """Sets the paused of this HealthCheckFullPage.

        Is paused  # noqa: E501

        :param paused: The paused of this HealthCheckFullPage.  # noqa: E501
        :type: bool
        """

        self._paused = paused

    @property
    def suspended(self):
        """Gets the suspended of this HealthCheckFullPage.  # noqa: E501

        Is suspended  # noqa: E501

        :return: The suspended of this HealthCheckFullPage.  # noqa: E501
        :rtype: bool
        """
        return self._suspended

    @suspended.setter
    def suspended(self, suspended):
        """Sets the suspended of this HealthCheckFullPage.

        Is suspended  # noqa: E501

        :param suspended: The suspended of this HealthCheckFullPage.  # noqa: E501
        :type: bool
        """

        self._suspended = suspended

    @property
    def last_invalid_check(self):
        """Gets the last_invalid_check of this HealthCheckFullPage.  # noqa: E501

        Last invalid check  # noqa: E501

        :return: The last_invalid_check of this HealthCheckFullPage.  # noqa: E501
        :rtype: datetime
        """
        return self._last_invalid_check

    @last_invalid_check.setter
    def last_invalid_check(self, last_invalid_check):
        """Sets the last_invalid_check of this HealthCheckFullPage.

        Last invalid check  # noqa: E501

        :param last_invalid_check: The last_invalid_check of this HealthCheckFullPage.  # noqa: E501
        :type: datetime
        """

        self._last_invalid_check = last_invalid_check

    @property
    def last_valid_check(self):
        """Gets the last_valid_check of this HealthCheckFullPage.  # noqa: E501

        Last valid check  # noqa: E501

        :return: The last_valid_check of this HealthCheckFullPage.  # noqa: E501
        :rtype: datetime
        """
        return self._last_valid_check

    @last_valid_check.setter
    def last_valid_check(self, last_valid_check):
        """Sets the last_valid_check of this HealthCheckFullPage.

        Last valid check  # noqa: E501

        :param last_valid_check: The last_valid_check of this HealthCheckFullPage.  # noqa: E501
        :type: datetime
        """

        self._last_valid_check = last_valid_check

    @property
    def description(self):
        """Gets the description of this HealthCheckFullPage.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this HealthCheckFullPage.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this HealthCheckFullPage.

        Description  # noqa: E501

        :param description: The description of this HealthCheckFullPage.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HealthCheckFullPage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HealthCheckFullPage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HealthCheckFullPage):
            return True

        return self.to_dict() != other.to_dict()
