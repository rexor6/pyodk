# coding: utf-8

"""
    Oktawave API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyodk.api_client import ApiClient


class OCIInterfacesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def instances_attach_opn(self, id, command, **kwargs):  # noqa: E501
        """Attach instance to OPN  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_attach_opn(id, command, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Instance identifier (required)
        :param AttachInstanceToOpnCommand command: Attach instance to OPN command (required)
        :return: Ticket
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instances_attach_opn_with_http_info(id, command, **kwargs)  # noqa: E501
        else:
            (data) = self.instances_attach_opn_with_http_info(id, command, **kwargs)  # noqa: E501
            return data

    def instances_attach_opn_with_http_info(self, id, command, **kwargs):  # noqa: E501
        """Attach instance to OPN  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_attach_opn_with_http_info(id, command, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Instance identifier (required)
        :param AttachInstanceToOpnCommand command: Attach instance to OPN command (required)
        :return: Ticket
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'command']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instances_attach_opn" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `instances_attach_opn`")  # noqa: E501
        # verify the required parameter 'command' is set
        if self.api_client.client_side_validation and ('command' not in params or
                                                       params['command'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `command` when calling `instances_attach_opn`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'command' in params:
            body_params = params['command']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/instances/{id}/attach_opn_ticket', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Ticket',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def instances_book_new_ip(self, command, **kwargs):  # noqa: E501
        """Book new IP address  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_book_new_ip(command, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BookIpCommand command:  (required)
        :return: Ip
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instances_book_new_ip_with_http_info(command, **kwargs)  # noqa: E501
        else:
            (data) = self.instances_book_new_ip_with_http_info(command, **kwargs)  # noqa: E501
            return data

    def instances_book_new_ip_with_http_info(self, command, **kwargs):  # noqa: E501
        """Book new IP address  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_book_new_ip_with_http_info(command, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BookIpCommand command:  (required)
        :return: Ip
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['command']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instances_book_new_ip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'command' is set
        if self.api_client.client_side_validation and ('command' not in params or
                                                       params['command'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `command` when calling `instances_book_new_ip`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'command' in params:
            body_params = params['command']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/instances/ip_addresses', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Ip',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def instances_change_opn(self, id, command, **kwargs):  # noqa: E501
        """Change OPN on network interface  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_change_opn(id, command, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Instance identifier (required)
        :param ChangeOpnCommand command: Change OPN command (required)
        :return: Ticket
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instances_change_opn_with_http_info(id, command, **kwargs)  # noqa: E501
        else:
            (data) = self.instances_change_opn_with_http_info(id, command, **kwargs)  # noqa: E501
            return data

    def instances_change_opn_with_http_info(self, id, command, **kwargs):  # noqa: E501
        """Change OPN on network interface  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_change_opn_with_http_info(id, command, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Instance identifier (required)
        :param ChangeOpnCommand command: Change OPN command (required)
        :return: Ticket
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'command']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instances_change_opn" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `instances_change_opn`")  # noqa: E501
        # verify the required parameter 'command' is set
        if self.api_client.client_side_validation and ('command' not in params or
                                                       params['command'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `command` when calling `instances_change_opn`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'command' in params:
            body_params = params['command']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/instances/{id}/change_opn_ticket', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Ticket',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def instances_delete_ip(self, id, **kwargs):  # noqa: E501
        """Deletes IP address  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_delete_ip(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: IP address identifier (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instances_delete_ip_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.instances_delete_ip_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def instances_delete_ip_with_http_info(self, id, **kwargs):  # noqa: E501
        """Deletes IP address  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_delete_ip_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: IP address identifier (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instances_delete_ip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `instances_delete_ip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/instances/ip_addresses/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def instances_detach_from_opn(self, id, command, **kwargs):  # noqa: E501
        """Detach instance from OPN  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_detach_from_opn(id, command, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Instance identifier (required)
        :param DetachInstanceFromOpnCommand command: Detach instance from OPN command (required)
        :return: Ticket
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instances_detach_from_opn_with_http_info(id, command, **kwargs)  # noqa: E501
        else:
            (data) = self.instances_detach_from_opn_with_http_info(id, command, **kwargs)  # noqa: E501
            return data

    def instances_detach_from_opn_with_http_info(self, id, command, **kwargs):  # noqa: E501
        """Detach instance from OPN  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_detach_from_opn_with_http_info(id, command, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Instance identifier (required)
        :param DetachInstanceFromOpnCommand command: Detach instance from OPN command (required)
        :return: Ticket
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'command']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instances_detach_from_opn" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `instances_detach_from_opn`")  # noqa: E501
        # verify the required parameter 'command' is set
        if self.api_client.client_side_validation and ('command' not in params or
                                                       params['command'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `command` when calling `instances_detach_from_opn`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'command' in params:
            body_params = params['command']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/instances/{id}/detach_opn_ticket', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Ticket',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def instances_get_all_network_interfaces(self, **kwargs):  # noqa: E501
        """Returns all network interfaces  # noqa: E501

        Acceptable order values are: MacAddress, Instance, Opn, Address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_get_all_network_interfaces(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: Page size
        :param int page_number: Page number
        :param str order_by: Order by
        :param str fields: Response fields filter
        :return: NetworkInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instances_get_all_network_interfaces_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.instances_get_all_network_interfaces_with_http_info(**kwargs)  # noqa: E501
            return data

    def instances_get_all_network_interfaces_with_http_info(self, **kwargs):  # noqa: E501
        """Returns all network interfaces  # noqa: E501

        Acceptable order values are: MacAddress, Instance, Opn, Address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_get_all_network_interfaces_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: Page size
        :param int page_number: Page number
        :param str order_by: Order by
        :param str fields: Response fields filter
        :return: NetworkInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_size', 'page_number', 'order_by', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instances_get_all_network_interfaces" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/instances/interfaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def instances_get_instance_ip(self, id, **kwargs):  # noqa: E501
        """Returns IP by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_get_instance_ip(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id:  (required)
        :param str fields: Response fields filter
        :return: Ip
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instances_get_instance_ip_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.instances_get_instance_ip_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def instances_get_instance_ip_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns IP by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_get_instance_ip_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id:  (required)
        :param str fields: Response fields filter
        :return: Ip
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instances_get_instance_ip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `instances_get_instance_ip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/instances/ip_addresses/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Ip',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def instances_get_instance_ips(self, id, **kwargs):  # noqa: E501
        """Returns instance public ip list  # noqa: E501

        Acceptable order values are: Address, Subregion, Comment, Type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_get_instance_ips(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Instance id (required)
        :param int page_size: Page size
        :param int page_number: Page number
        :param str order_by: Order by
        :param str fields: Response fields filter
        :return: ApiCollectionIp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instances_get_instance_ips_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.instances_get_instance_ips_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def instances_get_instance_ips_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns instance public ip list  # noqa: E501

        Acceptable order values are: Address, Subregion, Comment, Type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_get_instance_ips_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Instance id (required)
        :param int page_size: Page size
        :param int page_number: Page number
        :param str order_by: Order by
        :param str fields: Response fields filter
        :return: ApiCollectionIp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'page_size', 'page_number', 'order_by', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instances_get_instance_ips" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `instances_get_instance_ips`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/instances/{id}/ip_addresses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiCollectionIp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def instances_get_instance_network_interfaces(self, id, **kwargs):  # noqa: E501
        """Returns instance network interfaces  # noqa: E501

        Acceptable order values are: MacAddress, Instance, Opn, Address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_get_instance_network_interfaces(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Instance id (required)
        :param int page_size: Page size
        :param int page_number: Page number
        :param str order_by: Order by
        :param str fields: Response fields filter
        :return: NetworkInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instances_get_instance_network_interfaces_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.instances_get_instance_network_interfaces_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def instances_get_instance_network_interfaces_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns instance network interfaces  # noqa: E501

        Acceptable order values are: MacAddress, Instance, Opn, Address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_get_instance_network_interfaces_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Instance id (required)
        :param int page_size: Page size
        :param int page_number: Page number
        :param str order_by: Order by
        :param str fields: Response fields filter
        :return: NetworkInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'page_size', 'page_number', 'order_by', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instances_get_instance_network_interfaces" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `instances_get_instance_network_interfaces`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/instances/{id}/interfaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def instances_get_ips(self, **kwargs):  # noqa: E501
        """Returns public ip list  # noqa: E501

        Acceptable order values are: Address, Subregion, Comment, Type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_get_ips(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int instance_id: Instance id
        :param bool only_free: Only free
        :param int page_size: Page size
        :param int page_number: Page number
        :param str order_by: Order by
        :param str fields: Response fields filter
        :return: ApiCollectionIp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instances_get_ips_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.instances_get_ips_with_http_info(**kwargs)  # noqa: E501
            return data

    def instances_get_ips_with_http_info(self, **kwargs):  # noqa: E501
        """Returns public ip list  # noqa: E501

        Acceptable order values are: Address, Subregion, Comment, Type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_get_ips_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int instance_id: Instance id
        :param bool only_free: Only free
        :param int page_size: Page size
        :param int page_number: Page number
        :param str order_by: Order by
        :param str fields: Response fields filter
        :return: ApiCollectionIp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_id', 'only_free', 'page_size', 'page_number', 'order_by', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instances_get_ips" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'instance_id' in params:
            query_params.append(('instanceId', params['instance_id']))  # noqa: E501
        if 'only_free' in params:
            query_params.append(('onlyFree', params['only_free']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/instances/ip_addresses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiCollectionIp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def instances_get_opns(self, id, **kwargs):  # noqa: E501
        """Returns instance OPN's  # noqa: E501

        Acceptable order values are: Name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_get_opns(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Instance id (required)
        :param str query: Query
        :param int page_size: Page size
        :param int page_number: Page number
        :param str order_by: Order by
        :param str fields: Response fields filter
        :return: ApiCollectionOpn
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instances_get_opns_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.instances_get_opns_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def instances_get_opns_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns instance OPN's  # noqa: E501

        Acceptable order values are: Name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_get_opns_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Instance id (required)
        :param str query: Query
        :param int page_size: Page size
        :param int page_number: Page number
        :param str order_by: Order by
        :param str fields: Response fields filter
        :return: ApiCollectionOpn
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'query', 'page_size', 'page_number', 'order_by', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instances_get_opns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `instances_get_opns`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/instances/{id}/opns', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiCollectionOpn',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def instances_post_attach_ip_ticket(self, id, **kwargs):  # noqa: E501
        """Attach public IP to instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_post_attach_ip_ticket(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Instance identifier (required)
        :param int ip_id: IP address identifier. Optional value, if null random ip will be attached.
        :param bool ip_v6: If attach IPv6 only. Optional value, if null IPv4 and IPv6 will be attached.
        :return: Ticket
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instances_post_attach_ip_ticket_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.instances_post_attach_ip_ticket_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def instances_post_attach_ip_ticket_with_http_info(self, id, **kwargs):  # noqa: E501
        """Attach public IP to instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_post_attach_ip_ticket_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Instance identifier (required)
        :param int ip_id: IP address identifier. Optional value, if null random ip will be attached.
        :param bool ip_v6: If attach IPv6 only. Optional value, if null IPv4 and IPv6 will be attached.
        :return: Ticket
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'ip_id', 'ip_v6']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instances_post_attach_ip_ticket" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `instances_post_attach_ip_ticket`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'ip_id' in params:
            query_params.append(('ipId', params['ip_id']))  # noqa: E501
        if 'ip_v6' in params:
            query_params.append(('ipV6', params['ip_v6']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/instances/{id}/attach_ip_ticket', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Ticket',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def instances_post_detach_ip_ticket(self, id, ip_id, **kwargs):  # noqa: E501
        """Detach public IP from instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_post_detach_ip_ticket(id, ip_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Instance identifier (required)
        :param int ip_id: IP address identifier (required)
        :return: Ticket
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instances_post_detach_ip_ticket_with_http_info(id, ip_id, **kwargs)  # noqa: E501
        else:
            (data) = self.instances_post_detach_ip_ticket_with_http_info(id, ip_id, **kwargs)  # noqa: E501
            return data

    def instances_post_detach_ip_ticket_with_http_info(self, id, ip_id, **kwargs):  # noqa: E501
        """Detach public IP from instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_post_detach_ip_ticket_with_http_info(id, ip_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Instance identifier (required)
        :param int ip_id: IP address identifier (required)
        :return: Ticket
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'ip_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instances_post_detach_ip_ticket" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `instances_post_detach_ip_ticket`")  # noqa: E501
        # verify the required parameter 'ip_id' is set
        if self.api_client.client_side_validation and ('ip_id' not in params or
                                                       params['ip_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ip_id` when calling `instances_post_detach_ip_ticket`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'ip_id' in params:
            query_params.append(('ipId', params['ip_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/instances/{id}/detach_ip_ticket', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Ticket',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def instances_update_ip(self, id, command, **kwargs):  # noqa: E501
        """Updates IP address  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_update_ip(id, command, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id:  (required)
        :param UpdateIpCommand command:  (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instances_update_ip_with_http_info(id, command, **kwargs)  # noqa: E501
        else:
            (data) = self.instances_update_ip_with_http_info(id, command, **kwargs)  # noqa: E501
            return data

    def instances_update_ip_with_http_info(self, id, command, **kwargs):  # noqa: E501
        """Updates IP address  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instances_update_ip_with_http_info(id, command, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id:  (required)
        :param UpdateIpCommand command:  (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'command']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instances_update_ip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `instances_update_ip`")  # noqa: E501
        # verify the required parameter 'command' is set
        if self.api_client.client_side_validation and ('command' not in params or
                                                       params['command'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `command` when calling `instances_update_ip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'command' in params:
            body_params = params['command']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/instances/ip_addresses/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
